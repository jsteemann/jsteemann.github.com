<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[blog4j]]></title>
  <link href="http://jsteemann.github.com/atom.xml" rel="self"/>
  <link href="http://jsteemann.github.com/"/>
  <updated>2013-01-11T00:44:21+01:00</updated>
  <id>http://jsteemann.github.com/</id>
  <author>
    <name><![CDATA[jsteemann]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using callgrind_control on Ubuntu]]></title>
    <link href="http://jsteemann.github.com/blog/2012/12/25/using-callgrind-control-on-ubuntu/"/>
    <updated>2012-12-25T21:30:00+01:00</updated>
    <id>http://jsteemann.github.com/blog/2012/12/25/using-callgrind-control-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Profiling a process with callgrind is very helpful as it provides valuable insights into how often certain functions are called and how long the program spends executing them. This helps identifying bottlenecks and potential optimisations.</p>

<p>Callgrind is contained in the Valgrind toolset, and it is easy to invoke by just prefxing the actual program command with <code>valgrind --tool=callgrind</code>, e.g.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>valgrind --tool<span class="o">=</span>callgrind bin/arangod --console /tmp/test
</span></code></pre></td></tr></table></div></figure>


<p>Callgrind will profile the complete run of the program, including program startup and shutdown.
This is often not what one wants. Often it is required to profile just a specific part or function of the overall program. But this information might get buried in the tons of profile data generated by callgrind.</p>

<p>I found the easiest way to get profile data for a specific part is to the start the program with callgrind and it get to the state just before it will execute the to-be-profiled function.
Then, in another terminal session, all event counters of callgrind should be cleared. This can be achieved by running the <code>callgrind_control -z</code> comand from another terminal, using the process id of the profiled program, e.g.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>callgrind_control -z 4740
</span></code></pre></td></tr></table></div></figure>


<p>Then the interesting part of the program can be run. When done, a final <code>callgrind_control --dump</code> command with the process id of the profiled program forces callgrind to dump the collected profile data to a file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>callgrind_control --dump 4740
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it, apart from the problem that <code>callgrind_control</code> does not work properly on Ubuntu 12.04.</p>

<p>Whenever invoking <code>callgrind_control</code> it could not find the process that callgrind was attached to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; callgrind_control -z 4740
</span><span class='line'>Error: Callgrind task with PID/name <span class="s1">&#39;4740&#39;</span> not detected.
</span><span class='line'>&gt; callgrind_control -z arangod
</span><span class='line'>Error: Callgrind task with PID/name <span class="s1">&#39;arangod&#39;</span> not detected.
</span></code></pre></td></tr></table></div></figure>


<p>This sucks, especially as it works well with other Linux distributions. It&#8217;s likely to be some Ubuntu-specific bug.</p>

<p>I checked this and found that <code>callgrind_control</code> is just a Perl-script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; which callgrind_control
</span><span class='line'>/usr/bin/callgrind_control
</span><span class='line'>&gt; file /usr/bin/callgrind_control
</span><span class='line'>/usr/bin/callgrind_control: a /usr/bin/perl -w script, ASCII text executable
</span></code></pre></td></tr></table></div></figure>


<p>It will look for running Valgrind processes with the command <code>vgdb -l</code>, and from this list of processes try to find the one the user specified.</p>

<p>When running the above program with callgrind, <code>vgdb -l</code> will produce the following output on my machine:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>use --pid<span class="o">=</span>4740 <span class="k">for</span> /usr/bin/valgrind.bin --tool<span class="o">=</span>callgrind bin/arangod --console /tmp/test
</span></code></pre></td></tr></table></div></figure>


<p>This list with then processed is then processing with a Perl regex for matches. The interesting part looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="nb">open</span> <span class="n">LIST</span><span class="p">,</span> <span class="s">&quot;vgdb -l|&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span><span class="p">(</span><span class="sr">&lt;LIST&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="sr">/^use --pid=(\d+) for \S*?valgrind\s+(.*?)\s*$/</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, now the reason is clear: <code>callgrind_control</code> will look for entries with the program <code>valgrind</code>, but <code>vgdb -l</code> will produce entries with the name <code>valgrind.bin</code>. The regex will not match <code>valgrind.bin</code>.</p>

<p>Finally, to make <code>callgrind_control</code> run on Ubuntu, the regex must be fixed to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="sr">/^use --pid=(\d+) for \S*?valgrind\.bin\s+(.*?)\s*$/</span><span class="p">)</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>or something similar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unused function C compiler mysteries]]></title>
    <link href="http://jsteemann.github.com/blog/2012/12/22/unused-function-mysteries/"/>
    <updated>2012-12-22T03:51:00+01:00</updated>
    <id>http://jsteemann.github.com/blog/2012/12/22/unused-function-mysteries</id>
    <content type="html"><![CDATA[<p>Today I stumbled across an issue when compiling C code with unused functions.</p>

<p>Some simple test program demonstrates the issue:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// this function is not used</span>
</span><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">NotUsedInline</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this function is not used either</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="nf">NotUsed</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">argc</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">argv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When compiling the above code with gcc (4.6.3), it warns about the function <em>NotUsed</em> being defined, but not unused:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gcc</span> <span class="o">-</span><span class="n">Wall</span> <span class="o">-</span><span class="n">Wextra</span> <span class="n">test</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">test</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">6</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span> <span class="n">Warnung</span><span class="o">:</span> <span class="err">»</span><span class="n">NotUsed</span><span class="err">«</span> <span class="n">definiert</span><span class="p">,</span> <span class="n">aber</span> <span class="n">nicht</span> <span class="n">verwendet</span> <span class="p">[</span><span class="o">-</span><span class="n">Wunused</span><span class="o">-</span><span class="n">function</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is fine, however, the compiler does not warn about the function <em>NotUsedInline</em> not being used either.
This warning is simply ommitted.</p>

<p>When compiling with clang (3.0.6), the result is the same. The compiler will only complain about the non-static
function being unused:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">clang</span> <span class="o">-</span><span class="n">Wall</span> <span class="o">-</span><span class="n">Wextra</span> <span class="n">test</span><span class="p">.</span><span class="n">c</span>
</span><span class='line'><span class="n">test</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">6</span><span class="o">:</span><span class="mi">13</span><span class="o">:</span> <span class="n">warning</span><span class="o">:</span> <span class="n">unused</span> <span class="n">function</span> <span class="err">&#39;</span><span class="n">NotUsed</span><span class="err">&#39;</span> <span class="p">[</span><span class="o">-</span><span class="n">Wunused</span><span class="o">-</span><span class="n">function</span><span class="p">]</span>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">NotUsed</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="o">^</span>
</span><span class='line'><span class="mi">1</span> <span class="n">warning</span> <span class="n">generated</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the same for all optimisation levels, at least O0 to O3.</p>

<p>Both compilers do not generate code for <em>NotUsedInline</em>. So they must have detected the function is unused.</p>

<p>It would be nice to get a warning from the compiler for every static function that is unused, no matter if declared inline or not.
I don&#8217;t like maintaining functions that are never called.</p>

<p>When looking at the assembly output I noticed that clang also avoids code generation for the other unused function, even with optimisation level O0.
gcc generates the code for it on O0 though it is fully unnecessary. gcc will not emit the code for the unused function on higher optimisation levels.</p>

<p>Still +1 for clang.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Octopress]]></title>
    <link href="http://jsteemann.github.com/blog/2012/12/19/setting-up-octopress/"/>
    <updated>2012-12-19T22:35:00+01:00</updated>
    <id>http://jsteemann.github.com/blog/2012/12/19/setting-up-octopress</id>
    <content type="html"><![CDATA[<p>I just stumbled across <a href="http://octopress.org">Octopress</a> and wanted to give it a try.
Octopress looks very promising: it is a blogging framework for developers, and it can be used from the command line.
Posting becomes as easy as</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post[...]              # create file for new post
</span><span class='line'>vim source/_posts/post-file     # edit post
</span><span class='line'>rake generate && rake deploy    # deploy</span></code></pre></td></tr></table></div></figure>


<p>I&#8217;d rather use that than UI-based posting a la Wordpress.
Additionally, it provides easy integration with git and Github pages. The blog posts are stored in a git repository, and the static blog content can be pushed to Github pages easily.</p>

<p>The Octopress site mentions it requires Ruby version 1.9.3, so I tried installing that with rvm. However, making that Ruby version failed due to some openssl libraries not being found though they&#8217;re definitely available on the system.
I thus installed the prebuilt Ruby package for Ubuntu and could go on.</p>

<p>The following Octopress setup was easy as described on its webpage.
In summary, Octopress allowed to set up a blog in around 30 minutes. It will be even less if the correct Ruby version is already installed and Github pages are already set up for your Github account.</p>
]]></content>
  </entry>
  
</feed>
