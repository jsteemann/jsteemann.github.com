<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[J@ArangoDB]]></title>
  <link href="http://jsteemann.github.io/atom.xml" rel="self"/>
  <link href="http://jsteemann.github.io/"/>
  <updated>2015-04-22T16:54:32+02:00</updated>
  <id>http://jsteemann.github.io/</id>
  <author>
    <name><![CDATA[jsteemann]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[COLLECTing With a Hash Table]]></title>
    <link href="http://jsteemann.github.io/blog/2015/04/22/collecting-with-a-hash-table/"/>
    <updated>2015-04-22T13:53:10+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/04/22/collecting-with-a-hash-table</id>
    <content type="html"><![CDATA[<p>ArangoDB 2.6 will feature an alternative <strong>hash</strong> implementation of the AQL <code>COLLECT</code>
operation. The new implementation can speed up some AQL queries that can not exploit indexes
on the <code>COLLECT</code> group criteria.</p>

<p>This blog post provides a preview of the feature and shows some nice performance improvements.
It also explains the <code>COLLECT</code>-related optimizer parts and how the optimizer will decide whether
to use the new or the traditional implementation.</p>

<!-- more -->


<h2>Introduction to COLLECT</h2>

<p>A quick recap: in AQL, the <code>COLLECT</code> operation can be used for grouping and optionally counting values.</p>

<p>Here&rsquo;s an example, using flight data:</p>

<figure class='code'><figcaption><span>AQL COLLECT example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR flight IN flights
</span><span class='line'>  COLLECT from = flight._from WITH COUNT INTO count
</span><span class='line'>  RETURN { from: from, count: count }</span></code></pre></td></tr></table></div></figure>


<p>This query will iterate over all documents in collection <code>flights</code>, and count the
number of flights per different <code>_from</code> value (origin airport). The query result will
contain only unique <code>from</code> values plus a counter for each:</p>

<figure class='code'><figcaption><span>query result, grouped by from</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/ABE&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">6205</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/ABQ&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">39346</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/ACV&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">362</span> <span class="p">},</span>
</span><span class='line'>  <span class="err">...</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/YAP&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">285</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/YKM&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">879</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/YUM&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">2275</span> <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the <code>COLLECT</code> will group its result according to the specified group criteria (<code>flights._from</code>
in the above query), it needs a way of figuring out to which group any input value does belong.</p>

<p>Before ArangoDB 2.6, there was a single method for determining the group. Starting with ArangoDB
2.6, the query optimizer can choose between two different <code>COLLECT</code> methods, the <strong>sorted</strong> method
and the <strong>hash</strong> method.</p>

<h2>Sorted COLLECT method</h2>

<p>The traditional method for determining the group values is the <strong>sorted</strong> method. It has been
available in ArangoDB since the very start.</p>

<p>The sorted method of <code>COLLECT</code> requires its input to be sorted by the group criteria specified
in the <code>COLLECT</code> statement. Because there is no guarantee that the input data are already sorted
in the same way, the query optimizer will automatically insert a <code>SORT</code> statement into the query
in front of the <code>COLLECT</code>. In case there is a sorted index present on the group criteria attributes,
the optimizer may be able to optimize away the <code>SORT</code> again. If there is no sorted index present
on the group criteria attributes, the <code>SORT</code> will remain in the execution plan.</p>

<p>Here is the execution plan for the above query using the <strong>sorted</strong> method of <code>COLLECT</code>. We can see
the extra <code>SortNode</code> with id #7 being added by the optimizer in front of the <code>COLLECT</code>:</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/collect-sorted.png"></p>

<p>The <strong>sorted</strong> method of <code>COLLECT</code> is efficient because it can write out a group result whenever
an input value will start a new group. Therefore it does not need to keep the whole <code>COLLECT</code>
result in memory. The downside of using the sorted method is that it requires its input to be
sorted, and that this requires adding an extra <code>SORT</code> for not properly sorted input.</p>

<h2>Hash COLLECT method</h2>

<p>Since ArangoDB 2.6, the query optimizer can also employ the <strong>hash</strong> method for <code>COLLECT</code>. The
hash method works by assigning the input values of the <code>COLLECT</code> to slots in a hash table. It
does not require its input to be sorted. Because the entries in the hash table do not have a
particular order, the query optimizer will add a post-<code>COLLECT</code> <code>SORT</code> statement. With this extra
sort of the <code>COLLECT</code> result, the optimizer ensures that the output of the sorted <code>COLLECT</code> will
be the same as the output of the hash <code>COLLECT</code>.</p>

<p>Here is the execution plan for the above query when using the <strong>hash</strong> method of <code>COLLECT</code>.
Here we can see the extra <code>SortNode</code> with id #7 being added post-<code>COLLECT</code>:</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/collect-hash.png"></p>

<p>The <strong>hash</strong> method is beneficial because it does not require sorted input and thus no extra
<code>SORT</code> step in front. However, as the input is not sorted, it is never clear when a group is
actually finished. The hash method therefore needs to build the whole <code>COLLECT</code> result in memory
until the input is exhausted. Then it can safely write out all group results. Additionally,
the result of the hash <code>COLLECT</code> is unsorted. Therefore the optimizer will add a post-<code>COLLECT</code>
sort to ensure the result will be identical to a <strong>sorted</strong> <code>COLLECT</code>.</p>

<h2>Which method will be used when?</h2>

<p>The query optimizer will always take the initial query plan and specialize its <code>COLLECT</code> nodes to
using the <strong>sorted</strong> method. It will also add the pre-<code>COLLECT</code> <code>SORT</code> in the original plan.</p>

<p>In addition, for every <code>COLLECT</code> statement not using an <code>INTO</code> clause, the optimizer will create
a plan variant that uses the <strong>hash</strong> method. In that plan variant, the post-<code>COLLECT</code> <code>SORT</code>
will be added. Note that a <code>WITH COUNT INTO</code> is still ok here, but that using a regular <code>INTO</code>
clause will disable the usage of the <strong>hash</strong> method:</p>

<figure class='code'><figcaption><span>a query that cannot use the hash method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR flight IN flights
</span><span class='line'>  COLLECT from = flight._from INTO allFlights
</span><span class='line'>  RETURN { from: from, flights: allFlights }</span></code></pre></td></tr></table></div></figure>


<p>If more than one <code>COLLECT</code> method can be used for a query, the created plans will be shipped through
the regular optimization pipeline. In the end, the optimizer will pick the plan with the lowest
estimated total cost as it will do for all other queries.</p>

<p>The <strong>hash</strong> variant does not require an up-front sort of the <code>COLLECT</code> input, and will thus be
preferred over the <strong>sorted</strong> method if the optimizer estimates many input elements for the <code>COLLECT</code>
and cannot use an index to process them in already sorted order. In this case, the optimizer
will estimate that post-sorting the result of the <strong>hash</strong> <code>COLLECT</code> will be more efficient than
pre-sorting the input for the <strong>sorted</strong> <code>COLLECT</code>.</p>

<p>The main assumption behind this estimation is that the result of any <code>COLLECT</code> statement will
contain at most as many elements as there are input elements to it. Therefore, the output of
a <code>COLLECT</code> is likely to be smaller (in terms of rows) than its input, making post-sorting more
efficient than pre-sorting.</p>

<p>If there is a sorted index on the <code>COLLECT</code> group criteria that the optimizer can exploit, the
optimizer will pick the <strong>sorted</strong> method because thanks to the index it can optimize away the
pre-<code>COLLECT</code> sort, leaving no sorts left in the final execution plan.</p>

<p>To override the optimizer decision, <code>COLLECT</code> statements now have an <code>OPTIONS</code> modifier. This
modifier can be used to force the optimizer to use the <strong>sorted</strong> variant:</p>

<figure class='code'><figcaption><span>forcing the use of the sorted variant</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR flight IN flights
</span><span class='line'>  COLLECT from = flight._from WITH COUNT INTO count OPTIONS { method: "sorted" }
</span><span class='line'>  RETURN { from: from, count: count }</span></code></pre></td></tr></table></div></figure>


<p>Note that specifying <strong>hash</strong> in <code>method</code> will not force the optimizer to use the <strong>hash</strong> method.
The reason is that the <strong>hash</strong> variant cannot be used for all queries (only <code>COLLECT</code> statements
without an <code>INTO</code> clause are eligible). If <code>OPTIONS</code> are omitted or any other method than <code>sorted</code>
is specified, the optimizer will ignore it and use its regular cost estimations.</p>

<h2>Understanding execution plans</h2>

<p>Which method is actually used in a query can found out by explaining it and looking at its
execution plan.</p>

<p>A <code>COLLECT</code> is internally handled by an object called <code>AggregateNode</code>, so we have to look for that.
In the above screenshots, the <code>AggregateNode</code>s are tagged with either <strong>hash</strong> or <strong>sorted</strong>. This can
also be checked programatically by looking at the <code>aggregationOptions.method</code> attributes in the
JSON result of an explain().</p>

<p>Here is some example code to extract this information, limited to the <code>AggregateNode</code>s of the
query already:</p>

<figure class='code'><figcaption><span>extracting just the AggregateNodes from an explain</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="err">`</span>
</span><span class='line'>  <span class="nx">FOR</span> <span class="nx">flight</span> <span class="nx">IN</span> <span class="nx">flights</span>
</span><span class='line'>  <span class="nx">COLLECT</span> <span class="nx">from</span> <span class="o">=</span> <span class="nx">flight</span><span class="p">.</span><span class="nx">_from</span> <span class="nx">WITH</span> <span class="nx">COUNT</span> <span class="nx">INTO</span> <span class="nx">count</span>
</span><span class='line'>  <span class="nx">RETURN</span> <span class="p">{</span> <span class="nx">from</span><span class="o">:</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">count</span><span class="o">:</span> <span class="nx">count</span> <span class="p">}</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">stmt</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">_createStatement</span><span class="p">(</span><span class="nx">query</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">plan</span> <span class="o">=</span> <span class="nx">stmt</span><span class="p">.</span><span class="nx">explain</span><span class="p">().</span><span class="nx">plan</span><span class="p">;</span>
</span><span class='line'><span class="nx">plan</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;AggregateNode&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the above query, this will produce something like this:</p>

<figure class='code'><figcaption><span>JSON explain result for AggregateNode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;AggregateNode&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="nt">&quot;aggregationOptions&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;method&quot;</span> <span class="p">:</span> <span class="s2">&quot;hash&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we can see that the query is using the <strong>hash</strong> method.</p>

<h2>Optimizing away post-COLLECT sorts</h2>

<p>If a query uses the <strong>hash</strong> method for a <code>COLLECT</code> but the sort order of the <code>COLLECT</code> result
is irrelevant to the user, the user can provide a hint to the optimizer to remove the
post-<code>COLLECT</code> sort.</p>

<p>This can be achieved by simplying appending a <code>SORT null</code> to the original <code>COLLECT</code> statement.
Here we can see that this removes the post-<code>COLLECT</code> sort:</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/collect-nosort.png"></p>

<h2>Performance improvements</h2>

<p>The improvements achievable by using the <strong>hash</strong> method instead of the <strong>sorted</strong> method obviously
depend on whether there are appropriate indexes present for the group criteria. If an index can
be exploited, the <strong>sorted</strong> method may be just fine. However, there are cases when no indexes are
present, for example, when running arbitrary ad-hoc queries or when indexes are too expensive
(indexes need to be updated on insert/update/remove and also will use memory).</p>

<p>Following are a few comparisons of the <strong>sorted</strong> and the <strong>hash</strong> methods in case no indexes can be
used.</p>

<p>Here&rsquo;s the setup for the test data. This generates 1M documents with both unique and repeating
string and numeric values. For the non-unique values, we&rsquo;ll use 20 different categories:</p>

<figure class='code'><figcaption><span>setting up test data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">test</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">uniqueNumber</span><span class="o">:</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">uniqueString</span><span class="o">:</span> <span class="nb">String</span><span class="p">(</span><span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">repeatingNumber</span><span class="o">:</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">20</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">repeatingString</span><span class="o">:</span> <span class="nb">String</span><span class="p">(</span><span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">20</span><span class="p">))</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s run the following query on the data and measure its execution time:</p>

<figure class='code'><figcaption><span>test query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR v IN test
</span><span class='line'>  COLLECT value = v.@attribute WITH COUNT INTO count
</span><span class='line'>  RETURN { value: value, count: count }</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The worst case is when the <code>COLLECT</code> will produce as many output rows as there are input
rows. This will happen when using a unique attribute as the grouping criterion. We&rsquo;ll run
tests on both numeric and string values.</p>

<p>Here are the execution times for unique inputs. It can be seen that the <strong>hash</strong> method
here will be beneficial if the post-<code>COLLECT</code> sort can be optimized away. As demonstrated
above, this can be achieved by adding an extra <code>SORT null</code> after the <code>COLLECT</code> statement.
If the post-<code>COLLECT</code> sort is not optimized away, it will make the hash method a bit more
expensive than the <strong>sorted</strong> method:</p>

<figure class='code'><figcaption><span>COLLECT performance with unique inputs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>collect method       @attribute                duration
</span><span class='line'>-------------------------------------------------------
</span><span class='line'>sorted               uniqueNumber               11.92 s 
</span><span class='line'>hash                 uniqueNumber               13.40 s
</span><span class='line'>hash (sort null)     uniqueNumber               10.13 s
</span><span class='line'>sorted               uniqueString               22.04 s
</span><span class='line'>hash                 uniqueString               27.35 s
</span><span class='line'>hash (sort null)     uniqueString               12.12 s</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s check the results when we group on an attribute that is non-unique. Following
are the results for numeric and string attributes with 20 different categories each:</p>

<figure class='code'><figcaption><span>COLLECT performance with non-unique inputs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>collect method       @attribute                duration
</span><span class='line'>-------------------------------------------------------
</span><span class='line'>sorted               repeatingNumber             5.56 s
</span><span class='line'>hash                 repeatingNumber             0.94 s
</span><span class='line'>hash (sort null)     repeatingNumber             0.94 s
</span><span class='line'>sorted               repeatingString            10.56 s
</span><span class='line'>hash                 repeatingString             1.09 s
</span><span class='line'>hash (sort null)     repeatingString             1.09 s</span></code></pre></td></tr></table></div></figure>


<p>In these cases, the result of the <code>COLLECT</code> will be much smaller than its input (we&rsquo;ll
only get 20 result rows out instead of 1M). Therefore the post-<code>COLLECT</code> sort for the <strong>hash</strong>
method will not make any difference, but the pre-<code>COLLECT</code> sort for the <strong>sorted</strong> method
will still need to sort 1M input values. This is also the reason why the <strong>hash</strong> method
is significantly faster here.</p>

<p>As usual, your mileage may vary, so please run your own tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Highscore Lists]]></title>
    <link href="http://jsteemann.github.io/blog/2015/04/20/creating-highscore-lists/"/>
    <updated>2015-04-20T20:18:59+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/04/20/creating-highscore-lists</id>
    <content type="html"><![CDATA[<p>I just came across a question about how to create highscore lists or
leaderboards in ArangoDB, and how they would work when compared to
<a href="http://redis.io/topics/data-types-intro#sorted-sets">Redis sorted sets</a>.</p>

<p>This blog post tries to give an answer on the topic and also detailed
instructions and queries for setting up highscore lists with ArangoDB.</p>

<!-- more -->


<h2>A highscore list in Redis</h2>

<p>Highscore lists are normally used to quickly determine who&rsquo;s currently at
the top, so we obviously need some sorted data structure.</p>

<p>Redis has a specialized datatype named <em>sorted set</em> which can be used for
exactly this purpose. A sorted set in Redis is a value consisting of multiple
key/value pairs, and that is automatically sorted by values. The sorted
set is stored under a key so it can be accessed as a whole.</p>

<p>Here&rsquo;s how one would create a sorted set named <code>highscores</code> and populate
it with 5 key/value pairs in Redis (using <em>redis-cli</em>):</p>

<figure class='code'><figcaption><span>creating a sorted set in Redis</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ZADD highscores frank 50 jan 20 willi 35 thomas 75 ingo 60</span></code></pre></td></tr></table></div></figure>


<p>Adding a new entry to a sorted set is done using <code>ZADD</code> too.
Inserting into a Redis sorted set has logarithmic complexity.</p>

<p>Updating a score in the sorted set is done using <code>ZINCRBY</code>. This command works
regardless of whether the to-be-updated key already exists in the sorted set.
If it exists, its score will be increased by the specified value, and if it does
not exist, it will be created with the specified value:</p>

<figure class='code'><figcaption><span>updating a value in a sorted set</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ZINCRBY highscores 80 max
</span><span class='line'>(integer) 1</span></code></pre></td></tr></table></div></figure>


<p>In this case the return value <code>1</code> indicates that a new key was added to the set
and that it didn&rsquo;t update an existing one.</p>

<p>Querying the entries with the lowest scores from a Redis sorted set is trivial.</p>

<p>The <code>ZRANGE</code> command will query the entries in the sorted set from lowest to
highest score. As the entries are already stored in sorted order, this is very
efficient.</p>

<p>The following command queries the bottom 3 keys from the sorted set:</p>

<figure class='code'><figcaption><span>querying the sorted set, from lowest to highest</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ZRANGE highscores 0 2
</span><span class='line'>1) "jan"
</span><span class='line'>2) "willi"
</span><span class='line'>3) "frank"</span></code></pre></td></tr></table></div></figure>


<p>For querying in reverse order, there is <code>ZREVRANGE</code>. Both commands can be
accompanied by the <code>WITHSCORES</code> flag to also return the associated values (i.e.
the scores). Here are the top 3 key/value pairs in the sorted set:</p>

<figure class='code'><figcaption><span>querying the sorted set, from highest to lowest and with scores</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ZREVRANGE highscores 0 2 WITHSCORES
</span><span class='line'>1) "max"
</span><span class='line'>2) "80"
</span><span class='line'>3) "thomas"
</span><span class='line'>4) "70"
</span><span class='line'>5) "ingo"
</span><span class='line'>6) "60"</span></code></pre></td></tr></table></div></figure>


<p>For removing an entry from a sorted set there is <code>ZREM</code>:</p>

<figure class='code'><figcaption><span>removing a key from a sorted set</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ZREM highscores jan
</span><span class='line'>(integer) 1</span></code></pre></td></tr></table></div></figure>


<p>There are many more specialized Redis commands for working with sorted sets. The
<a href="http://redis.io/commands">Redis commands</a> prefixed with a <code>Z</code> are sorted set
commands.</p>

<h2>A highscore list in ArangoDB</h2>

<p>Now let&rsquo;s try to mimic that with ArangoDB.</p>

<p>In ArangoDB, there is no such thing as a sorted set and no direct equivalent.
Instead, data in ArangoDB are stored in collections. Collections are a
general-purpose storage mechanism and they are not limited to storing just
scores.</p>

<p>We also need a mechanism for keeping highscores sorted. By default, no
specific sort order is maintained for data in a collection. To have the
collection entries sorted by highscore values, we have to explicitly create
a (sorted) skiplist index on some attribute. We&rsquo;ll use an attribute named
<code>score</code> for this.</p>

<p>The following shell commands create the collection and the index on <code>score</code>:</p>

<figure class='code'><figcaption><span>creating the highscores collection in ArangoDB</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;highscores&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;skiplist&quot;</span><span class="p">,</span> <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;score&quot;</span> <span class="p">]</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the collection is set up, we can switch to AQL for the following operations
(though we could achieve the same with Shell commands).</p>

<p>To insert the same initial data as in the Redis case, we can run the following
five AQL queries:</p>

<figure class='code'><figcaption><span>inserting initial scores</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT { _key: "frank", score: 50 } IN highscores
</span><span class='line'>INSERT { _key: "jan", score: 20 } IN highscores
</span><span class='line'>INSERT { _key: "willi", score: 35 } IN highscores
</span><span class='line'>INSERT { _key: "thomas", score: 75 } IN highscores
</span><span class='line'>INSERT { _key: "ingo", score: 60 } IN highscores</span></code></pre></td></tr></table></div></figure>


<p>Note that I have been using the <code>_key</code> attribute for saving the user id. Using the
<code>_key</code> attribute is normally beneficial because it is the collection&rsquo;s primary key.
It is always present and automatically unique, so exactly what we need for maintaining
a highscore list. Note that there are some restrictions for what can be stored inside
the <code>_key</code> attribute, but as long as values are only ASCII letters or digits, there
is nothing to worry about.</p>

<p>Inserting into the collection will also automatically populate the indexes.
Inserting into a skiplist should have about logarithmic complexity on average
(though this is not guaranteed &ndash; this is because the skiplist is a probabilistic
data structure and internally it will be flipping coins. In theory there is a chance
that it becomes badly balanced. But in practice it should be quite close to an
average logarithmic complexity).</p>

<p>As we have some initial documents, we can now query the lowest and highest scores.
This will also be efficient as the queries will use the sorted index on <code>score</code>:</p>

<figure class='code'><figcaption><span>querying the users with lowest scores</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores 
</span><span class='line'>  SORT h.score ASC 
</span><span class='line'>  LIMIT 3 
</span><span class='line'>  RETURN { user: h._key, score: h.score }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>querying the users with highest scores</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores 
</span><span class='line'>  SORT h.score DESC 
</span><span class='line'>  LIMIT 3 
</span><span class='line'>  RETURN { user: h._key, score: h.score }</span></code></pre></td></tr></table></div></figure>


<p>To store a highscore for a user without knowing in advance whether a value has already
been stored before for this user, one can use <code>UPSERT</code>. The <code>UPSERT</code> will either insert
a new highscore entry, or update an existing one if already present:</p>

<figure class='code'><figcaption><span>using UPSERT </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT { _key: "max" } 
</span><span class='line'>  INSERT { _key: "max", score: 80 } 
</span><span class='line'>  UPDATE { score: OLD.score + 80 } IN highscores 
</span><span class='line'>  RETURN { user: NEW._key, score: NEW.score }</span></code></pre></td></tr></table></div></figure>


<p>If there is already an entry with a key <code>max</code>, its scores will be increased by 80.
If such entry does not exist, it will be created. In both cases, the new score will
be returned.</p>

<p>Note: the <code>UPSERT</code> command has been added in ArangoDB version 2.6.</p>

<p>Finally, removing an entry from a highscore list is a straight-forward remove operation:</p>

<figure class='code'><figcaption><span>removing an element </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>REMOVE { _key: "jan" } IN highscores</span></code></pre></td></tr></table></div></figure>


<h2>Extensions</h2>

<p>We&rsquo;ll now build on this simple example and create slightly more advanced highscore list
use cases. The following topics will be covered:</p>

<ul>
<li>multi-game highscore lists</li>
<li>joining data</li>
<li>maintaining a &ldquo;last updated&rdquo; date</li>
</ul>


<h3>Multi-game highscore lists</h3>

<p>We&rsquo;ll start with generalizing the single-game highscore list into a multi-game
highscore list.</p>

<p>In Redis, one would create multiple sorted sets for handling the highscore lists of
multiple games. Multiple Redis sorted sets are stored under different keys, so they
are isolated from each other.</p>

<p>Though Redis provides a few commands to aggregate data from multiple sorted sets
(<code>ZUNIONSTORE</code> and <code>ZINTERSTORE</code>) into a new sorted set, other cross-set operations are
not supported. This is not a problem if the client application does not have to
perform cross-set queries or cleanup tasks.</p>

<p>In ArangoDB, multi-game highscore lists can be implemented in two variants.<br/>
In order to decide which variant is better suited, we need to be clear about whether
all highscores should be stored in the same collection or if we prefer using multiple
collections (e.g. one per game).</p>

<p>Storing highscores for different games in separate collections has the advantage that
they&rsquo;re really isolated. It is easy to get rid of a specific highscore list by simply
dropping its collection. It is also easy to get right query-wise.</p>

<p>All that needs to be changed to turn the above examples into a multi-game highscore
list solution is to change the hard-coded collection name <code>highscores</code> and make it a
bind parameter, so the right collection name can be injected by the client application
easily.</p>

<p>On the downside, the multi-collection solution will make cross-game operations difficult.
Additionally, having one collection per game may get out of hand when there are many,
many highscore lists to maintain. In case there are many but small highscore lists to
maintain, it might be better to put them into a single collection and add a <code>game</code>
attribute to tell the individual lists apart in it.</p>

<p>Let&rsquo;s focus on this and put all highscores of all games into a single collection.</p>

<p>The first adjustment that needs to be made is that we cannot use <code>_key</code> for user ids
anymore. This is because user ids may repeat now (a user may be contained in more than
one list). So we will change the design and make the combination of <code>game</code> and <code>user</code>
a new unique key:</p>

<figure class='code'><figcaption><span>creating a multi-game highscore collection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_drop</span><span class="p">(</span><span class="s2">&quot;highscores&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;highscores&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;hash&quot;</span><span class="p">,</span> <span class="nx">unique</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;game&quot;</span> <span class="p">]</span> <span class="p">});</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;skiplist&quot;</span><span class="p">,</span> <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;game&quot;</span><span class="p">,</span> <span class="s2">&quot;score&quot;</span> <span class="p">]</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can use the unique hash index on <code>user</code> and <code>game</code> to ensure there is at most one entry
for per user per game. It also allows use to find out quickly whether we already have
an entry for that particular combination of game and user. Because we are not using
<code>_key</code> we could now also switch to numeric ids if we preferred that.</p>

<p>The other index on <code>game</code> and <code>score</code> is sorted. It can be used to quickly retrieve the
leaderboard for a given game. As it is primarily sorted by <code>game</code>, it can also be used
to enumerate all entries for a given game.</p>

<p>The following Shell command populates the multi-game highscores collection with 55,000
highscores:</p>

<figure class='code'><figcaption><span>populating the multi-game collection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">game</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">game</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="nx">game</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">user</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">game</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span> <span class="o">++</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">save</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">game</span><span class="o">:</span> <span class="nx">game</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">user</span><span class="o">:</span> <span class="nb">String</span><span class="p">(</span><span class="nx">user</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">score</span><span class="o">:</span> <span class="p">(</span><span class="nx">game</span> <span class="o">+</span> <span class="nx">user</span><span class="p">)</span> <span class="o">%</span> <span class="mi">997</span>  <span class="cm">/* arbitrary score */</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The game ids used above are between 0 and 9, though any other game ids would work, too.
User ids are stringified numbers.</p>

<p>We can now find out the leaderboard for game 2 with the following adjusted AQL query.
The query will use the (sorted) skiplist index:</p>

<figure class='code'><figcaption><span>querying the leaderboard of a specific game</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores 
</span><span class='line'>  FILTER h.game == 2 
</span><span class='line'>  SORT h.score DESC 
</span><span class='line'>  LIMIT 3 
</span><span class='line'>  RETURN { user: h.user, score: h.score }</span></code></pre></td></tr></table></div></figure>


<p>Removing all scores for a specific game is also efficient due to the the same index:</p>

<figure class='code'><figcaption><span>removing all scores for game 5</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores
</span><span class='line'>  FILTER h.game == 5
</span><span class='line'>  REMOVE h IN highscores</span></code></pre></td></tr></table></div></figure>


<p>On a side note: when storing all highscores in the same collection, we could also
run cross-game queries if we wanted to. All that needs to be done for this is adjusting
the <code>FILTER</code> conditions in the queries.</p>

<p>Inserting or updating a user score can be achieved using an <code>UPSERT</code>.
Here&rsquo;s a query to increase the score of user <code>"1571"</code> in game <code>2</code> by a value of 5:</p>

<figure class='code'><figcaption><span>updating a score for a specific user/game combination</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT { game: 2, user: "1571" } 
</span><span class='line'>  INSERT { game: 2, user: "1571", score: 5 } 
</span><span class='line'>  UPDATE { score: OLD.score + 5 } IN highscores 
</span><span class='line'>  RETURN { user: NEW._key, score: NEW.score }</span></code></pre></td></tr></table></div></figure>


<p>The same index on <code>[ "user", "game" ]</code> is used in the following query that will
delete the highscore of a given user in a specific game:</p>

<figure class='code'><figcaption><span>removing a score for a specific user/game combination</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores 
</span><span class='line'>  FILTER h.game == 6 
</span><span class='line'>  FILTER h.user == '3894' 
</span><span class='line'>  REMOVE h IN highscores</span></code></pre></td></tr></table></div></figure>


<h3>Joining data</h3>

<p>Querying the leaderboard for a specific game was easy. However, so far we have only
queried user ids and associated scores in games. In reality, we probably want to display
some more user information in a leaderboard, for example their screen names.</p>

<p>In Redis, no extra information can be stored in sorted sets. So extra user information
must be stored under separate keys. There is no concept of joins in Redis. The scores
contained in the sorted set need to be queried by the client application, and extra
user information have to be queried by the client application separately.</p>

<p>In ArangoDB, we could store the screen names in the highscores collection along with
the highscores so we can easily query them with the leaderboard query. This is also how it
would be done in MongoDB due to the absence of joins there.</p>

<p>While this would work, it will create lots of redundant data if the screen names are
also used and stored elsewhere.</p>

<p>So let&rsquo;s pick the option that stores highscores and screen names in separate places,
and brings them together only when needed in a leaderboard query.</p>

<p>Let&rsquo;s store screen names in a collection named <code>users</code>. The following Shell commands
will create the collection and set up 100K users with dummy screen names:</p>

<figure class='code'><figcaption><span>creating test users</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;users&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">_key</span><span class="o">:</span> <span class="nb">String</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;test user #&quot;</span> <span class="o">+</span> <span class="nx">i</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now query the highscores plus the screen name in one go:</p>

<figure class='code'><figcaption><span>joining highscores with user data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores 
</span><span class='line'>  FILTER h.game == 2 
</span><span class='line'>  SORT h.score DESC 
</span><span class='line'>  LIMIT 3 
</span><span class='line'>  FOR u IN users 
</span><span class='line'>    FILTER h.user == u._key 
</span><span class='line'>    RETURN { user: h.user, name: u.name, score: h.score } </span></code></pre></td></tr></table></div></figure>


<h3>Maintaining a &ldquo;last updated&rdquo; date</h3>

<p>Finally, let&rsquo;s try to keep track of when a highscore was last updated. There are
a few use cases for this, for example displaying the date and time of when a highscore
was achieved or for revmoing older highscores.</p>

<p>In Redis, the sorted set values are just the numeric scores, so we cannot store
anything else (such as a date) inside the sorted sets. We would really need to store
the update date for each highscore entry outside the sorted set, either under a
separate key, or using a Redis hash. However, this is complex to manage and keep
consistent so we won&rsquo;t do it.</p>

<p>For implementing the automatic expiration, it would be good if we could use the
built-in automatic key expiration of Redis. Each key can optionally be given a time-to-live
or an expiration date, and it will automatically expire and vanish then without further
ado. This may be exactly what we need to remove older highscore entries, but we cannot
use it. The reason is that expiration only works for keys at the top level, but not
for individual keys inside a sorted set. So we cannot really implement this sanely.</p>

<p>Let&rsquo;s switch to ArangoDB now. Here we work with arbitrarily structured documents.
That means we can store any other attributes along with a highscore. We can store the
timestamp of when a highscore was last set or updated in an attribute named <code>date</code>:</p>

<figure class='code'><figcaption><span>storing the date of last update</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET now = DATE_NOW()
</span><span class='line'>UPSERT { game: 2, user: "1571" } 
</span><span class='line'>  INSERT { game: 2, user: "1571", score: 10, date: now } 
</span><span class='line'>  UPDATE { score: OLD.score + 10, date: now } IN highscores 
</span><span class='line'>  RETURN { user: NEW._key, score: NEW.score }</span></code></pre></td></tr></table></div></figure>


<p>The <code>date</code> attribute can now be used for display purposes already.</p>

<p>We can also use the <code>date</code> attribute for identifying the oldest entries in the
highscore list in case we want the list to be periodically cleaned up.</p>

<p>Obviously we will be indexing <code>date</code> for this, but we need to decide whether we want to use
the same expiration periods for all games, or if we want to use game-specific expirations.</p>

<p>If the expiration date is the same for all games, then we can index just <code>date</code>:</p>

<figure class='code'><figcaption><span>creating the index on date</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;skiplist&quot;</span><span class="p">,</span> <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;date&quot;</span> <span class="p">]</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we now want to remove entries older than roughly 2 days, regardless of the
associated game, the removal query looks like this:</p>

<figure class='code'><figcaption><span>deleting oldest entries</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET compare = DATE_NOW() - 2 * 86400 * 1000
</span><span class='line'>FOR h IN highscores
</span><span class='line'>  FILTER h.date &lt; compare
</span><span class='line'>  LIMIT 1000
</span><span class='line'>  REMOVE h IN highscores</span></code></pre></td></tr></table></div></figure>


<p>If we instead want to find (and remove) the oldest entries for individual games,
we need to create the index on <code>game</code> and <code>date</code>:</p>

<figure class='code'><figcaption><span>creating the index on game and date</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;skiplist&quot;</span><span class="p">,</span> <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;game&quot;</span><span class="p">,</span> <span class="s2">&quot;date&quot;</span> <span class="p">]</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This index allows to efficiently get rid of the oldest entries per game:</p>

<figure class='code'><figcaption><span>remvoin oldest entries for a game</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET compare = DATE_NOW() - 2 * 86400 * 1000
</span><span class='line'>FOR h IN highscores
</span><span class='line'>  FILTER h.game == 2
</span><span class='line'>  FILTER h.date &lt; compare
</span><span class='line'>  LIMIT 1000
</span><span class='line'>  REMOVE h IN highscores</span></code></pre></td></tr></table></div></figure>


<p>On a side note: the <code>REMOVE</code> was limited to the <em>oldest</em> 1000 entries. This
was done to make the query return fast. The removal query can be repeated while
there are still entries to remove.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating Documents With Arangoimp]]></title>
    <link href="http://jsteemann.github.io/blog/2015/04/14/updating-documents-with-arangoimp/"/>
    <updated>2015-04-14T14:55:45+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/04/14/updating-documents-with-arangoimp</id>
    <content type="html"><![CDATA[<p>Inspired by the feature request in <a href="https://github.com/arangodb/arangodb/issues/1298">Github issue #1298</a>,
we added update and replace support for ArangoDB&rsquo;s import facilities.</p>

<p>This extends ArangoDB&rsquo;s HTTP REST API for importing documents plus the arangoimp binary so they
can not only insert new documents but also update existing ones.</p>

<p>Inserts and updates can also be mixed in a single import run.
This blog post provides a few usage examples.</p>

<!-- more -->


<h2>Traditional import</h2>

<p>Previously, the HTTP REST API for importing documents and the arangoimp binary only supported
document inserts, so they could not be used to update existing documents. Bulk-updating existing
documents with data from a file or mixing inserts with updates required to write custom scripts
or run multiple commands or queries.</p>

<p>I won&rsquo;t show this in detail but want to concentrate solely on what the import did. I will only
show arangoimp and not the HTTP import API.</p>

<p>Let&rsquo;s assume there is already a collection named <em>users</em> containing the following documents:</p>

<figure class='code'><figcaption><span>data in collection before import</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;_key&quot;</span> <span class="p">:</span> <span class="s2">&quot;user1&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;John Doe&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_key&quot;</span> <span class="p">:</span> <span class="s2">&quot;user2&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Jane Smith&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, importing the following data via arangoimp would produce errors for line 1 and 2 (i.e.
for keys <code>user1</code> and <code>user2</code>) because these documents already exist in the target collection:</p>

<figure class='code'><figcaption><span>data to be imported</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;_key&quot;</span> <span class="p">:</span> <span class="s2">&quot;user1&quot;</span><span class="p">,</span> <span class="nt">&quot;country&quot;</span> <span class="p">:</span> <span class="s2">&quot;AU&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_key&quot;</span> <span class="p">:</span> <span class="s2">&quot;user2&quot;</span><span class="p">,</span> <span class="nt">&quot;country&quot;</span> <span class="p">:</span> <span class="s2">&quot;UK&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_key&quot;</span> <span class="p">:</span> <span class="s2">&quot;user3&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Joe Public&quot;</span><span class="p">,</span> <span class="nt">&quot;country&quot;</span> <span class="p">:</span> <span class="s2">&quot;ZA&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what happened when importing the above data into the collection with the two existing
documents:</p>

<pre><code>&gt; arangoimp --file data.json --collection users

2015-04-14T18:23:32Z [27441] WARNING at position 1: creating document failed with error 'unique constraint violated', offending document: {"_key":"user1","country":"AU"}
2015-04-14T18:23:32Z [27441] WARNING at position 2: creating document failed with error 'unique constraint violated', offending document: {"_key":"user2","country":"UK"}

created:          1
warnings/errors:  2
</code></pre>

<p>After the traditional import, the collection contained the following documents:</p>

<figure class='code'><figcaption><span>collection contents after traditional import</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="nt">&quot;_key&quot;</span> <span class="p">:</span> <span class="s2">&quot;user1&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;John Doe&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_key&quot;</span> <span class="p">:</span> <span class="s2">&quot;user2&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Jane Smith&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">{</span> <span class="nt">&quot;_key&quot;</span> <span class="p">:</span> <span class="s2">&quot;user3&quot;</span><span class="p">,</span> <span class="nt">&quot;country&quot;</span> <span class="p">:</span> <span class="s2">&quot;ZA&quot;</span><span class="p">,</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;Joe Public&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As can be seen, the first two documents (<code>user1</code> and <code>user2</code>) remain unmodified, and the third
document (<code>user3</code>) was inserted because it did not yet exist in the target collection.</p>

<h2>Using &mdash;on-duplicate</h2>

<p>So what&rsquo;s the change?</p>

<p>As announced, a single import run can now both insert new documents and update existing ones.
What exactly will happen is configurable by setting arangoimp&rsquo;s new command-line option
<code>--on-duplicate</code>.</p>

<p>By default, even in <code>devel</code> there will be errors reported for the two already existing documents.</p>

<p>Good news is that this behavior can be changed by setting <code>--on-duplicate</code> to a value of <code>update</code>,
<code>replace</code> or <code>ignore</code>:</p>

<ul>
<li><p><code>error</code>: if a document with the specified <code>_key</code> already exists in the target collection, the
import will not modify it and instead return an error. This is the default behavior and
compatible with all previous versions of ArangoDB.</p>

<p>We have seen the result above in the <em>traditional import</em>.</p></li>
<li><p><code>update</code>: if a document with the specified <code>_key</code> already exists in the target collection, the
import will (partially) update the existing document with the specified attributes.
Only the attributes present in the import data will be updated, and all other attributes of
the document present in the collection will be preserved.</p>

<pre><code>&gt; arangoimp --file data.json --collection users --on-duplicate update

created:          1
warnings/errors:  0
updated/replaced: 2
ignored:          0
</code></pre>

<p>The first two documents (<code>user1</code> and <code>user2</code>) were updated (attribute <code>country</code>
was added) and the third document (<code>user3</code>) was inserted because it did not exist in the
target collection:</p>

<pre><code>{ "_key" : "user1", "country" : "AU", "name" : "John Doe" }
{ "_key" : "user2", "country" : "UK", "name" : "Jane Smith" } 
{ "_key" : "user3", "country" : "ZA", "name" : "Joe Public" } 
</code></pre></li>
<li><p><code>replace</code>: if a document with the specified <code>_key</code> already exists in the target collection, the
import will fully replace the existing document with the specified attributes.
Only the attributes present in the import data will be preserved, and all other attributes of
the document present in the collection will be removed.</p>

<pre><code>&gt; arangoimp --file data.json --collection users --on-duplicate replace

created:          1
warnings/errors:  0
updated/replaced: 2
ignored:          0
</code></pre>

<p>The first two documents (<code>user1</code> and <code>user2</code>) were replaced (attribute <code>country</code> was present
in the import data, previously existing attribute <code>name</code> was removed). The third document
(<code>user3</code>) was inserted because it did not exist in the target collection before:</p>

<pre><code>{ "_key" : "user1", "country" : "AU" } 
{ "_key" : "user2", "country" : "UK" } 
{ "_key" : "user3", "country" : "ZA", "name" : "Joe Public" } 
</code></pre></li>
<li><p><code>ignore</code>: if a document with the specified <code>_key</code> already exists in the target collection, the
import will ignore and not modify it. The difference to <code>error</code> is that ignored documents will
not be counted as errors. No errors/warnings will be reported for duplicate <code>_key</code> values, but
the number of duplicate key occurrences will be reported in the <code>ignored</code> attribute</p>

<pre><code>&gt; arangoimp --file data.json --collection users --on-duplicate ignore

created:          1
warnings/errors:  0
updated/replaced: 0
ignored:          2
</code></pre>

<p>Collection contents are the same as in the <code>error</code> case.</p></li>
</ul>


<p>The above examples were for the arangoimp import binary, but the HTTP import API was adjusted
as well. The duplicate key behavior can be controlled there by using the new <code>onDuplicate</code> URL
parameter. Possible values are also <code>error</code>, <code>update</code>, <code>replace</code> and <code>ignore</code> as shown for arangoimp.</p>

<h2>Caveats</h2>

<p>All matching is done using document keys (i.e. <code>_key</code> attributes) and no other attributes. That
means existing documents can only be updated if their <code>_key</code> attributes are present in the import
data. When no <code>_key</code> attribute is present for a document in the import data, the import will try
to insert a new document.</p>

<p>The extended functionality is available in the <code>devel</code> branch, which will eventually turn into
a stable 2.6 release.</p>

<p><strong>Enjoy!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Efficient Data Exports]]></title>
    <link href="http://jsteemann.github.io/blog/2015/04/04/more-efficient-data-exports/"/>
    <updated>2015-04-04T21:51:33+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/04/04/more-efficient-data-exports</id>
    <content type="html"><![CDATA[<p>I recently wrote about the <a href="https://jsteemann.github.io/blog/2015/04/01/improvements-for-the-cursor-api/">performance improvements for the cursor API</a>
made in ArangoDB 2.6. The performance improvements are due to a rewrite of the cursor API&rsquo;s internals.</p>

<p>As a byproduct of this rewrite, an extra API was created for exporting all documents from a
collection to a client application. With this being its only use case, it is clear that the new
API will not solve every data export problem. However, the API&rsquo;s limitedness facilitated a very efficient
implementation, resulting in <strong>nice speedups</strong> and <strong>lower memory usage</strong> when compared to the alternative
way of exporting all documents into a client application.</p>

<!-- more -->


<p>There did not exist an <em>official</em> export API before. So users often ran AQL queries like the following
to export all documents from a collection:</p>

<figure class='code'><figcaption><span>AQL query to export all documents</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection 
</span><span class='line'>  RETURN doc</span></code></pre></td></tr></table></div></figure>


<p>While such AQL queries will work for smaller result sets, they will get problematic when results get
bigger. The reason is that the AQL very will effectively create a snapshot of all the documents present
in the collection. Creating the snapshot is required for data consistency. Once the snapshot is created,
clients can incrementally fetch the data from the snapshot and will still get a consistent result even
if the underlying collections get modified.</p>

<p>For smaller result sets, snapshotting is not a big issue. But when exporting all documents from a
bigger collection, big result sets will be produced. In this case, the snapshotting can become expensive
in terms of CPU time and also memory consumption.</p>

<p>We couldn&rsquo;t get around the snapshotting completely, but we could take advantage of the fact that when exporting
documents from a collection, all that can be snapshotted are documents. This is different to snapshotting
arbitrary AQL queries, which can produce any kind and combination of JSON.</p>

<p>Dealing only with documents allowed us to take an efficiency shortcut: instead of copying the complete
documents it will only copy pointers to the document revisions presently in th collection. Not only is this
much faster than doing a full copy of the document, but it also saves a lot of memory.</p>

<h2>Invoking the API</h2>

<p>While the invocation of the cursor API and the export API is slightly different, their result formats
have intentionally been kept similar. This way client programs do not need to be adjusted much to consume
the export API instead of the cursor API.</p>

<p>An example command for exporting via the cursor API is:</p>

<figure class='code'><figcaption><span>exporting all documents via the cursor API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST <span class="se">\</span>
</span><span class='line'>     <span class="s2">&quot;http://127.0.0.1:8529/_api/cursor&quot;</span> <span class="se">\</span>
</span><span class='line'>     --data <span class="s1">&#39;{&quot;query&quot;:&quot;FOR doc IN collection RETURN docs&quot;}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>A command for exporting via the new export API is:</p>

<figure class='code'><figcaption><span>exporting all documents via the export API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -X POST <span class="se">\</span>
</span><span class='line'>     <span class="s2">&quot;http://127.0.0.1:8529/_api/export?collection=docs&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both cases, the result will look like this:</p>

<figure class='code'><figcaption><span>API results</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;result&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;hasMore&quot;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;id&quot;</span><span class="p">:</span><span class="s2">&quot;2221050516478&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>result</code> attribute will contain the first few (1,000 by default) documents. The
<code>hasMore</code> attribute will indicate whether there are more documents to fetch from the
server. In this case the client can use the cursor id specified in the <code>id</code> attribute
to fetch more result.</p>

<p>The API can be invoked via any HTTP-capable client such as <code>curl</code> (as shown above).</p>

<p>I have also added <a href="https://github.com/arangodb/arangodb-php/blob/devel/README.md#exporting_data">bindings to the ArangoDB-PHP driver</a>
today (contained in the driver&rsquo;s <code>devel</code> branch).</p>

<h2>API performance</h2>

<p>Now, what can be gained by using the export API?</p>

<p>The following table shows the execution times for fetching the first 1,000 documents
from collections of different sizes, both with via the cursor API and the export API.
Figures for the cursor API are shown for ArangoDB 2.5 and 2.6 (the version in which
it was rewritten):</p>

<figure class='code'><figcaption><span>execution times for cursor API and export API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># of documents    cursor API (2.5)    cursor API (2.6)      export API
</span><span class='line'>--------------    ----------------    ----------------      ----------
</span><span class='line'>       100,000               1.9 s               0.3 s          0.04 s
</span><span class='line'>       500,000               9.5 s               1,4 s          0.08 s
</span><span class='line'>     1,000,000              19.0 s               2.8 s          0.14 s
</span><span class='line'>     2,000,000              39,0 s               7.5 s          0.19 s
</span><span class='line'>     5,000,000               n/a                 n/a            0.55 s
</span><span class='line'>    10,000,000               n/a                 n/a            1.32 s</span></code></pre></td></tr></table></div></figure>


<p>Execution times are from my laptop, which only has 4 GB of RAM and a slow disk.</p>

<p>As can be seen, the rewritten cursor API in 2.6 is already much faster than the one
in 2.5. However, for exporting documents from one collection only, the new export API
is superior.</p>

<p>The export API also uses a lot less memory for snapshotting, as can be nicely seen in the
two bottom rows of the results. For these cases, the snapshots done by the cursor API
were bigger than the available RAM and the OS started swapping heavily. Snapshotting
didn&rsquo;t complete within 15 minutes, so no results are shown above.</p>

<p>Good news is that this didn&rsquo;t happen with the export API, due to the fact that the
snapshots it creates are much more compact.</p>

<p>Another nice side effect of the speedup is that the first results will arrive much
earlier in the client application. This will help in reducing client connection timeouts
in case clients are enforcing them on temporarily non-responding connections.</p>

<h2>Summary</h2>

<p>ArangoDB 2.6 provides a specialized export API for exporting all documents from a
collection and shipping them to a client application. It is rather limited but
faster than the general-purpose AQL cursor API and can store its snapshots using less
memory.</p>

<p>Therefore, exporting all documents from bigger collections calls for using the new
export API from 2.6 on. The new export API is present in the <code>devel</code> branch, which
will eventually turn into a 2.6 release.</p>

<p>For other cases, when still using the cursor API, 2.6 will also provide significant
performance improvements when compared to 2.5. This can be seen from the comparison
table above and also from the observations made
<a href="https://jsteemann.github.io/blog/2015/04/01/improvements-for-the-cursor-api/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improvements for the Cursor API]]></title>
    <link href="http://jsteemann.github.io/blog/2015/04/01/improvements-for-the-cursor-api/"/>
    <updated>2015-04-01T13:59:22+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/04/01/improvements-for-the-cursor-api</id>
    <content type="html"><![CDATA[<p>This week we pushed some modifications for ArangoDB&rsquo;s cursor API into the <code>devel</code> branch.
The change will result in less copying of AQL query results between the AQL and the HTTP layers.
As a positive side effect, this will reduce the amount of garbage collection the built-in V8
has to do.</p>

<p>These modifications should improve the cursor API performance significantly for many cases,
while at the same time keeping its REST API stable.</p>

<p>This blog post shows some first unscientific performance tests comparing the old cursor API with
its new, improved implementation.</p>

<!-- more -->


<p>A good way to test the cursor API performance is to issue lots of queries from the
ArangoShell. The ArangoShell will send the query to the server for execution. The server
will respond with the first 1,000 results for the query.</p>

<p>Additionally the server will create a server-side cursor if the result set is bigger than
1,000 documents. In this case, the ArangoShell will issue subsequent HTTP requests that fetch
the outstanding documents from the server.</p>

<p>The above behavior is triggered automatically when <code>db._query(query).toArray()</code> is run in
the ArangoShell.</p>

<p>Here is a test function that executes a query <em>n</em> times and measures the total execution time.
It will issue <em>n</em> HTTP requests to the server&rsquo;s cursor API for executing the query. It will
also issue further HTTP requests if the total result set size is bigger than 1,000 documents.
What is getting measured is thus the total execution time from the ArangoShell&rsquo;s point of view,
including time spent in the server-side cursor functions as well as in HTTP traffic.</p>

<figure class='code'><figcaption><span>function for testing the cursor API</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;internal&quot;</span><span class="p">).</span><span class="nx">time</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">time</span><span class="p">();</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">time</span><span class="p">()</span> <span class="o">-</span> <span class="nx">s</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The test function was run with different queries to check which types of queries will benefit
from the cursor API change.</p>

<p>Note that the ArangoShell will issue all its requests to the cursor API sequentially. This is
ok for the purpose of this test, as the purpose was to measure the relative performance change
between the old and the new API implementation.</p>

<p>The ArangoShell and ArangoDB server were running on the same physical machine during the tests,
so this is a <strong>localhost</strong> benchmark.</p>

<h2>Detailed test results</h2>

<p>Here are the results from my local machine.</p>

<p>The first query was about the simplest one I could come up with. The query was sent to the
server 10,000 times. The result set size per query ws 1, resulting in 10,000 calls to the cursor
API with not much data to be transferred per call:</p>

<figure class='code'><figcaption><span>test query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;RETURN 1&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Execution took 7.225 s with the old API, and 5.195 s with the new API (<strong>28 % improvement</strong>).</p>

<p>A query returning a slightly more complex result value:</p>

<figure class='code'><figcaption><span>test query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;RETURN { one: &#39;test&#39;, two: &#39;another-value&#39;, three: [ 1, 2, 3 ] }&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This took 8.046 s with the old API, and 5.829 s with the new one (<strong>27 % improvement</strong>).</p>

<p>Another simple query, again executed 10,000 times, but now returning 10 values per query:</p>

<figure class='code'><figcaption><span>test query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;FOR i IN 1..10 RETURN i&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Execution of this query took 7.951 s with the old, and 5.779 s with the new API (<strong>27 % improvement</strong>).</p>

<p>Now raising the number of return values per query from 10 to 1,000:</p>

<figure class='code'><figcaption><span>test query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;FOR i IN 1..1000 RETURN i&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This took 31.650 s with the old, and 28.504 s with the new API (<strong>10 % improvement</strong>).</p>

<p>So far all query results contained 1,000 or less values. In this case the server is able to
send the whole query result in response in one go, so there were only as many calls to the
cursor API as there were queries. Even though the ArangoShell called the cursor API, the
cursor only existed temporarily on the server but directly vanished when the server sent its
response.</p>

<p>Now let&rsquo;s run a query that returns more than 1,000 values each. The first call to the
cursor API will then only return the first 1,000 results and additionally establish a
server-side cursor so the client can fetch more results. This will mean that for each client
query, there will be multiple HTTP requests.</p>

<p>The following run issues 100,000 calls to the cursor API (10,000 queries times 10 batches per
query):</p>

<figure class='code'><figcaption><span>test query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;FOR i IN 1..10000 RETURN i&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This took 307.108 s with the old API, in contrast to 232.322 s with the new API (<strong>24 % improvement</strong>).</p>

<p>The next queries I tested were collection-based. They returned data from a collection named
<code>docs</code>. The collection contained 10,000 documents, and each document in the collection had
5 attributes.</p>

<p>The first query returned only a single one (random) document from the collection per query.</p>

<figure class='code'><figcaption><span>test query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;FOR i IN docs LIMIT 1 RETURN i&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This took 8.689 s with the old API and 6.245 s with the new API (<strong>28 % improvement</strong>).</p>

<p>The next query returned all the documents from the collection. The query was executed
only 1,000 times because the result sets already got quite big. The combined size of all
result sets was 1,000,000 documents (10,000 documents, 1,000 queries).</p>

<figure class='code'><figcaption><span>test query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;FOR i IN docs RETURN i&quot;</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This took 453.736 s with the old, and 197.543 s with the new API (<strong>56 % improvement</strong>).</p>

<p>The final query returned all document keys from the collection. The combined size of all result
sets was 10,000,000 values (10,000 documents, 10,000 queries):</p>

<figure class='code'><figcaption><span>test query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;FOR i IN docs RETURN i._key&quot;</span><span class="p">,</span> <span class="mi">10000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the old API, this took 529.765 s, and with the new API it took 348.243 s (<strong>34 % improvement</strong>).</p>

<h2>Summary</h2>

<p>The new cursor API was faster than its old counterpart for all queries tested here. Total execution
time as measured by the ArangoShell (representative for any other client program sending queries to
ArangoDB) was consistenly lower than it was with the old API implementation.</p>

<p>The improvements measured were varying. For the queries tested, the improvements fell into a range
of <strong>10 % to even more than 50 % speedup</strong>.</p>

<p>How much gain can be achieved in reality obviously depends on the type of query executed. There will
also be queries that do not benefit from the new API implementation. For example, queries that do not
return any results will not benefit much. This is because most of the optimizations done affect
the buffering and the data transport internals of the cursor API. Furthermore, queries that run for
a very long time but return only small amounts of data may not benefit considerably for the same reason.
However, there should not be any queries which are negatively affected by the change.</p>

<p>All in all, this looks quite promising, especially as the change will come <strong>for free</strong> for client
applications. Client programs do not need to be adjusted to reap the benefits. This is because all
that has changed were the <em>internals</em> of the cursor API. Its public REST interface remains unchanged.</p>

<p>The changes are included in the <code>devel</code> branch and can be tested there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improvements for Data-modification Queries]]></title>
    <link href="http://jsteemann.github.io/blog/2015/03/27/improvements-for-data-modification-queries/"/>
    <updated>2015-03-27T23:29:19+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/03/27/improvements-for-data-modification-queries</id>
    <content type="html"><![CDATA[<p>Data-modification queries were enhanced in ArangoDB 2.4 to be able to also return
the inserted, update or removed documents.</p>

<p>For example, the following statement inserted a few documents and also returned
them with all their attributes:</p>

<figure class='code'><figcaption><span>AQL insert query returning documents</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR i IN 1..10
</span><span class='line'>  INSERT { value: i } IN test
</span><span class='line'>  LET inserted = NEW
</span><span class='line'>  RETURN inserted</span></code></pre></td></tr></table></div></figure>


<p>The syntax for returning documents from data-modification queries only supported
the exact above format. Using a <code>LET</code> clause was required, and the <code>RETURN</code> clause
was limited to returning the variable introduced by the <code>LET</code>.</p>

<p>These syntax restrictions have been lifted in the <code>devel</code> branch, which will become
release 2.6 eventually. The changes make returning values from data-modification
statements easier and also more flexible.</p>

<!-- more -->


<h2>Simpler syntax</h2>

<p>For example, specifying a <code>LET</code> clause is not required anymore (though still fully
supported). Instead, the <code>RETURN</code> clause can directly refer to the <code>NEW</code> pseudo-value,
making the query shorter and easier to write:</p>

<figure class='code'><figcaption><span>AQL insert query returning documents</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR i IN 1..10
</span><span class='line'>  INSERT { value: i } IN test
</span><span class='line'>  RETURN NEW</span></code></pre></td></tr></table></div></figure>


<h2>Projections</h2>

<p>It is now also possible to return a projection instead of returning the entire documents.
This can be used to reduce the amount of data returned by queries.</p>

<p>For example, the following query will return just the keys of the inserted documents:</p>

<figure class='code'><figcaption><span>AQL insert query returning a projection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR i IN 1..10
</span><span class='line'>  INSERT { value: i } IN test
</span><span class='line'>  RETURN NEW._key</span></code></pre></td></tr></table></div></figure>


<h2>Using OLD and NEW in the same query</h2>

<p>In previous versions, <code>UPDATE</code> and <code>REPLACE</code> statements could refer to <strong>either</strong>
the <code>OLD</code> or the <code>NEW</code> pseudo-value, but not to both. 2.6 lifts that restriction, so
now these queries can refer to both. One can utilize that to return both the previous
and the updated revision:</p>

<figure class='code'><figcaption><span>AQL update query returning old and new revisions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN test 
</span><span class='line'>  UPDATE doc WITH { value: 42 } IN test
</span><span class='line'>  RETURN { old: OLD, new: NEW }</span></code></pre></td></tr></table></div></figure>


<h2>Calculations with OLD or NEW</h2>

<p>It is now also possible to run additional calculations with <code>LET</code> statements between
the data-modification part and the final <code>RETURN</code>:</p>

<figure class='code'><figcaption><span>AQL upsert query with some extra calculations</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT { name: 'test' } INSERT { name: 'test' } UPDATE { } IN test
</span><span class='line'>LET previousRevisionExisted = ! IS_NULL(OLD)
</span><span class='line'>LET type = previousRevisionExisted ? 'update' : 'insert'
</span><span class='line'>RETURN { _key: NEW._key, type: type }</span></code></pre></td></tr></table></div></figure>


<h2>Restrictions</h2>

<p>Still the following restrictions remain:</p>

<ul>
<li><p>a data-modification operation can optionally be followed by any number of <code>LET</code> clauses,
and a final <code>RETURN</code> clause. No other operations (e.g. <code>FOR</code>, <code>SORT</code>, <code>COLLECT</code>) can be
used after a data-modification operation</p></li>
<li><p>calculations following a data-modification operation must not access data in collections,
so using functions such as <code>GRAPH_TRAVERSAL</code> etc. is disallowed.</p></li>
</ul>


<p>The improvements are present in the <code>devel</code> branch and can be tested in there from now on.
As usual, feedback is welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preview of the UPSERT Command]]></title>
    <link href="http://jsteemann.github.io/blog/2015/03/27/preview-of-the-upsert-command/"/>
    <updated>2015-03-27T21:37:09+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/03/27/preview-of-the-upsert-command</id>
    <content type="html"><![CDATA[<p>This week saw the completion of the AQL <code>UPSERT</code> command.</p>

<p>This command will be very helpful in a lot of use cases, including the following:</p>

<ul>
<li>ensure that a document exists</li>
<li>update a document if it exists, otherwise create it</li>
<li>replace a document if it exists, otherwise create it</li>
</ul>


<p>The <code>UPSERT</code> command is executed on the server side and so delivers client
applications from issuing a fetch command followed by a separate, conditional <code>UPDATE</code>
or <code>INSERT</code> command.</p>

<!-- more -->


<p>The general format of an <code>UPSERT</code> statement is:</p>

<figure class='code'><figcaption><span>UPSERT format</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT search-document
</span><span class='line'>INSERT insert-expression
</span><span class='line'>UPDATE update-expression
</span><span class='line'>IN collection-name</span></code></pre></td></tr></table></div></figure>


<p>Following are a few example invocations of <code>UPSERT</code>.</p>

<h2>Ensure a document exists</h2>

<p>A simple use case of <code>UPSERT</code> is to ensure that a specific document exists.
For example, the following query will ensure that that there will be a document
with attribute <code>ip</code> equal to <code>192.168.173.13</code> in collection <code>hosts</code>:</p>

<figure class='code'><figcaption><span>ensuring a document exists</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT { ip: '192.168.173.13' }
</span><span class='line'>INSERT { ip: '192.168.173.13', name: 'flittard' }
</span><span class='line'>UPDATE { }
</span><span class='line'>IN hosts</span></code></pre></td></tr></table></div></figure>


<p>If the document does not yet exist, the <code>INSERT</code> part will be carried out. If the
document is already there, the empty <code>UPDATE</code> part will be run, which will not
modify the document.</p>

<p>After the query has finished, there will be a document with the specified <code>ip</code> value.</p>

<p>There is no need for client applications to check for document existence first,
and then to conditionally insert or update, or to try insert first and catch errors.</p>

<p>Note: this is the same as ActiveRecord&rsquo;s <code>find_or_create</code>.</p>

<h2>Update a document if it exists, otherwise create it</h2>

<p>Another common use case is to check whether a specific document exists, and then update it.
If it does not yet exist, the document shall be created.</p>

<p>Counters are a good example for this, so let&rsquo;s demo this pattern with a counter, too:</p>

<figure class='code'><figcaption><span>UPSERT example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT { ip: '192.168.173.13' }
</span><span class='line'>INSERT { ip: '192.168.173.13', name: 'flittard', counter: 1 }
</span><span class='line'>UPDATE { counter : OLD.counter + 1 } 
</span><span class='line'>IN hosts</span></code></pre></td></tr></table></div></figure>


<p>The above query will again look for a document with the specified <code>ip</code> attribute. If the
document exists, its <code>counter</code> attribute will be increased by one. This is achieved by
referring to the pseudo-value <code>OLD</code>, which in the <code>UPDATE</code> case contains the previous revision
of the document.</p>

<p>If the search document does not yet exist, the <code>INSERT</code>part will be carried out, inserting
the document and setting the initial value of <code>counter</code> to 1.</p>

<p>Assuming the collection was empty before, running the above query once will make the collection
contain this data:</p>

<figure class='code'><figcaption><span>collection contents after running query once</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;counter&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.168.173.13&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;flittard&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running the <code>UPSERT</code> statement again, the collection will contain the updated document:</p>

<figure class='code'><figcaption><span>collection contents after running the UPSERT command again:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;counter&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.168.173.13&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;flittard&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s run the query with adjusted <code>ip</code> and <code>name</code> values:</p>

<figure class='code'><figcaption><span>UPSERT with different ip and name</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT { ip: '192.168.173.73' }
</span><span class='line'>INSERT { ip: '192.168.173.73', name: 'brueck', counter: 1 }
</span><span class='line'>UPDATE { counter : OLD.counter + 1 } 
</span><span class='line'>IN hosts</span></code></pre></td></tr></table></div></figure>


<p>After that, the collection will contain two documents:</p>

<figure class='code'><figcaption><span>collection contents</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;counter&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.168.173.13&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;flittard&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;counter&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;brueck&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.168.173.73&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Replace a document if it exists, otherwise create it</h2>

<p>We&rsquo;ve seen <code>UPSERT</code> with an <code>INSERT</code> and an <code>UPDATE</code> clause so far.</p>

<p><code>UPDATE</code> will partially update the previous revision of the document if present.
Only those attributes specified in the <code>update-expression</code> will be updated, and
all non-specified attributes of the original document revision will remain
unchanged.</p>

<p>If instead a full replacement of the original document is required, the <code>REPLACE</code>
clause should be used instead of <code>UPDATE</code>. <code>REPLACE</code> will overwrite the previous
revision completely with what&rsquo;s in <code>update-expression</code>.</p>

<figure class='code'><figcaption><span>UPSERT replacing a document entirely</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT { ip: '192.168.173.73' }
</span><span class='line'>INSERT { ip: '192.168.173.73', name: 'brueck', counter: 1 }
</span><span class='line'>REPLACE { location: 'dc1' } 
</span><span class='line'>IN hosts</span></code></pre></td></tr></table></div></figure>


<p><em>note</em>: an older version of this blog post contained a wrong example here. Thanks
Andy for pointing this out!</p>

<h2>Returning documents</h2>

<p><code>UPSERT</code> can be combined with a <code>RETURN</code> statement to return either the previous
document revision (in case of <code>UPDATE</code> or <code>REPLACE</code>) or the new version of the
document.</p>

<p>Client applications can use this to check whether the <code>UPSERT</code> statement has
inserted or updated the document. In case no previous revision was present, the
pseudo-value <code>OLD</code> will be <code>null</code>.</p>

<p><code>UPSERT</code> also provides a pseudo-value named <code>NEW</code> containing the insert, updated or
replaced version of the document:</p>

<figure class='code'><figcaption><span>UPSERT with a RETURN value</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT { ip: '192.168.173.187' }
</span><span class='line'>INSERT { ip: '192.168.173.187', name: 'kalk', counter: 1 }
</span><span class='line'>UPDATE { counter : OLD.counter + 1 } 
</span><span class='line'>IN hosts
</span><span class='line'>RETURN { old: OLD, new: NEW }</span></code></pre></td></tr></table></div></figure>


<p>In the <code>INSERT</code> case, we&rsquo;ll get:</p>

<figure class='code'><figcaption><span>query return value for INSERT case</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;old&quot;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;new&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;counter&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;kalk&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.168.173.187&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running the query again, we&rsquo;ll get into the <code>UPDATE</code> case, and the same query
will now return:</p>

<figure class='code'><figcaption><span>query return value for the UPDATE case</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;old&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;counter&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;kalk&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.168.173.187&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;new&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;counter&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;kalk&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;192.168.173.187&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Complex updates</h2>

<p>Updating and returning <code>OLD</code> and <code>NEW</code> will work with arbitrary calculations.
For example, the following query adds a value <code>development</code> to the <code>tag</code> attribute
only if not yet present in the search document:</p>

<figure class='code'><figcaption><span>adding a value to an array if not yet present</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT { ip: '192.168.173.94' }                                                                              
</span><span class='line'>INSERT { ip: '192.168.173.94', name: 'chorweiler', tags: [ "development" ] }                                                    
</span><span class='line'>UPDATE { tags: PUSH(OLD.tags, "development", true) }                                                                          
</span><span class='line'>IN hosts                                                                                                      
</span><span class='line'>RETURN { old: OLD, new: NEW }</span></code></pre></td></tr></table></div></figure>


<p>Running the query multiple times will ensure that <code>tags</code> will contain the value
<code>development</code> only once.</p>

<p>Note: <code>PUSH</code> is a regular <a href="https://docs.arangodb.com/Aql/ArrayFunctions.html">AQL array function</a>.</p>

<h2>Restrictions</h2>

<p>The <code>search-value</code> needs to be an object literal, with attribute names being inspectable
at query compile time. This means that neither variables nor bind parameters can be used
for <code>search-value</code>.</p>

<p>However, bind parameters and variables can be used <strong>inside</strong> <code>search-value</code>.
Dynamic attribute names cannot be used for specifying attribute names in search-value`.</p>

<p><code>UPSERT</code> does not require an index to be present on the attributes of <code>search-value</code>,
but in reality queries will benefit from indexes to find matching documents.</p>

<p>When more than one document in the collection matches <code>search-value</code>, one arbitrary match
will be used for executing the <code>UPDATE</code> clause. It is therefore recommended to use
<code>UPSERT</code> commands together with a unique index or to make sure from the client application
that at most one document will match the <code>search-value</code>. Ironically, one way to achieve this is
to use the <code>UPSERT</code> command for inserts&hellip;</p>

<h2>Availability</h2>

<p><code>UPSERT</code> is currently available in the <code>devel</code> branch of ArangoDB. This branch
will eventually become release 2.6. Until then, everyone is welcome to try it out and
provide feedback.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyzing Git Commits With ArangoDB]]></title>
    <link href="http://jsteemann.github.io/blog/2015/03/11/analyzing-git-commits-with-arangodb/"/>
    <updated>2015-03-11T12:37:58+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/03/11/analyzing-git-commits-with-arangodb</id>
    <content type="html"><![CDATA[<p>I often find myself searching for certain commits using <code>git log</code> and friends. While I really love
the power and flexibility that come with the git and other Unix command-line tools, sometimes it can be more
convenient to use a database to filter and aggregate commit data.</p>

<p>I gave it a quick try yesterday and imported the commit history of ArangoDB&rsquo;s Git repository into ArangoDB
and ran some queries on the data. While the query results for our repository may not be interesting for everyone,
I think it is still worth sharing what I did. Even though I didn&rsquo;t try it, I think the overall procedure is
applicable with any other Git repository.</p>

<!-- more -->


<h2>Converting the Git history to JSON</h2>

<p>The way to extract history and commit data from a local repository is to use <code>git log</code>. Though its output
is greatly customizable, it does not provide an out-of-the-box solution for producing JSON. So I wrote a simple
wrapper script (in PHP) around it. The script can be found <a href="https://gist.github.com/jsteemann/65ef221646449713b2c5">here</a>.</p>

<p>Here&rsquo;s how to run it:</p>

<figure class='code'><figcaption><span>converting the git history to JSON</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>path/to/local/git-repository
</span><span class='line'>wget https://gist.githubusercontent.com/jsteemann/65ef221646449713b2c5/raw/fef22c729e01dd0777b378ac1e17e951ea47c7dd/git-log-to-json.php
</span><span class='line'>php git-log-to-json.php &gt; arango-commits-master-201503.json
</span></code></pre></td></tr></table></div></figure>


<p>The script may run a few minutes on bigger repositories such as ours. In the end, it should produce a JSON
file named <code>arango-commits-master-201503.json</code>.</p>

<p>I have also uploaded the JSON file <a href="http://jsteemann.github.io/downloads/code/arango-commits-master-201503.json">here</a>. Note that the
file only contains commits from the <code>master</code> branch and not all commits done in ArangoDB in total.</p>

<h2>Importing the commits into ArangoDB</h2>

<p>The simplest way to get the commits into ArangoDB is to use <code>arangoimp</code>:</p>

<figure class='code'><figcaption><span>importing the commits into ArangoDB</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>arangoimp                                   <span class="se">\</span>
</span><span class='line'>  --collection commits                      <span class="se">\</span>
</span><span class='line'>  --create-collection <span class="nb">true</span>                  <span class="se">\</span>
</span><span class='line'>  --file arango-commits-master-201503.json  <span class="se">\</span>
</span><span class='line'>  --overwrite <span class="nb">true</span>                          <span class="se">\</span>
</span><span class='line'>  --batch-size 32000000
</span></code></pre></td></tr></table></div></figure>


<p>This should have imported all the commits into a collection <code>commits</code> in the default database.</p>

<h2>Querying the commit logs</h2>

<p>Following are a few example queries that I ran on the data from the ArangoShell.
As mentioned before, it should be possible to run the queries for other repositories&#8217; data.</p>

<figure class='code'><figcaption><span>getting all contributors</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;FOR commit IN commits COLLECT author = commit.author.name RETURN author&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving the total number of commits</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;FOR commit IN commits COLLECT WITH COUNT INTO count RETURN count&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving the number of commits by contributor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;FOR commit IN commits COLLECT author = commit.author.name WITH COUNT INTO count RETURN { author: author, count: count }&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving the tagged commits </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;FOR commit IN commits FILTER commit.tag != null SORT commit.date RETURN KEEP(commit, [ &quot;date&quot;, &quot;message&quot;, &quot;tag&quot; ])&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving number of commits per year </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;FOR commit IN commits COLLECT year = DATE_YEAR(commit.date) WITH COUNT INTO count RETURN { year: year, count: count }&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving number of commits per month / year </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;FOR commit IN commits COLLECT year = DATE_YEAR(commit.date), month = DATE_MONTH(commit.date)  WITH COUNT INTO count RETURN { month: CONCAT(year, &quot;/&quot;, month), count: count }&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving number of commits per weekday</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;FOR commit IN commits COLLECT day = DATE_DAYOFWEEK(commit.date) WITH COUNT INTO count RETURN { day: TRANSLATE(day, { &quot;0&quot;: &quot;Sunday&quot;, &quot;1&quot;: &quot;Monday&quot;, &quot;2&quot;: &quot;Tuesday&quot;, &quot;3&quot;: &quot;Wednesday&quot;, &quot;4&quot;: &quot;Thursday&quot;, &quot;5&quot;: &quot;Friday&quot;, &quot;6&quot;: &quot;Saturday&quot; }), count: count }&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving commits with string &#8220;issue #&#8221; in commit message </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;FOR commit IN commits FILTER LIKE(commit.message, &quot;%issue #%&quot;) SORT commit.date DESC LIMIT 10 RETURN UNSET(commit, &quot;files&quot;)&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving number of commits related to Foxx</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;FOR commit IN commits FILTER LIKE(LOWER(commit.message), &quot;%foxx%&quot;) COLLECT year = DATE_YEAR(commit.date), month = DATE_MONTH(commit.date) WITH COUNT INTO count RETURN { month: CONCAT(year, &quot;/&quot;, month), count: count }&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving commits that touched the most files</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;FOR commit IN commits LET count = LENGTH(commit.files || []) SORT count DESC LIMIT 10 RETURN MERGE(UNSET(commit, &quot;files&quot;), { files: count })&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving files modified most often</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s1">&#39;FOR commit IN commits FOR filename IN commit.files || [] COLLECT file = filename WITH COUNT INTO count SORT count DESC LIMIT 10 RETURN { file: file, count: count }&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More ES6 Features]]></title>
    <link href="http://jsteemann.github.io/blog/2015/02/26/more-es6-features/"/>
    <updated>2015-02-26T12:00:46+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/02/26/more-es6-features</id>
    <content type="html"><![CDATA[<p>ArangoDB 2.5 comes with an upgraded version of V8, Google&rsquo;s open source JavaScript engine.</p>

<p>The built-in version of V8 has been upgraded from 3.29.54 to 3.31.74.1.</p>

<p>In addition to several already usable ES6 features (detailed in
<a href="https://jsteemann.github.io/blog/2014/12/19/using-es6-features-in-arangodb/">this blog</a>,
the following ES6 features are activated in ArangoDB 2.5 by default:</p>

<ul>
<li>iterators and generators</li>
<li>template strings</li>
<li>enhanced object literals</li>
<li>enhanced numeric literals</li>
<li>block scoping with <code>let</code> and constant variables using <code>const</code></li>
<li>additional String methods (such as <code>startsWith</code>, <code>repeat</code> etc.)</li>
</ul>


<p>The above features are available in ArangoDB 2.5, and can now be used for scripting purposes
in the ArangoShell and in server-side Foxx actions inside the database.</p>

<p>This blog post briefly explains the features provides some quick examples for using them.</p>

<!-- more -->


<h2>Iterators and generators</h2>

<p>Iterator and generator support was optional in 2.4, but is turned on by default since 2.5.</p>

<p>For everyone who is not familiar with generators in JavaScript, here&rsquo;s how they work:</p>

<p>Generators are special functions tagged with an asterisk (<code>*</code>). Values are returned to the
caller using the <code>yield</code> keyword:</p>

<figure class='code'><figcaption><span>a simple generator that generates two values                                                            </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="o">*</span> <span class="nx">generate</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">yield</span> <span class="mi">23</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">yield</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Calling the function with initialize/reset the generator. Calling the <code>next()</code> method on
the generator&rsquo;s initial call return value produces the next sequence element. The element
is returned in a <code>value</code> attribute. The <code>done</code> attribute indicates whether the sequence
has come to an end:</p>

<figure class='code'><figcaption><span>invoking the generator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">generator</span> <span class="o">=</span> <span class="nx">generate</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">generator</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span>  <span class="cm">/* { &quot;value&quot; : 23, &quot;done&quot; : false } */</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">generator</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span>  <span class="cm">/* { &quot;value&quot; : 42, &quot;done&quot; : false } */</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">generator</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span>  <span class="cm">/* { &quot;value&quot; : undefined, &quot;done&quot; : true } */</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Sequences produced by generators can also be consumed via a <code>for...of</code> loop:</p>

<figure class='code'><figcaption><span>consuming all values from a generator function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">generator</span> <span class="o">=</span> <span class="nx">generate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">value</span> <span class="nx">of</span> <span class="nx">generator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In general, every object that is iteratable can be consumed using the <code>of</code> operator.
Some built-in objects provide pre-defined iterators (e.g. <code>Map.keys()</code> or <code>Map.values()</code>),
but you can also create iterators for your own objects:</p>

<figure class='code'><figcaption><span>creating an iterator for an object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Sentence</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Sentence</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">regex</span> <span class="o">=</span> <span class="sr">/\S+/g</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">text</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">match</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nx">match</span> <span class="o">=</span> <span class="nx">regex</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">text</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">match</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">sentence</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sentence</span><span class="p">(</span><span class="s2">&quot;The quick brown fox jumped over the lazy dog&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">word</span> <span class="nx">of</span> <span class="nx">sentence</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Template strings</h2>

<p>I know there are query string generators and such, but for the sake of the example, let&rsquo;s assume you
wanted to write a query string in JavaScript. You might end up with something like this:</p>

<figure class='code'><figcaption><span>multi-line query string</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span>
</span><span class='line'>  <span class="s1">&#39;FOR doc IN users\n&#39;</span> <span class="o">+</span>
</span><span class='line'>  <span class="s1">&#39;  FILTER doc.name == @name\n&#39;</span> <span class="o">+</span>
</span><span class='line'>  <span class="s1">&#39;  RETURN doc\n&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is hardly legible, and it is also very prone to errors.</p>

<p>ES6 template strings provide a way to define multi-line string literals in a much easier and simpler way.
Here&rsquo;s how to do it (note the backticks instead of the regular string quotes):</p>

<figure class='code'><figcaption><span>using a multi-line template string</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="err">`</span>
</span><span class='line'><span class="nx">FOR</span> <span class="nx">doc</span> <span class="nx">IN</span> <span class="nx">users</span>
</span><span class='line'>  <span class="nx">FILTER</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span> <span class="o">==</span> <span class="err">@</span><span class="nx">name</span>
</span><span class='line'>  <span class="nx">RETURN</span> <span class="nx">doc</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Template strings also support value substitution, so you could even write something like this, too:</p>

<figure class='code'><figcaption><span>value substitution in template strings</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;AQL injection attempt \&quot; OR true OR \&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="err">`</span>
</span><span class='line'><span class="nx">FOR</span> <span class="nx">doc</span> <span class="nx">IN</span> <span class="nx">users</span>
</span><span class='line'>  <span class="nx">FILTER</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">name</span> <span class="o">==</span> <span class="nx">$</span><span class="p">{</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">name</span><span class="p">)}</span>
</span><span class='line'>  <span class="nx">RETURN</span> <span class="nx">doc</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Note that while value substitution in template strings in convenient, you still have to be careful with
user-generated values. Otherwise you might be subject to value injection attacks, as you would be with
every other form of improper user value handling.</p>

<h2>Enhanced object literals</h2>

<p>Save some time when definining objects:</p>

<figure class='code'><figcaption><span>using enhanced object literals</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">&quot;foobar&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">type</span> <span class="o">:</span> <span class="s2">&quot;myType&quot;</span><span class="p">,</span>   <span class="cm">/* always worked */</span>
</span><span class='line'>  <span class="nx">name</span><span class="p">,</span>              <span class="cm">/* same as &quot;name&quot; : name */</span>
</span><span class='line'>  <span class="nx">save</span> <span class="p">()</span> <span class="p">{</span>          <span class="cm">/* same as &quot;save&quot; : function () ... */</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;save called!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;myType&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;foobar&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;save&quot;</span> <span class="o">:</span> <span class="p">[</span><span class="nb">Function</span> <span class="s2">&quot;console.log(&quot;</span><span class="nx">save</span> <span class="nx">called</span><span class="o">!</span><span class="s2">&quot;);&quot;</span> <span class="p">...]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As can be seen above, enhanced object literal declarations can save some typing and reduce redundancies
in the code. Unfortunately we still cannot use object key names generated from expressions:</p>

<figure class='code'><figcaption><span>does not work yet</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span> <span class="s2">&quot;foo&quot;</span> <span class="o">+</span> <span class="nx">bar</span><span class="s2">&quot; ] : &quot;</span><span class="nx">foobar</span><span class="err">&quot;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Enhanced numeric literals</h2>

<p>Numeric values can now be specified in binary or octal if required:</p>

<figure class='code'><figcaption><span>numeric literals                                                                                        </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">life</span> <span class="o">=</span> <span class="mi">0</span><span class="nx">b101010</span><span class="p">;</span>          <span class="cm">/* binary, 42 in decimal */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">filePermissions</span> <span class="o">=</span> <span class="mi">0</span><span class="nx">o777</span><span class="p">;</span>  <span class="cm">/* octal, 511 in decimal */</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Block scoping</h2>

<p>As a mostly C++ programmer, I am always puzzled about the scoping of JavaScript variables.
In the following example, variable <code>x</code> does not only live inside the curly brackets block in which
it was declared, but also afterwards:</p>

<figure class='code'><figcaption><span>numeric literals                                                                                        </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">work</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason is that the curly brackets around <code>var x = 1;</code> are not a scope at all in traditional
JavaScript. This sucks, because variables can linger around in programs longer than necessary,
leading to unwanted side-effects.</p>

<p>With block-level scopes, this can be fixed. To use it, introduce variables not with the <code>var</code>
keyword, but with <code>let</code>. <code>let</code> only works in strict mode, so make sure your function or module
uses it.</p>

<p>Now, with block-level scoping, the above snippet looks like this:</p>

<figure class='code'><figcaption><span>numeric literals                                                                                        </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">work</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it will actually produce an error when trying to access variable <code>x</code> in the <code>return</code> statement.
The reason is that the life of <code>x</code> was over as soon as its scope was left. The scope of variable <code>x</code> is
now only the one with the <code>let</code> declaration inside the curly brackets.</p>

<p>Someone else said &ldquo;<em>let is the new var</em>&rdquo;, and I think there&rsquo;s not much to add.</p>

<p>Additionally, the <code>const</code> keyword can be used to define a read-only variables. Trying to re-define a
constant will produce an error in strict mode (the desired behavior), and do nothing in non-strict mode.
Another reason to use the strict mode.</p>

<h2>Additional String methods</h2>

<p><code>String</code> objects now provide extra built-in methods:</p>

<ul>
<li><code>string.startsWith(what)</code></li>
<li><code>string.endsWith(what)</code></li>
<li><code>string.includes(what)</code></li>
<li><code>string.repeat(count)</code></li>
<li><code>string.normalize(method)</code></li>
<li><code>string.codePointAt(position)</code></li>
</ul>


<p>There is also an extra &ldquo;static&rdquo; method:</p>

<ul>
<li><code>String.fromCodePoint(codePoint)</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AQL Improvements in 2.5]]></title>
    <link href="http://jsteemann.github.io/blog/2015/02/26/aql-improvements-in-25/"/>
    <updated>2015-02-26T10:35:31+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/02/26/aql-improvements-in-25</id>
    <content type="html"><![CDATA[<p>Contained in 2.5 are some small but useful AQL language improvements plus several AQL optimizer improvements.</p>

<p>We are working on further AQL improvements for 2.5, but work is still ongoing.
This post summarizes the improvements that are already completed and will be shipped with the initial ArangoDB
2.5 release.</p>

<!-- more -->


<h1>Language improvements</h1>

<h2>Dynamic attribute names</h2>

<p>Often the need arises to dynamically name object attributes in return values.
In AQL this was not directly possible so far, though there were some workarounds available to achieve about
the same result. <a href="https://docs.arangodb.com/cookbook/UsingDynamicAttributeNames.html">This recipe</a> summarizes
the options that are available to pre-ArangoDB 2.5 users.</p>

<p>With ArangoDB 2.5, dynamic attribute names can be constructed much more easily and flexibly. Object
attribute names in ArangoDB 2.5 can be specified using static string literals, bind parameters,
and dynamic expressions.</p>

<p>Dynamic expressions are most interesting, and to disambiguate them from other regular string literal attribute
names, dynamic attribute names need to be enclosed in square brackets (<code>[</code> and <code>]</code>). I have written about
that before in <a href="http://jsteemann.github.io/blog/2015/02/03/using-dynamic-attribute-names-in-aql/">this blog</a>.</p>

<p>Here is an example query that uses the new syntax:</p>

<figure class='code'><figcaption><span>example query using dynamic attribute names</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR i IN [ 17, 23, 42, 83 ]
</span><span class='line'>  RETURN { [ CONCAT('value-of-', i, ' * ', i) ] : i * i }</span></code></pre></td></tr></table></div></figure>


<p>This will produce:</p>

<figure class='code'><figcaption><span>query result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;value-of-17 * 17&quot;</span> <span class="p">:</span> <span class="mi">289</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;value-of-23 * 23&quot;</span> <span class="p">:</span> <span class="mi">529</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;value-of-42 * 42&quot;</span> <span class="p">:</span> <span class="mi">1764</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;value-of-83 * 83&quot;</span> <span class="p">:</span> <span class="mi">6889</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Functions added</h2>

<p>The following AQL functions have been added in 2.5:</p>

<ul>
<li><code>MD5(value)</code>: produces the MD5 hash of <code>value</code></li>
<li><code>SHA1(value)</code>: produces the SHA1 hash of <code>value</code></li>
<li><code>RANDOM_TOKEN(length)</code>: produces a pseudo-random string of the specified length.
 Such strings can be used for id or token generation. Tokens consist only of letters
 (lower and upper case) plus digits, so they are also URL-safe</li>
</ul>


<h1>Optimizer improvements</h1>

<h2>Optimizer rules</h2>

<p>The following AQL optimizer rules have been added in ArangoDB 2.5:</p>

<ul>
<li><p><code>propagate-constant-attributes</code></p>

<p>This rule will look inside <code>FILTER</code> conditions for constant value equality comparisons,
and insert the constant values in other places in <code>FILTER</code>s. For example, the rule will
insert <code>42</code> instead of <code>i.value</code> in the second <code>FILTER</code> of the following query:</p>

<pre><code>FOR i IN c1 
  FOR j IN c2 
    FILTER i.value == 42 
    FILTER j.value == i.value 
    RETURN 1
</code></pre></li>
<li><p><code>move-calculations-down</code></p>

<p>This rule moves calculations down in the execution plan as far as possible. The intention
is to move calculations beyond filters, in order to avoid calculations and computations
for documents that will be filtered away anyway.</p>

<p>If a query contains a lot of computations and a lot of documents will be skipped because
of filters, this rule might provide a big benefit.</p>

<p>A more detailed example is provided in
<a href="http://jsteemann.github.io/blog/2015/01/31/yaor-yet-another-optimizer-rule/">this post</a>.</p></li>
</ul>


<p>The already existing optimizer rule <code>use-index-for-sort</code> was also improved in the following way:</p>

<ul>
<li><p>the rule can now remove <code>SORT</code>s also in case a non-sorted index (i.e. a hash index) is used
for an equality lookup and all sort attributes are covered by the index.</p></li>
<li><p>the rule can also remove <code>SORT</code>s in case the sort critieria excludes the left-most index attributes,
but the left-most index attributes are used in a <code>FILTER</code> for equality-only lookups.</p>

<p>Here is an example that will use an existing skiplist index on [ <code>value1</code>, <code>value2</code> ] for sorting,
removing the extra <code>SORT</code>:</p>

<pre><code>FOR doc IN collection 
  FILTER doc.value1 == 1 
  SORT doc.value2 
  RETURN doc
</code></pre></li>
</ul>


<h2>Index usage</h2>

<p>The AQL optimizer now supports <a href="https://www.arangodb.com/2015/02/24/sparse-indexes-in-arangodb">sparse indexes</a>,
a feature added in 2.5.</p>

<p>It will use them automatically in queries when appropriate and when safe. Sparse indexes do exclude certain
documents purposely, so the optimizer always has to figure out whether it can use a sparse index to satisfy
a given <code>FILTER</code> condition.</p>

<p>The optimizer will also take into account index selectivity estimates when there are multiple index candidates.</p>

<h2>Estimates</h2>

<p>The optimizer estimates for the number of documents to be returned by a query or a subquery are more accurate
now for several types of queries. For example, if the optimizer can use a primary key, an edge index, or a hash
index in a given query part, it will use the index selectivity estimates for calculating the number of return
documents.</p>

<p>These estimates will be a lot more accurate than the previoulsy hard-coded filtering factors, and can lead to
better optimizer decisions and reporting (because estimates are returned in <code>explain</code> results, too).</p>

<h2>Memory savings</h2>

<p>Finally, the optimizer will now detect if the data-modification part in a data-modification query
can be executed in lockstep with the data-retrieval part of the same query. Previously, a data-modification
query always executed its data-retrieval part first, and then executed its data-modification part.
This could have resulted in big intermediate result sets which to retrieval part constructed in order
to pass them to the modification part of the query.</p>

<p>Here&rsquo;s an example query:</p>

<figure class='code'><figcaption><span>data-modification query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN test
</span><span class='line'>  INSERT doc INTO backup</span></code></pre></td></tr></table></div></figure>


<p>In the above query, the <code>FOR</code> loop is the retrieval part, and the <code>INSERT</code> is the modification part.
The optimizer in 2.5 will check if the two parts of the query are independent, and if it turns out they are,
will execute them in lockstep instead of sequentially.</p>

<p>The execution in lockstep is not necessarily faster than sequential execution, but it can save lots of
memory if the data-retrieval part constructed big intermediate result sets.</p>

<h1>Miscellaneous changes</h1>

<p>The AQL query execution statistics now also provide an attribute <code>filtered</code>. Its value indicates how many
documents were filtered by <code>FilterNode</code>s in the AQL query. This can be used as an indicator for whether
indexes should be added, and for how effective indexes are used for filtering.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ccache When Working With Different Branches]]></title>
    <link href="http://jsteemann.github.io/blog/2015/02/07/using-ccache-when-working-with-different-branches/"/>
    <updated>2015-02-07T17:00:15+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/02/07/using-ccache-when-working-with-different-branches</id>
    <content type="html"><![CDATA[<p>Git makes working with many different branches in the same local repository easy and efficient.</p>

<p>In a C/C++ project, the code must be re-compiled after switching into another branch.
If the branches only differ minimally, running <code>make</code> will only re-compile the parts that are
actually different, and after that re-link them. That won&rsquo;t take too long, though especially
link times can be annoying.</p>

<p>However, if there are differences in central header files that are included from every file,
then <code>make</code> has no option but to <strong>re-compile everything</strong>. This can take significant amounts of
time (and coffee).</p>

<p>I just realized that there is a solution to speed up re-compilation in this situation:
<a href="http://linux.die.net/man/1/ccache">ccache</a>!</p>

<!-- more -->


<h2>Why ccache can help</h2>

<p>ccache is a wrapper for the actual compiler command. It will call the compiler with the specified
arguments, and capture the compiler output. When called again with the same arguments, it will
look in its internal cache for a ready-to-serve result. If one is present, it will return it
without invoking the compiler again. Otherwise, or if it detects some changes that forbid serving
outdated results from the cache, it will transparently invoke the compiler.</p>

<p>When switching back to another branch that you had already compiled before, running <code>make</code>
may re-build <em>everything</em> due to changes in headers. But it is not unlikely that you had built
the branch before already. If so, and ccache was involved in the previous build, it may still
have all the info required for re-compilation in its cache.</p>

<p>And everyone will be happy: <code>make</code> will run its full rebuild, but most operations won&rsquo;t be handed
to the compiler because ccache is sitting in between, serving results from its cache.
And you as a developer won&rsquo;t lose that much time.</p>

<h2>Some figures</h2>

<p>Following are some figures demonstrating its potential when running a <code>make</code> in the devel branch
after having returned from a different branch with significant changes.</p>

<h3>With ccache, but cache empty</h3>

<figure class='code'><figcaption><span>time make</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>real  12m43.501s
</span><span class='line'>user  11m52.550s
</span><span class='line'>sys 0m44.110s</span></code></pre></td></tr></table></div></figure>


<h3>With ccache, everything in cache</h3>

<figure class='code'><figcaption><span>time make</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>real  0m55.572s
</span><span class='line'>user  0m26.346s
</span><span class='line'>sys 0m7.551s</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s a <strong>build time reduction of more than 90 %</strong>!</p>

<p>This is already the optimal result, as everything was already present in the cache.
However, the situation was not unrealistic. I often switch into another branch, try something
out or commit a small change, and the return to the original branch. I already started having
many separate directories for the different branches to avoid frequent recompilation.
ccache can be relief here.</p>

<p>By the way, timing results are from my laptop. I did not bother to run <code>make</code> with parallel
jobs as this has limited effect on my laptop, though on more decent hardware it may be beneficial
both with and without ccache, though I guess, with many parallel jobs and a full cache, linking
will become the most expensive part.</p>

<h2>How to use ccache</h2>

<p>For Ubuntu, ccache is available in package <code>ccache</code>. You can easily install it with:</p>

<figure class='code'><figcaption><span>Installing ccache on Ubuntu</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install ccache
</span></code></pre></td></tr></table></div></figure>


<p>The most convenient way to use ccache in your build is to change your <code>CC</code> and <code>CXX</code>
environment variables as follows:</p>

<figure class='code'><figcaption><span>setting compilers environment variables</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">CC</span><span class="o">=</span><span class="s2">&quot;ccache gcc&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CXX</span><span class="o">=</span><span class="s2">&quot;ccache g++&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I suggest putting that into <code>.bashrc</code> so the variables will be set in every session and not
just once. After that, running <code>configure</code> will write a <code>Makefile</code> that will use ccache for
building object files.</p>

<p>Note: that will change these environment variables globally, so ccache may be used for other
projects, too.</p>

<h3>What ccache cannot do</h3>

<p>I already forgot about ccache because when working in a single branch it does not provide that
many benefits. When making changes to your code, you can be pretty sure the new code won&rsquo;t be
in the cache yet. Running <code>make</code> then will invoke ccache, but this will result in a cache miss.
It cannot help here, because the new code was never compiled before and thus in no cache.</p>

<p>Additionally, <code>make</code> is smart enough on its own to only re-build the parts of the program that
have actually changed or depend on the changes you made.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using ArangoDB as a Logstash Output]]></title>
    <link href="http://jsteemann.github.io/blog/2015/02/05/using-arangodb-as-a-logstash-output/"/>
    <updated>2015-02-05T23:39:23+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/02/05/using-arangodb-as-a-logstash-output</id>
    <content type="html"><![CDATA[<p>Inspired by a question on <a href="http://stackoverflow.com/questions/28314711/logstash-output-for-arangodb">StackOverflow</a>,
I did some investigation about how to make <a href="http://www.elasticsearch.org/overview/logstash/">Logstash</a>
send log events to ArangoDB.</p>

<p>There is no dedicated Logstash output plugin for ArangoDB on the
<a href="https://github.com/logstash-plugins">Logstash plugins page</a>, so I had already accepted to write
one on my own.</p>

<p>Browsing the plugins page for inspiration, I found an
<a href="https://github.com/logstash-plugins/logstash-output-http">HTTP output plugin for Logstash</a>.
It seems to be general enough that it can send the log event in JSON format to any HTTP-speaking backend.</p>

<p>ArangoDB&rsquo;s API is JSON over HTTP, so it sounded like a perfect match. I briefly tried it out and
it seemed to work fine.</p>

<!-- more -->


<p>Here are the steps I carried out to connect the two:</p>

<h2>Prepare an ArangoDB server</h2>

<p>I started an ArangoDB server with default configuration (binding to IP address 127.0.0.1 and port
8529). I then used the ArangoShell to create a collection named <code>logstash</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;logstash&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This collection will be used for storing the log events sent by Logstash.</p>

<h2>Download Logstash</h2>

<p>In order to run Logstash, you must have Java installed, which I assume you already have.</p>

<p>Now it&rsquo;s time to download Logstash. You can download and unpack it with the command following.
The current version is 1.5.0 beta1 (<strong>warning: 100 MB download!</strong>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget <span class="s2">&quot;http://download.elasticsearch.org/logstash/logstash/logstash-1.5.0.beta1.tar.gz&quot;</span>
</span><span class='line'>tar xvfz logstash-1.5.0.beta1.tar.gz
</span><span class='line'><span class="nb">cd </span>Downloads/logstash-1.5.0.beta1
</span></code></pre></td></tr></table></div></figure>


<h2>Connecting Logstash with ArangoDB</h2>

<p>We are now ready to start Logstash. I&rsquo;ll start it in a mode that will send all input from
stdin as log events to ArangoDB. I am using the <code>stdin</code> input plugin, and the <code>http</code> output
plugin for this. The <code>http</code> output plugin needs to know the URL to send the log events to.</p>

<p>The URL is ArangoDB&rsquo;s base URL plus the REST API method for storing a single document, with
the name of the target collection (<code>logstash</code>) appended.</p>

<p>Here is the full command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bin/logstash -e <span class="s1">&#39;input { stdin } } output { http { http_method =&gt; &quot;post&quot; url =&gt; &quot;http://127.0.0.1:8529/_api/document?collection=logstash&quot; format =&gt; &quot;json&quot; } }&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Logstash may need a few seconds to start. The HTTP plugin will print a message about itself
being a milestone 1 release only, but it works. Anything entered in the terminal should now be
sent as a log event to ArangoDB.</p>

<p>For example, type <code>fingers crossed!</code> and hit enter:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Using milestone 1 output plugin <span class="s1">&#39;http&#39;</span>. This plugin should work, but would benefit from use by folks like you. Please <span class="nb">let </span>us know <span class="k">if </span>you find bugs or have suggestions on how to improve this plugin.  For more information on plugin milestones, see http://logstash.net/docs/1.5.0.beta1/plugin-milestones <span class="o">{</span>:level<span class="o">=</span>&gt;:warn<span class="o">}</span>
</span><span class='line'>fingers crossed!
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s check if the log event made it into ArangoDB. I have used the ArangoShell for this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">logstash</span><span class="p">.</span><span class="nx">toArray</span><span class="p">()</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="s2">&quot;logstash/3507690866496&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;_key&quot;</span> <span class="o">:</span> <span class="s2">&quot;3507690866496&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;_rev&quot;</span> <span class="o">:</span> <span class="s2">&quot;3507690866496&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;@version&quot;</span> <span class="o">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;host&quot;</span> <span class="o">:</span> <span class="s2">&quot;kalk&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;message&quot;</span> <span class="o">:</span> <span class="s2">&quot;fingers crossed!&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;@timestamp&quot;</span> <span class="o">:</span> <span class="s2">&quot;2015-02-05T23:17:39.982Z&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Querying log events</h3>

<p>So we&rsquo;re getting log events in from Logstash.</p>

<p>We can use AQL to query the received log events in ArangoDB. But before we run a query,
we probably want to index the <code>@timestamp</code> attribute of the events, so we can efficiently
find and filter them by date and time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">logstash</span><span class="p">.</span><span class="nx">ensureSkiplist</span><span class="p">(</span><span class="s2">&quot;@timestamp&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can run the following AQL query to find the latest 5 log events:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR l IN logstash 
</span><span class='line'>  FILTER l.`@timestamp` &lt;= '2099' /* arbitrary max value */ 
</span><span class='line'>  SORT l.`@timestamp` DESC 
</span><span class='line'>  LIMIT 5 
</span><span class='line'>  RETURN l</span></code></pre></td></tr></table></div></figure>


<p>Note: the <code>@timestamp</code> attribute name needs to be enclosed in backticks because a <code>@</code> prefix
is used to designate bind parameters in AQL. Enclosing the names in backticks will make AQL treat
them as attribute name literals.</p>

<p>For the simple types of events triggered by the <code>stdin</code> input plugin, this is already sufficient.
However, log events may look different, depending on the type of input plugins that are used. For
other inputs, other attributes may need to be indexed, too.</p>

<h3>Adjusting IP, port and authentication</h3>

<p>Above I have used the default configuration of ArangoDB, that is IP 127.0.0.1, port 8529, and no
authentication. You probably want to change this.</p>

<p>To make ArangoDB listen on any other IP address or port, change the <code>endpoint</code> setting in its
configuration file <code>/etc/arangod.conf</code>. You may also want to set the <code>disable-authentication</code>
flag to <code>false</code>, meaning authentication is turned on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[server]
</span><span class='line'>endpoint = tcp://192.168.173.13:9999
</span><span class='line'>disable-authentication = false</span></code></pre></td></tr></table></div></figure>


<p>Before activating the new configuration, let&rsquo;s create a dedicated ArangoDB user <code>logstash</code>.
I will also change the default password of the <code>root</code> user. The following ArangoShell commands
do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/users&quot;</span><span class="p">).</span><span class="nx">save</span><span class="p">(</span><span class="s2">&quot;logstash&quot;</span><span class="p">,</span> <span class="s2">&quot;secret-logging&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/users&quot;</span><span class="p">).</span><span class="nx">save</span><span class="p">(</span><span class="s2">&quot;root&quot;</span><span class="p">,</span> <span class="s2">&quot;nobody-will-ever-guess&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make logstash use the above settings, we have to adjust the command-line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bin/logstash -e <span class="s1">&#39;input { stdin } } output { http { http_method =&gt; &quot;post&quot; url =&gt; &quot;http://logstash:secret-logging@192.168.173.13:9999/_api/document?collection=logstash&quot; format =&gt; &quot;json&quot; } }&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Pitfalls</h3>

<p>Though Logstash itself can write a logfile (<code>--log</code> option) and can provide debug information
(<code>--debug</code>), I did not get it log or print errors when misconfiguring the HTTP output plugin.
For example, specifying a wrong target URL will make all HTTP requests from Logstash to ArangoDB
silently fail, with the log events being lost if not stored elsewhere.</p>

<p>Maybe this is configurable somewhere, but then I didn&rsquo;t find it. It is also possible that this
will be fixed in some future release.</p>

<h3>Disclaimer</h3>

<p>Please feel free to use this blog as a starting point but not as an endorsement.</p>

<p>Though I think it will work perfectly, I am not at all an expert for Logstash or its plugins.
I didn&rsquo;t spend much time with it yet, and I may have overlooked important things. So should you
be interested in using it, please conduct your own tests first.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Dynamic Attribute Names in AQL]]></title>
    <link href="http://jsteemann.github.io/blog/2015/02/03/using-dynamic-attribute-names-in-aql/"/>
    <updated>2015-02-03T00:12:39+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/02/03/using-dynamic-attribute-names-in-aql</id>
    <content type="html"><![CDATA[<p>On our mailing list, there is quite often the question whether attribute names in objects
returned from AQL queries can be made dynamic.</p>

<p>Here&rsquo;s a (non-working) example query for this:</p>

<figure class='code'><figcaption><span>example query that does not work</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection
</span><span class='line'>  RETURN { doc.type : doc.value }</span></code></pre></td></tr></table></div></figure>


<p>The intention in the above query obviously is to use the dynamic value from <code>doc.type</code> as
an attribute name in the result object and not to have an attribute named <code>"doc.type"</code>. This
feature is probably in the top 20 of the most-often wished features.</p>

<!-- more -->


<p>However, the above query won&rsquo;t even parse. The AQL grammar only allows string values
left of the colon in an object definition. Non-quoted strings are allowed there too, and are
implicitly turned into quoted strings. It works similar to how object literals are defined
in JavaScript:</p>

<figure class='code'><figcaption><span>using unquoted and quoted string attribute names</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN { 
</span><span class='line'>  foo : "bar",
</span><span class='line'>  "baz" : "qux"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Why not allow arbitrary expression left of the colon? The reason is simple: this would cause
ambiguity and probably have side-effects. For an example, have a look at the following query:</p>

<figure class='code'><figcaption><span>which attribute name to use here?</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection
</span><span class='line'>  LET type = doc.type;
</span><span class='line'>  RETURN { type : doc.value }</span></code></pre></td></tr></table></div></figure>


<p>If the <code>type</code> attribute name inside the object definition is interpreted as a string literal
as it currently is an AQL (and always was), then the resulting attribute name is just <code>"type"</code>.</p>

<p>If the <code>type</code> attribute name would now be intepreted as an expression, it would get the value
that was assigned to the variable <code>type</code> by the <code>LET</code> statement. Removing the <code>LET</code> from the
query would change the attribute name in the result back to the string literal <code>"type"</code>.</p>

<p>The ambiguity could be solved by telling the parser what to do in such cases. While technically
this could be working, I think it may have too many unintended side-effects. I already mentioned
that introducing a <code>LET</code> statement into the query would change the attribute name in the result.
The same could also happen if a collection named <code>type</code> was added to the query. And it would
break compatibility with existing queries.</p>

<p>JavaScript has the same problem, and it wasn&rsquo;t solved portably yet. However, there is a proposal
for ES6 that suggests enclosing attribute name expressions in <code>[</code> and <code>]</code>.</p>

<p>To me, this looks like a good solution for the problem. It&rsquo;s two bytes more when keying in
queries, but the syntax is easy and explicit. There are no ambiguities.</p>

<p>I prototyped this solution for AQL, so I could write:</p>

<figure class='code'><figcaption><span>query using dynamic attribute names</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR i IN 1..5 
</span><span class='line'>  RETURN { 
</span><span class='line'>    [ CONCAT('test', i) ] : i, 
</span><span class='line'>    [ SUBSTITUTE(CONCAT('i is ', (i &lt;= 3 ? 'small' : 'not small')), { ' ' :  '_' } ) ] : i 
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>[
</span><span class='line'>  { 
</span><span class='line'>    "test1" : 1, 
</span><span class='line'>    "i_is_small" : 1 
</span><span class='line'>  }, 
</span><span class='line'>  { 
</span><span class='line'>    "test2" : 2, 
</span><span class='line'>    "i_is_small" : 2 
</span><span class='line'>  }, 
</span><span class='line'>  { 
</span><span class='line'>    "test3" : 3, 
</span><span class='line'>    "i_is_small" : 3 
</span><span class='line'>  }, 
</span><span class='line'>  { 
</span><span class='line'>    "test4" : 4, 
</span><span class='line'>    "i_is_not_small" : 4 
</span><span class='line'>  }, 
</span><span class='line'>  { 
</span><span class='line'>    "test5" : 5, 
</span><span class='line'>    "i_is_not_small" : 5 
</span><span class='line'>  } 
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>I ran a few queries with this, and they seemed to work. <del>However, I haven&rsquo;t
committed the feature yet. There might still be cases in which it doesn&rsquo;t work. Tests
for the feature are also still missing. I hope I can finalize the implementation soon
so it becomes available in some release.</del></p>

<p><strong>UPDATE</strong>: tests have been added, and the feature has been committed in devel. It is
included in ArangoDB since version 2.5.</p>

<p>Everyone is welcome to try it out already!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAOR - Yet Another Optimizer Rule]]></title>
    <link href="http://jsteemann.github.io/blog/2015/01/31/yaor-yet-another-optimizer-rule/"/>
    <updated>2015-01-31T18:51:30+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/01/31/yaor-yet-another-optimizer-rule</id>
    <content type="html"><![CDATA[<p>A quick post that showcases the new optimizer rule <code>move-calculations-down</code> that was added
in ArangoDB 2.5 (current <code>devel</code> branch).</p>

<!-- more -->


<p>Consider the following simple query:</p>

<figure class='code'><figcaption><span>Example query </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN test 
</span><span class='line'>  LET calculated = CONCAT('foo', doc.value) 
</span><span class='line'>  FILTER doc.value &lt; 100 
</span><span class='line'>  RETURN calculated</span></code></pre></td></tr></table></div></figure>


<p>If no indexes are present in collection <code>test</code>, the execution plan will look
like this in 2.4:</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/explain-24.png"></p>

<p>The plan can be improved a bit. While there are no indexes to exploit, the calculation
for <code>calculated</code> can be pushed beyond the execution of the <code>FILTER</code>. This will be very
beneficial if the calculation is expensive and the <code>FILTER</code> can prune a lot of documents.</p>

<p>In 2.5, there is an optimizer rule <code>move-calculations-down</code> that will do this. It will
move all eligible calculations as far down in the plan as possible. A calculation obviously can
be moved down a step only if the successor step does not depend on its result.</p>

<p>Additionally, a calculation will not be moved beyond a <code>COLLECT</code> operation, because
<code>COLLECT</code> changes which variables are visible in a scope. Finally, a calculation will not
be moved down inside a <code>FOR</code> loop, in order to avoid repeated calculations.</p>

<p>In the example query, the step following the <code>LET</code> calculation was a <code>FILTER</code>.
The filter condition does not depend on the result of <code>calcuated</code>, so the calculation is
eligible for being moved down.</p>

<p>The resulting execution plan will look like this in 2.5:</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/explain-25.png"></p>

<p>As we can see from the changed id sequence on the left, the calculation was moved down.</p>

<p>What does this buy us? For the simple query above, with the <code>test</code> collection containing
100.000 documents with <code>value</code> ranging from 0 to 99,999, the results are as follows:</p>

<ul>
<li>if the filter leaves only 0.1 % of the documents pass, execution time goes down from
0.87 seconds to 0.17 seconds thanks to the rule</li>
<li>if the filter lets 1 % of the documents pass, execution time is 0.21 seconds with the rule,
and 0.91 without</li>
<li>if the filter lets 10 % of the documents pass, execution time is 0.25 s, vs. 0.91 seconds
without.</li>
<li>if the filter lets all documents pss, there is no difference in execution time</li>
</ul>


<p>This is quite a nice speedup, especially when taking into account how simple the optimizer
rule is. The effects may be even greater for queries that contain multiple calculations
that can be pushed beyond filters, or for more expensive calculations.</p>

<p>Of course the best solution for the above query would be to use a skiplist index on
<code>value</code>, but that&rsquo;s a different story. The optimizer rule shown here is orthogonal to
using indexes, so queries already using indexes might still benefit from the rule if they
contain additional calculations or further filters which cannot be satifisfied by indexes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Custom Visitors in AQL Graph Traversals]]></title>
    <link href="http://jsteemann.github.io/blog/2015/01/28/using-custom-visitors-in-aql-graph-traversals/"/>
    <updated>2015-01-28T22:21:35+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/01/28/using-custom-visitors-in-aql-graph-traversals</id>
    <content type="html"><![CDATA[<p>This post is about some recent extensions for the AQL graph traversal functionality
in ArangoDB.</p>

<p>These extensions allow invoking user-defined JavaScript code for filtering
and results generation in AQL queries that contain traversals.</p>

<p>This should make AQL graph traversals much more powerful than before.
Additionally, AQL graph traversals get more configurable, allowing to write
traversal functions with control-flow logic and complex filtering. As a
side-effect, this change facilitates writing specialized traversal functions
with much higher efficiency than the general-purpose, cover-all-cases default
ones.</p>

<p>The extensions are currently available in the devel branch of ArangoDB on in the
2.4 branch (with 2.4.2 being the first release to include them).</p>

<!-- more -->


<h1>Example graph</h1>

<p>For all following examples, I&rsquo;ll be using a small example graph that can be set
up by running <a href="http://jsteemann.github.io/downloads/code/world-graph-setup.js">this script</a> from the ArangoShell.</p>

<p>I have chosen this small graph because it is easy to understand and still complex
enough to demonstrate some common traversal use cases.</p>

<p>The example graph consists of the following two collections:</p>

<ul>
<li><code>v</code>: a collection with vertex documents</li>
<li><code>e</code>: an edge collection containing the connections between vertices in <code>v</code></li>
</ul>


<p>All vertices in the graph have a <code>type</code> attribute, with types being either <code>root</code>,
<code>continent</code>, <code>country</code> or <code>capital</code>. The graph is a tree, so it has only one vertex
with type <code>root</code>. The root vertex is named <em>world</em>. Below the root there are only
vertices of type <code>continent</code>. These are also connected to some <code>country</code> vertices.
Finally, <code>country</code> vertices are also connected to <code>capital</code> vertices:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root &lt;--[is in]-- continent &lt;--[is in]-- country &lt;--[is in]-- capital</span></code></pre></td></tr></table></div></figure>


<p>In the examples, we&rsquo;ll only look at the vertices and ignore what the connections
look like.</p>

<h1>Custom visitors</h1>

<p>We know the graph is a tree, so let&rsquo;s print its structure in a textual format
using AQL. We&rsquo;ll employ a <strong>custom visitor function</strong> for this. A custom visitor is
a user-defined callback function that is called for every vertex that is encountered
during a graph traversal. Custom visitor functions need to be written in JavaScript
and be registered once before they can be used from an AQL query.</p>

<p>Custom visitors have the following function signature:</p>

<figure class='code'><figcaption><span>visitor function signature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function parameters have the following meanings:</p>

<ul>
<li><code>config</code>: the traversal configuration</li>
<li><code>result</code>: the result already generated by the traversal. This is important only
if the visitor is designed to modify an existing result in-place</li>
<li><code>vertex</code>: the currently visited vertex document</li>
<li><code>path</code>: the path from the start vertex to the currently visited vertex document.
The path will contain an array <code>vertices</code> and an array <code>edges</code></li>
</ul>


<p>Let&rsquo;s register a custom visitor named <code>myfunctions::structurePrinter</code>. This can done
by running the following code from the ArangoShell:</p>

<figure class='code'><figcaption><span>registering a custom visitor to print the tree structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">aqlfunctions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/functions&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">aqlfunctions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;myfunctions::structurePrinter&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">indentation</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;  &quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">label</span>       <span class="o">=</span> <span class="s2">&quot;- &quot;</span> <span class="o">+</span> <span class="nx">vertex</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; (&quot;</span> <span class="o">+</span> <span class="nx">vertex</span><span class="p">.</span><span class="nx">type</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">indentation</span> <span class="o">+</span> <span class="nx">label</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Processing vertex data with a function</h2>

<p>The above function will be called for every vertex in the graph when we use it in
a traversal. Let&rsquo;s do it and run the AQL query to invoke the visitor function.</p>

<p>I suggest running the query from the web interface&rsquo;s <strong>AQL editor</strong>:</p>

<figure class='code'><figcaption><span>invoking the custom visitor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET params = { 
</span><span class='line'>  visitor : "myfunctions::structurePrinter", 
</span><span class='line'>  visitorReturnsResults : true 
</span><span class='line'>}
</span><span class='line'>FOR result IN TRAVERSAL(v, e, "v/world", "inbound", params) 
</span><span class='line'>  RETURN result</span></code></pre></td></tr></table></div></figure>


<p>The visitor will visit all vertices in the graph, starting at the vertex
<code>v/world</code> as specified. It will then follow incoming connections using a
depth-first search (this was not specified in the query as it is the default).</p>

<p>As we started with the root vertex of the graph, the query will visit all
vertices exactly once. Fortunately the example graph is a tree and does not
contain any cycles, so we do not have to care about how to make the traversal
terminate. The traversal will automatically terminate after it has visited all nodes.</p>

<p>The AQL query should produce something like this:</p>

<figure class='code'><figcaption><span>query result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;- World (root)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;  - North America (continent)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;    - Bahamas (country)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;      - Nassau (capital)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;    - Canada (country)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;      - Ottawa (capital)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;    - Antigua and Barbuda (country)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;      - Saint John&#39;s (capital)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;    - Barbados (country)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;      - Bridgetown (capital)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;  - Asia (continent)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;    - Afghanistan (country)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;      - Kabul (capital)&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should provide a good overview of the graph&rsquo;s contents.</p>

<h2>Referring to elements in the path</h2>

<p>To return the above result in a more structured manner, let&rsquo;s overwrite the
previous visitor function with one that returns the most interesting vertex
attributes individually. Let&rsquo;s include one that shows the nesting level of
each vertex in the tree:</p>

<figure class='code'><figcaption><span>registering another custom visitor to return the tree structure </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">aqlfunctions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/functions&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">aqlfunctions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;myfunctions::structurePrinter&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="nx">vertex</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="nx">vertex</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">level</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the same AQL query will now return something like:</p>

<figure class='code'><figcaption><span>query result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;World&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;North America&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;continent&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">2</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Bahamas&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;country&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">3</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Nassau&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;capital&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Canada&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;country&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">3</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Ottawa&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;capital&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Antigua and Barbuda&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;country&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">3</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Saint John&#39;s&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;capital&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Adding control flow</h2>

<p>Now let&rsquo;s add some control flow to the visitor function. The following visitor
function will also return information about each vertex&#8217; parent &ndash; except for the
root vertex, which does not have a parent:</p>

<figure class='code'><figcaption><span>a custom visitor with simple control flow</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">aqlfunctions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/functions&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">aqlfunctions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;myfunctions::structurePrinter&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="nx">vertex</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">type</span><span class="o">:</span> <span class="nx">vertex</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">level</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">2</span><span class="p">].</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">type</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">2</span><span class="p">].</span><span class="nx">type</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running our AQL query will now produce a different type of result for the root vertex
than for all the other vertices:</p>

<figure class='code'><figcaption><span>query result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;World&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;North America&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;continent&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;parent&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;World&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Bahamas&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;country&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;parent&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;North America&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;continent&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Nassau&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;capital&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;level&quot;</span> <span class="o">:</span> <span class="mi">4</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;parent&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Bahamas&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;country&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course much more things can be achieved by peeking the <em>path</em> variable.</p>

<h1>Filtering</h1>

<p>Now let&rsquo;s try to restrict the results of a graph traversal to just some vertices,
for example, all European countries. As we know the structure of the graph is quite
simple, the following naive approach will already do:</p>

<figure class='code'><figcaption><span>a custom visitor returning only European country names</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">aqlfunctions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/functions&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">aqlfunctions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;myfunctions::structurePrinter&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>      <span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">2</span><span class="p">].</span><span class="nx">name</span> <span class="o">===</span> <span class="s2">&quot;Europe&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">vertex</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the above is clearly not ideal.</p>

<p>First of all, the traversal will still <strong>visit every vertex</strong> in the graph, even though
most vertices will not be returned. Ideally, one will want to restrict a traversal to
visit as few vertices as possible, especially in a big graph or in a graph that contains
cycles.</p>

<p>Second, the above visitor is looking into a vertex&#8217; direct parent for filtering. This
will work for graphs that have a rigid structure, but may not work in more complex setups.</p>

<p>We better use a dedicated function for filtering. Such function can control
if a given vertex is going to be visited (via calling the <em>visitor</em> function) and if its
connections should be followed. It can skip non-interesting vertices early, providing a
good way to make traversals more efficient.</p>

<p>A filter function can be specified in the <em>filterVertices</em> attribute of the traversal options.
If specified, <em>filterVertices</em> needs to contain the name of a custom AQL function. A filter
function again needs to be written in JavaScript and has the following signature:</p>

<figure class='code'><figcaption><span>filter function signature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The filter function will be called for each vertex. It can return one of the
following values:</p>

<ul>
<li><code>"prune"</code>: visit the vertex, but do not descend into its connections</li>
<li><code>"exclude"</code>: do not visit the vertex, but do descend into its connections</li>
<li><code>[ "prune", "exclude" ]</code>: do not visit, and do not descend</li>
<li><code>undefined</code> (default): visit and descend</li>
</ul>


<p>The following filter function will return <code>"exclude"</code> for the root vertex, leading
to the visitor not being called for it. However, the traversal will still descend
into the connections of the root node.</p>

<p>On the next level, all continents will be enumerated. The filter will return
<code>[ "prune", "exclude" ]</code> for all continents but Europe, leading to the visitor not
being invoked for these continents, and their connections not being followed.
For the <em>Europe</em> vertex, it will return <code>"exclude"</code>,
meaning the visitor will not be called, but the traversal will descend into the
connections of <code>Europe</code>.</p>

<p>For all vertices of type <code>country</code>, the visitor will be
called. This is ok because the filter previously prevented the traversal from
descending into any other country but <em>Europe</em>.</p>

<p>Finally, the filter will return <code>"prune"</code> for all countries, meaning the traversal
will not descend into a country&rsquo;s connections (in this case that would be the captial vertices).
This will make the traversal end at the <code>country</code> level.</p>

<p>Here it is:</p>

<figure class='code'><figcaption><span>registering a filter for European countries</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">aqlfunctions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/functions&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">aqlfunctions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;myfunctions::europeFilter&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">,</span> <span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">vertex</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;country&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;prune&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">vertex</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s2">&quot;continent&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">vertex</span><span class="p">.</span><span class="nx">name</span> <span class="o">!==</span> <span class="s2">&quot;Europe&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">[</span> <span class="s2">&quot;prune&quot;</span><span class="p">,</span> <span class="s2">&quot;exclude&quot;</span> <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;exclude&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Putting the logic into the filter function allows using a very simple visitor:</p>

<figure class='code'><figcaption><span>a very simple visitor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">aqlfunctions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/functions&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">aqlfunctions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;myfunctions::structurePrinter&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">vertex</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We must also slightly extend our AQL query and tell it to use our custom filter function:</p>

<figure class='code'><figcaption><span>invoking the custom visitor and the custom filter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET params = { 
</span><span class='line'>  filterVertices : "myfunctions::europeFilter",
</span><span class='line'>  visitor : "myfunctions::structurePrinter", 
</span><span class='line'>  visitorReturnsResults : true 
</span><span class='line'>}
</span><span class='line'>FOR result IN TRAVERSAL(v, e, "v/world", "inbound", params) 
</span><span class='line'>  RETURN result</span></code></pre></td></tr></table></div></figure>


<p>Running the adjusted AQL query should produce something like:</p>

<figure class='code'><figcaption><span>query results</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;Austria&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Croatia&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Bosnia and Herzegovina&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Andorra&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Bulgaria&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Custom filter functions are a very general approach. Obviously much more complex tasks
than shown here can be achieved with them. We have often been asked for ways to set up
complex filter conditions in AQL traversals, and I hope these custom filter functions
will cover most of that.</p>

<h1>Special visitors</h1>

<p>Traversal depths can be controlled with the general configuration parameters
<code>minDepth</code> and <code>maxDepth</code>. These parameters are helpful to make the traversal only
include vertices occurring after the specified distance from the start vertex, or
up to the specified distance away from the start vertex. This helps bounding
traversals, but is not flexible enough when handling graphs with very distinct
path lengths.</p>

<h2>Returning only leaf nodes</h2>

<p>For example, <strong>finding leaf nodes</strong> in a graph is quite hard using a default
traversal. The <em>filterVertices</em> function cannot be used to find leaf nodes, because
<em>filterVertices</em> is called before a vertex&#8217; connections are determined. The same is true
for visitor functions. There were not provided any information about whether the
currently visited vertex has connections or not. All a visitor could previously do
to find leaf nodes is to return each visited vertex along with the full path information.
Some post-processing of the traversal result with regular AQL was then required to
detect the leaf nodes in that result.</p>

<p>This could easily get inefficient, especially in a big graphs for which the intermediate
results created by the default traversal visitor grew beyond reasonable sizes.</p>

<p>We therefore added a mechanism that can pass information about the vertex&#8217; connections
to the visitor. This allows writing new types of visitor functions. For example, it
makes it easy to write visitors that can return only leaf nodes.</p>

<p>In order to have the traversal pass the currently visited vertex&#8217; connections to the
visitor function, the traversal parameter <code>order</code> must be set to a value of <code>"preorder-expander"</code>.
The traversal&rsquo;s visitor function will then be called with an additional fifth
parameter named <code>connected</code>, which is an array of the connections of the current
vertex. This array will be empty if the traversal&rsquo;s expander function did not
find any connections for the vertex.</p>

<p>Here&rsquo;s a simple visitor that will make a traversal return only all leaf nodes:</p>

<figure class='code'><figcaption><span>a visitor that receives information about connections, too</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">aqlfunctions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/functions&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">aqlfunctions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;myfunctions::leafNodeVisitor&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">connected</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">connected</span> <span class="o">&amp;&amp;</span> <span class="nx">connected</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">vertex</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s2">&quot; (&quot;</span> <span class="o">+</span> <span class="nx">vertex</span><span class="p">.</span><span class="nx">type</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>And here&rsquo;s an AQL query that shows how to use this type of visitor:</p>

<figure class='code'><figcaption><span>invoking the leaf node visitor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET params = { 
</span><span class='line'>  order : "preorder-expander",
</span><span class='line'>  visitor : "myfunctions::leafNodeVisitor", 
</span><span class='line'>  visitorReturnsResults : true 
</span><span class='line'>}
</span><span class='line'>FOR result IN TRAVERSAL(v, e, "v/world", "inbound", params) 
</span><span class='line'>  RETURN result</span></code></pre></td></tr></table></div></figure>


<p>As a result, the above query will only print vertices of type <code>capital</code>
(because those are the only leaf nodes in the graph).</p>

<p>The nice thing when looking at the custom visitor function is that it only
filters on the number of connections, but not on vertex type or anything else
specific for this type of graph.</p>

<p>So it seems like the above function is general purpose and can be reused for
other graphs, too.</p>

<h2>Counting vertices</h2>

<p>Let&rsquo;s say we wanted to count the number of vertices in the graph, or the number of
vertices that passed our <em>filterVertices</em> function.</p>

<h3>Counting globally</h3>

<p>This is easy to achieve with a custom visitor like this:</p>

<figure class='code'><figcaption><span>registering a visitor that counts the number of vertices visited</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">aqlfunctions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/functions&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">aqlfunctions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;myfunctions::vertexCounter&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the above visitor function does not return anything, but will modify an existing
result in place. As a result, it will produce one counter value, which will be increased
whenever the visitor is called for a vertex.</p>

<p>To invoke this visitor and retrieve the count value, we have to set the <em>visitorReturnsResults</em>
attribute in the AQL query to <em>false</em>. This will make the traversal code pass the existing
result into the visitor and does not expect it to return any results via a <code>return</code> instruction.
Here&rsquo;s how to run this visitor:</p>

<figure class='code'><figcaption><span>invoking the global vertex counter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET params = { 
</span><span class='line'>  visitor : "myfunctions::vertexCounter", 
</span><span class='line'>  visitorReturnsResults : false 
</span><span class='line'>}
</span><span class='line'>FOR result IN TRAVERSAL(v, e, "v/world", "inbound", params) 
</span><span class='line'>  RETURN result</span></code></pre></td></tr></table></div></figure>


<p>The result will simply be:</p>

<figure class='code'><figcaption><span>query result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="mi">87</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Counting by type</h3>

<p>Let&rsquo;s say we wanted to count vertices by type. This is similar, except that now one global
counter value is insufficient and we instead need an object to keep track of the different
counters. We can still get away with modifying an existing result in place:</p>

<figure class='code'><figcaption><span>registering a visitor that counts vertices by type</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">aqlfunctions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/functions&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">aqlfunctions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;myfunctions::vertexCounter&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">result</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">vertexType</span> <span class="o">=</span> <span class="nx">vertex</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nx">result</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">vertexType</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">vertexType</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">vertexType</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our invocation AQL query does not change. The result of this visitor for the example graph will be:</p>

<figure class='code'><figcaption><span>query result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;root&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;continent&quot;</span> <span class="o">:</span> <span class="mi">6</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;country&quot;</span> <span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;capital&quot;</span> <span class="o">:</span> <span class="mi">40</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course such visitors can be combined with custom filters.</p>

<p>You probably ask why writing custom code is required to achieve a simple task like counting.
The main reason for this is that the traversal functionality is very general purpose and
is not optimized for a specific use case like just counting. For example, the default traversal
visitor will copy the complete vertex and path information into the result.</p>

<p>This can produce very big intermediate results if the graph is big or vertices contain lots
of data. If all we want is to count the number of vertices globally or per type, we are better
off with something more specialized.</p>

<p>The good news is that the most simple use case &ldquo;count all vertices&rdquo; there is a predefined
visitor named <code>_AQL::COUNTINGVISITOR</code> that can directly be used from a query, without prior
registration of a custom function:</p>

<figure class='code'><figcaption><span>using the predefined countingvisitor function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET params = { 
</span><span class='line'>  visitor : "_AQL::COUNTINGVISITOR"
</span><span class='line'>}
</span><span class='line'>FOR result IN TRAVERSAL(v, e, "v/world", "inbound", params) 
</span><span class='line'>  RETURN result</span></code></pre></td></tr></table></div></figure>


<h1>Accessing components from the path</h1>

<p>Visitors are allowed to peek into the <code>paths</code> variable to check how the currently visited
vertex is linked to others.</p>

<p>The paths variable is an object with a <code>vertices</code> sub-attribute and an <code>edges</code> sub-attribute.
<code>vertices</code> is an array including all vertices in the path from the start vertex up to the
currently visited vertex. The currently visited vertex is included in this array.
<code>edges</code> is an array including all connections (edges) between the start vertex and the
currently visited vertex. This array might be empty, in case the visitor is called for the
start vertex.</p>

<p>The following visitor function demonstrates how to peek into <code>paths</code>: it will produce a
stringified version of the path for all leaf vertices:</p>

<figure class='code'><figcaption><span>registering a visitor that accesses components from the path</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">aqlfunctions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/functions&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">aqlfunctions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;myfunctions::leafNodePathVisitor&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">connected</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">connected</span> <span class="o">&amp;&amp;</span> <span class="nx">connected</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">res</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">path</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">edges</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">res</span> <span class="o">+=</span> <span class="s2">&quot; &lt;--[&quot;</span> <span class="o">+</span> <span class="nx">path</span><span class="p">.</span><span class="nx">edges</span><span class="p">[</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="nx">type</span> <span class="o">+</span> <span class="s2">&quot;]-- &quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">res</span> <span class="o">+=</span> <span class="nx">v</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It can be invoked as follows:</p>

<figure class='code'><figcaption><span>using the visitor that accesses path components</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET params = { 
</span><span class='line'>  order : "preorder-expander",
</span><span class='line'>  visitor : "myfunctions::leafNodePathVisitor", 
</span><span class='line'>  visitorReturnsResults : true 
</span><span class='line'>}
</span><span class='line'>FOR result IN TRAVERSAL(v, e, "v/world", "inbound", params) 
</span><span class='line'>  RETURN result</span></code></pre></td></tr></table></div></figure>


<p>It will return something like the following:</p>

<figure class='code'><figcaption><span>query result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;World &lt;--[is-in]-- Africa &lt;--[is-in]-- Algeria &lt;--[is-in]-- Algiers&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;World &lt;--[is-in]-- Africa &lt;--[is-in]-- Angola &lt;--[is-in]-- Luanda&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;World &lt;--[is-in]-- Africa &lt;--[is-in]-- Botswana &lt;--[is-in]-- Gaborone&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;World &lt;--[is-in]-- Africa &lt;--[is-in]-- Burkina Faso &lt;--[is-in]-- Ouagadougou&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;World &lt;--[is-in]-- Africa &lt;--[is-in]-- Burundi &lt;--[is-in]-- Bujumbura&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;World &lt;--[is-in]-- Africa &lt;--[is-in]-- Cameroon &lt;--[is-in]-- Yaounde&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;World &lt;--[is-in]-- Africa &lt;--[is-in]-- Chad &lt;--[is-in]-- N&#39;Djamena&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: the contents of the <code>path</code> variable will change between calls to the
visitor function. Therefore is it not safe to reference arrays or objects from <code>path</code>
in the result for visitors that modify the <code>result</code> variable in place (i.e. when
<em>visitorReturnsResults</em> is set to <em>false</em>). The safe way to put path components
into the result of such visitors is to clone the parts of the path before putting
them into <code>result</code>.</p>

<h1>Passing parameters into visitors and filters</h1>

<p>It is often useful to pass own parameters into function to provide some sort
of invocation context. For example, the purpose of the following visitor function
is to return an object with only certain attributes of each visited vertex:</p>

<figure class='code'><figcaption><span>a visitor that can return arbitrary vertex attributes:</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">aqlfunctions</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/functions&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">aqlfunctions</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="s2">&quot;myfunctions::attributesPrinter&quot;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">config</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">vertex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">config</span><span class="p">.</span><span class="nx">data</span> <span class="o">===</span> <span class="s2">&quot;object&quot;</span> <span class="o">&amp;&amp;</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">attributes</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">config</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">attribute</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">values</span><span class="p">[</span><span class="nx">attribute</span><span class="p">]</span> <span class="o">=</span> <span class="nx">vertex</span><span class="p">[</span><span class="nx">attribute</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">values</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which attributes the function will return can be configured by passing in an
array of attribute names in the <code>config</code> parameter&rsquo;s <code>data</code> sub-attribute. Here&rsquo;s
an AQL query that will configure the visitor to return <code>_id</code> and <code>type</code>:</p>

<figure class='code'><figcaption><span>invoking the attributes visitor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET params = { 
</span><span class='line'>  visitor : "myfunctions::attributesPrinter",
</span><span class='line'>  visitorReturnsResults : true, 
</span><span class='line'>  data: { 
</span><span class='line'>    attributes: [ "_id", "type", "name" ] 
</span><span class='line'>  }  
</span><span class='line'>}
</span><span class='line'>FOR result IN TRAVERSAL(v, e, "v/world", "inbound", params) 
</span><span class='line'>  RETURN result</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explaining AQL Queries the Fancier Way]]></title>
    <link href="http://jsteemann.github.io/blog/2015/01/23/explaining-aql-queries-the-fancy-way/"/>
    <updated>2015-01-23T01:00:03+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/01/23/explaining-aql-queries-the-fancy-way</id>
    <content type="html"><![CDATA[<p>I have been looking at many AQL queries during the last few weeks.</p>

<p>Looking back, I can say that the JSON query execution plans provided by
the <code>explain()</code> method have provided me with a lot of useful information
about how the AQL optimizer had transformed a given query. This has
helped testing and improving the query optimizer a great deal.</p>

<p>However, the JSON output produced by <code>explain()</code> is so detailed that even
for the simplest cases queries it will span multiple screens. This is far
too much for quicking assesing what a query will be doing and how it will
be executed.</p>

<p>I therefore quickly put together a function that provides a much more
compact explain output. Its input parameter is a query string, which it
will send to the ArangoDB server to have it explained.</p>

<p>But it doesn&rsquo;t print a voluminous JSON object. This one is for developers
with a full schedule.</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/explainer.png"></p>

<!-- more -->


<p>It prints the original query, the generated query execution plan, the
applied optimizer rules plus the list of indexes that will be used. This
is often the key information that one is interested in.</p>

<p>It works best when the execution plan fits on a single screen and
the execution plan is not nested too much. Subqueries are supported though.
I have tried it with several queries this night and the results were quite
promising from my point of view.</p>

<p>For example, a poor man&rsquo;s graph query (using a subquery to join connected
edges) still prints nicely:</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/explainer-inv.png"></p>

<p>As usual, your mileage may vary. If you&rsquo;re inspecting complex queries
with it, the lines printed may get too long and wrap. The output won&rsquo;t be
very legible then, but it may still be helpful.</p>

<p>I have added the feature to 2.4 and devel. Anyone compiling from source
can use it by pulling the latest changes, compiling, and then typing the
following on the ArangoShell or in the web interface:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">explain</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb/aql/explainer&quot;</span><span class="p">).</span><span class="nx">explain</span><span class="p">;</span>
</span><span class='line'><span class="nx">explain</span><span class="p">(</span><span class="s2">&quot;FOR doc IN myCollection FILTER doc.value &lt; 23 RETURN doc&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The feature will also be included in the next 2.4 package.</p>

<p>Anyone on 2.3 or 2.4 users that can&rsquo;t wait until the next package can give
it a try, too. The code for the explain function is contained in a single file,
and it can be downloaded from
<a href="https://github.com/arangodb/arangodb/blob/2.4/js/common/modules/org/arangodb/aql/explainer.js">Github</a>.
and then be copied into the appropriate location inside ArangoDB&rsquo;s <code>js</code> directory.
This should make it work from the ArangoShell (but not from the web interface).</p>

<p>On a side note: I would also like to have some functionality like this in
the web interface, but as a backend developer, I am not able to do any
serious UI work. I also put this together in my leisure time, and have to
come to an end with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Returning Results From AQL INSERT/REMOVE/REPLACE Operations]]></title>
    <link href="http://jsteemann.github.io/blog/2015/01/13/returning-results-from-aql-insert-update-remove-operations/"/>
    <updated>2015-01-13T22:53:40+01:00</updated>
    <id>http://jsteemann.github.io/blog/2015/01/13/returning-results-from-aql-insert-update-remove-operations</id>
    <content type="html"><![CDATA[<p>ArangoDB provides many options for finding and modifying data. Though there are
several more specialized operation, data-modification AQL queries are the most
general solution in ArangoDB. They allow to find documents using arbitrary filter
criteria, and to modify or remove the documents once found.</p>

<p>Such <em>find-and-modify</em> operations can be executed with multiple queries (one for
the find step, one for the modification step), or with a single query. Putting
both steps into a single query will often save roundtrips between the application
and the database and thus may be preferred over executing the steps separately.
Putting both the find and the modify step into the same query also prevents other
operations from interfering in between and tampering with the underlying data.</p>

<p>Now what if the application not only requires the data to be updated, but also needs
to keep track of which documents were found and modified by a <em>find-and-modify</em>
query? This is often required when an application needs to keep database
data in sync with data in some other datastore (e.g. the filesystem or a remote
service).</p>

<p>The pattern I would dub <em>find-modify-return</em> would be useful for this.</p>

<!-- more -->


<p>Unfortunately it hasn&rsquo;t been supported in AQL until very recently.
We have been asked for this so many times that I stopped counting.</p>

<p>I am glad that this got better with ArangoDB 2.4. Finding, modifying and returning
documents is now possible from the same AQL query. The solution is not yet perfect,
but at least it provides basic <em>find-modify-return</em> functionality for a lot of
use cases, including multi-document, multi-collection queries.</p>

<h2>INSERT</h2>

<p>Let&rsquo;s start with an <code>INSERT</code> operation as it is the most simple to explain:</p>

<figure class='code'><figcaption><span>insert query, not returning anything</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR i IN 1..10
</span><span class='line'>  INSERT { name: CONCAT("user", i), someValue: RAND() } IN testAccounts</span></code></pre></td></tr></table></div></figure>


<p>The above query does not explicitly specify the <code>_key</code> attribute for the inserted
documents, meaning the database will create the documents keys automatically.
Additionally, the query assigns a random value to an attribute <code>someValue</code>.
Getting to know the created keys or random values required an extra lookup query
before 2.4. Extra queries are something one wants to avoid for efficiency
reasons.</p>

<p>With 2.4, adding two lines at the end of the query will solve the problem so
that everything can be done in one query:</p>

<figure class='code'><figcaption><span>insert query, returning the inserted documents</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR i IN 1..10
</span><span class='line'>  INSERT { name: CONCAT("user", i), someValue: RAND() } IN testAccounts
</span><span class='line'>  LET inserted = NEW
</span><span class='line'>  RETURN inserted</span></code></pre></td></tr></table></div></figure>


<p>Using a <code>LET</code> with the pseudo-value of <code>NEW</code> after the <code>INSERT</code> together with
a final <code>RETURN</code> statement will make the inserted documents appear in the query
result. Note that the full documents will be returned and not just the specified
attributes. This allows the application to track of all document attributes,
even the auto-generated ones.</p>

<h2>REMOVE</h2>

<p>The mechanism works for <code>REMOVE</code> statements, too.</p>

<p>Time to use a different example for this. Let&rsquo;s assume session metadata are
stored in the database, and some bigger session files are stored somewhere
in the filesystem. If the application needs to remove expired sessions, it
will need to clean up in both places. It will first query the database to
find the expired sessions, only to remove them from the filesystem (if the
filesystem sessions were organized by session id from the database) and to
finally remove the sessions from database itself.</p>

<p>The following query could be used to find removal candidates:</p>

<figure class='code'><figcaption><span>query for finding removal candidates</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR session IN sessions
</span><span class='line'>  FILTER session.dateExpires &lt; DATE_NOW()
</span><span class='line'>  LIMIT 1000
</span><span class='line'>  RETURN session._key</span></code></pre></td></tr></table></div></figure>


<p>The results of this query can be used for cleaning up sessions in the filesystem,
and for finally removing the sessions from the database. However, this would require
an extra <code>REMOVE</code> query. And didn&rsquo;t we say we would like to avoid extra queries?</p>

<p>The good news is that in 2.4 we can by putting at least the database part into a
single query:</p>

<figure class='code'><figcaption><span>query for removing and returning expired sessions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR session IN sessions
</span><span class='line'>  FILTER session.dateExpires &lt; DATE_NOW()
</span><span class='line'>  LIMIT 1000
</span><span class='line'>  REMOVE session IN sessions 
</span><span class='line'>  LET removed = OLD
</span><span class='line'>  RETURN removed</span></code></pre></td></tr></table></div></figure>


<p>The last two lines of the above query make sure the removed sessions are
returned to the application, so the application can perform any filesystem
cleanup using the session ids from the database.</p>

<p>Note that in case of <code>REMOVE</code> one has to use the pseudo-value <code>OLD</code> because
<code>REMOVE</code> can only return documents before removal. In the case of <code>INSERT</code>
we can only refer to the pseudo-value <code>NEW</code>.</p>

<h2>UPDATE and REPLACE</h2>

<p>So far we saw <code>INSERT</code> and <code>REMOVE</code>, but there are also <code>UPDATE</code> and <code>REPLACE</code>.
I will handle <code>UPDATE</code> and <code>REPLACE</code> in one go. All the following refers to
<code>UPDATE</code>, but does apply to <code>REPLACE</code> as well.</p>

<p>The mechanism to return documents from a query is the same as
already demonstrated: simply append the <code>LET ... RETURN</code> sequence to the end
of the original query.</p>

<p>In addition, <code>UPDATE</code> allows to return either the <em>old</em> document revisions
(before modification) or the <em>new</em> document revisions (after modification).
This can be expressed by using either <code>OLD</code> or <code>NEW</code> in the final <code>LET</code>
statement.</p>

<p>Following is a more complex example for an <code>UPDATE</code> query that aggregates data
from one collection (<code>phraseOccurrences</code>) in order to find and modify matching
documents in another collection (<code>phrases</code>). It will return the documents from
<code>phrases</code> before they got modified:</p>

<figure class='code'><figcaption><span>update query returning &#8220;old&#8221; documents</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR po IN phraseOccurrences
</span><span class='line'>  FILTER ! po.isSuspicious
</span><span class='line'>  FILTER po.dateMentioned &gt;= '2015-01-01' && po.dateMentioned &lt;= '2015-01-09'
</span><span class='line'>  COLLECT phrase = po.phrase WITH COUNT INTO occurrences
</span><span class='line'>  FILTER occurrences % 42 != 23
</span><span class='line'>  LIMIT 13
</span><span class='line'>  UPDATE phrase WITH { isSuspicious: true } IN phrases
</span><span class='line'>  LET previous = OLD  /* returns document revisions before UPDATE */
</span><span class='line'>  RETURN previous</span></code></pre></td></tr></table></div></figure>


<p>If we are interested in what the documents in <code>phrases</code> look like with the
<code>UPDATE</code> applied, we can use <code>NEW</code> instead:</p>

<figure class='code'><figcaption><span>update query returning &#8220;new&#8221; documents</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR po IN phraseOccurrences
</span><span class='line'>  FILTER ! po.isSuspicious
</span><span class='line'>  FILTER po.dateMentioned &gt;= '2015-01-01' && po.dateMentioned &lt;= '2015-01-09'
</span><span class='line'>  COLLECT phrase = po.phrase WITH COUNT INTO occurrences
</span><span class='line'>  FILTER occurrences % 42 != 23
</span><span class='line'>  LIMIT 13
</span><span class='line'>  UPDATE phrase WITH { isSuspicious: true } IN phrases
</span><span class='line'>  LET modified = NEW  /* returns document revisions after UPDATE */
</span><span class='line'>  RETURN modified</span></code></pre></td></tr></table></div></figure>


<p>Note that the full documents will be returned here, and not just the attributes
specified in or modified by the <code>UPDATE</code> operation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using ES6 Features in ArangoDB]]></title>
    <link href="http://jsteemann.github.io/blog/2014/12/19/using-es6-features-in-arangodb/"/>
    <updated>2014-12-19T19:12:06+01:00</updated>
    <id>http://jsteemann.github.io/blog/2014/12/19/using-es6-features-in-arangodb</id>
    <content type="html"><![CDATA[<p>ArangoDB 2.4 will be shipped with an <em>updated version of V8</em>.</p>

<p>The V8 version included in 2.4 will be 3.29.59. This version will replace the
almost two year old 3.16.14. A lot of things happened in V8 since then, and a lot
of ES6 features have been added to it.</p>

<p><strong>ES6 is not finalized yet</strong>, and support for it is a <a href="http://kangax.github.io/compat-table/es6/">work in progress on all
platforms</a>.</p>

<p>ES6 provides many cool features that can make JavaScript developer&rsquo;s life easier.
In this blog post, I&rsquo;ll summarize a few ES6 features that are available in
ArangoDB, either for scripting purposes in the ArangoShell, or in your server-side
Foxx actions inside the database.</p>

<p>I don&rsquo;t want to put you off until Doomsday. ArangoDB 2.4 should be released next
week. Time to play with some ES6 features!</p>

<!-- more -->


<h1>Summary for the impatient</h1>

<p>The following ES6 features are available in ArangoDB 2.4 by default:</p>

<ul>
<li>iterators</li>
<li>the <code>of</code> operator</li>
<li>symbols</li>
<li>predefined collections types (Map, Set etc.)</li>
<li>typed arrays</li>
</ul>


<p>Many other ES6 features are disabled by default, but can be made available by
starting arangod or arangosh with the appropriate options:</p>

<ul>
<li>arrow functions</li>
<li>proxies</li>
<li>generators</li>
<li>String, Array, and Number enhancements</li>
<li>constants</li>
<li>enhanced object and numeric literals</li>
</ul>


<p>To activate all these ES6 features, start arangod or arangosh with the following
options:</p>

<pre><code>arangosh --javascript.v8-options="--harmony --harmony_generators"
</code></pre>

<h1>Activating ES6 features</h1>

<p>Work on ES6, also dubbed <em>Harmony</em> or <em>ES.next</em>, is still in progress. At the time
of this writing, the ES6 specification was still in draft status.</p>

<p>Therefore no platform has implemented all ES6 features yet. And because ES6 is
still a moving target, the already implemented features should still be considered
experimental.</p>

<p>This is true for all environments that implement ES6 features. For example, Firefox
and other browsers contain lots of experimental ES6 features already, providing a
notice that these might change in future versions.</p>

<p>V8 is no exception here. It has turned most ES6 features off by default, but it
provides several command-line options to turn them on explicitly.</p>

<p>The V8 version used for ArangoDB 2.4 provides the following ES6-related switches:</p>

<ul>
<li><code>--harmony_scoping</code> (enable harmony block scoping)</li>
<li><code>--harmony_modules</code> (enable harmony modules (implies block scoping))</li>
<li><code>--harmony_proxies</code> (enable harmony proxies)</li>
<li><code>--harmony_generators</code> (enable harmony generators)</li>
<li><code>--harmony_numeric_literals</code> (enable harmony numeric literals (0o77, 0b11))</li>
<li><code>--harmony_strings</code> (enable harmony string)</li>
<li><code>--harmony_arrays</code> (enable harmony arrays)</li>
<li><code>--harmony_arrow_functions</code> (enable harmony arrow functions)</li>
<li><code>--harmony_classes</code> (enable harmony classes)</li>
<li><code>--harmony_object_literals</code> (enable harmony object literal extensions)</li>
<li><code>--harmony</code> (enable all harmony features (except proxies))</li>
</ul>


<p>These switches are all off by default. To turn on features for either arangod
or arangosh, start it with the V8 option(s) wrapped into the ArangoDB option
<code>--javascript.v8-options</code>, e.g.:</p>

<pre><code>arangosh --javascript.v8-options="--harmony_proxies --harmony_generators --harmony_array"
</code></pre>

<p>On a side note: node.js is also using V8. Turning on ES6 features in node.js almost
works the same way. Just omit the surrounding <code>--javascript.v8-options="..."</code>:</p>

<pre><code>node --harmony_proxies --harmony_generators --harmony_array
</code></pre>

<p>Note that the V8 options can only be set for the entire process (i.e. arangosh, arangod
or node.js), and not just for a specific script or application. In reality this shouldn&rsquo;t be
too problematic as the vast majority of ES6 features is downwards-compatible to ES5.1.</p>

<h1>ES6 features by example</h1>

<p>Following I have listed a few select ES6 features that are usable in ArangoDB 2.4,
in no particular order. I have omitted a few ES6 features that aren&rsquo;t supported in bundled
V8 version, and also omitted <em>classes</em> and <em>modules</em> due to lack of time.</p>

<h2>Arrow functions</h2>

<p>ES6 provides an optional arrow function syntax. The arrow function syntax is a shorthand for
writing a full-blown function declaration. Here&rsquo;s an example:</p>

<figure class='code'><figcaption><span>a simple arrow function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* defines function pow */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">pow</span> <span class="o">=</span> <span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="nx">value</span> <span class="o">*</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* calls pow */</span>
</span><span class='line'><span class="nx">pow</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span>  <span class="cm">/* 225 */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Arrow functions can also take multiple parameters. The syntax then becomes:</p>

<figure class='code'><figcaption><span>arrow function with multiple parameters</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* defines function sum */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* calls sum */</span>
</span><span class='line'><span class="nx">sum</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>  <span class="cm">/* 10 */</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far we have only seen arrow functions with simple expressions, but arrow function bodies
can also be more complex and can contain multiple statements:</p>

<figure class='code'><figcaption><span>more complex arrow functions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">translations</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;en&quot;</span> <span class="o">:</span> <span class="s2">&quot;English&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;fr&quot;</span> <span class="o">:</span> <span class="s2">&quot;French&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;de&quot;</span> <span class="o">:</span> <span class="s2">&quot;German&quot;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* using multiple statements */</span>
</span><span class='line'><span class="p">[</span><span class="s2">&quot;en&quot;</span><span class="p">,</span> <span class="s2">&quot;fr&quot;</span><span class="p">,</span> <span class="s2">&quot;xx&quot;</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="nx">value</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">translations</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">value</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">translations</span><span class="p">[</span><span class="nx">value</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;unknown!&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Arrow functions are turned off by default. To enable them in arangod or arangosh, start them
with the option <code>--javascript.v8-options="--harmony_arrow_functions"</code>.</p>

<h2>Maps and sets</h2>

<p>ES6 maps provide a specialized alternative to regular objects in case a <em>lookup-by-key</em>
functionality is required.</p>

<p>When no maps are available, storing keys mapped to objects is normally done using a plain
object. With ES6, the same use case can be handled with using a <strong>Map</strong> object:</p>

<figure class='code'><figcaption><span>using an ES6 Map object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* set 5M keys */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5000000</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>ES6 maps can be more efficient than plain objects in some cases. For the above case of
storing 5M entries, an ES6 map is about twice as fast as a plain object on my laptop.
Though there might be cases we are plain objects are still faster.</p>

<p>There&rsquo;s more to ES6 Maps than just efficiency:</p>

<ul>
<li>ES6 maps provide a member <code>size</code> which keeps track of the number of objects in the map.
This is hard to achieve with a plain object.</li>
<li>Objects can only have string keys, whereas map keys can have different key types.</li>
<li>They don&rsquo;t inherit keys from the prototype, so there is no <code>hasOwnProperty</code> hassle with Maps.</li>
</ul>


<p>ES6 also comes with a specialized <strong>Set</strong> object. The Set object is a good alternative to
plain JavaScript objects when the use case is to track unique values. Using a Set is more
intuitive, potentially more efficient and may require even less memory than when implementing
the same functionality with a plain JavaScript object:</p>

<figure class='code'><figcaption><span>using an ES6 Set object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Set</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* set 5M values */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5000000</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">s</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maps and sets are enabled by default in arangod and arangosh. No special configuration is needed
to use them in your code.</p>

<h2>Proxy objects</h2>

<p>Proxy objects can be used to intercept object property accesses at runtime. This can be used
for meta-programming in many real-world situations, e.g.:</p>

<ul>
<li>preventing, auditing and logging property accesses</li>
<li>calculated / derived properties</li>
<li>adding a compatibility layer on top of an object</li>
</ul>


<p>Here&rsquo;s an example that logs property accesses on the proxied object:</p>

<figure class='code'><figcaption><span>using a Proxy object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">proxy</span> <span class="o">=</span> <span class="nx">Proxy</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;read-accessing property &#39;%s&#39;&quot;</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;write-accessing property &#39;%s&#39;&quot;</span><span class="p">,</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">proxy</span><span class="p">.</span><span class="nx">foo</span> <span class="o">=</span> <span class="s2">&quot;bar&quot;</span><span class="p">;</span>   <span class="cm">/* write-accessing property &#39;foo&#39; */</span>
</span><span class='line'><span class="nx">proxy</span><span class="p">.</span><span class="nx">foo</span><span class="p">;</span>           <span class="cm">/* read-accessing property &#39;foo&#39; */</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Proxy objects are not available by default. To enable them in arangod or arangosh, start them
with the option <code>--javascript.v8-options="--harmony_proxies"</code>.</p>

<h2>Iterators and generators</h2>

<p>ES6 provides generators and iterators. They can be used individually or in combination.</p>

<p>Let&rsquo;s start with a simple example of a generator that will generate only two values:</p>

<figure class='code'><figcaption><span>a simple generator that generates two values </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="o">*</span> <span class="nx">generate</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">yield</span> <span class="mi">23</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">yield</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">generator</span> <span class="o">=</span> <span class="nx">generate</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">generator</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span>  <span class="cm">/* { &quot;value&quot; : 23, &quot;done&quot; : false } */</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">generator</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span>  <span class="cm">/* { &quot;value&quot; : 42, &quot;done&quot; : false } */</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">generator</span><span class="p">.</span><span class="nx">next</span><span class="p">());</span>  <span class="cm">/* { &quot;value&quot; : undefined, &quot;done&quot; : true } */</span>
</span></code></pre></td></tr></table></div></figure>


<p>As can be seen above, the value yielded by the generator function will be returned
wrapped into an object with a <code>value</code> and a <code>done</code> attribute automatically.</p>

<p>The general pattern to consume all values from a generator function is to call
its <code>next()</code> method until its <code>done</code> value is <code>true</code>:</p>

<figure class='code'><figcaption><span>consuming all values from a generator function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">generator</span> <span class="o">=</span> <span class="nx">generate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">value</span> <span class="o">=</span> <span class="nx">generator</span><span class="p">.</span><span class="nx">next</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>An alternative to that is to use an iterator (note the new <code>of</code> operator):</p>

<figure class='code'><figcaption><span>consuming all values from a generator function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">generator</span> <span class="o">=</span> <span class="nx">generate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">value</span> <span class="nx">of</span> <span class="nx">generator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generator functions produce their values lazily. Therefore it is possible
and not inefficent to write generators that produce never-ending sequences.
Though one must be careful to abort iterating over the generator values
at some point if the sequence does not terminate:</p>

<figure class='code'><figcaption><span>a generator producing an endless sequence</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span><span class="o">*</span> <span class="nx">generate</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="o">++</span><span class="nx">i</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">generator</span> <span class="o">=</span> <span class="nx">generate</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* note: this will not terminate */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">value</span> <span class="nx">of</span> <span class="nx">generator</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have now seen two uses of iterators as part of the previous examples.
As demoed, generator function values can be iterated with the <code>of</code> operator
without any further ado. Apart from generators, a few other built-in types
also provide ready-to-use iterators. The most prominent are <code>String</code> and <code>Array</code>:</p>

<figure class='code'><figcaption><span>iterating over the characters of a string</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="s2">&quot;this is a test string&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">value</span> <span class="nx">of</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above example will iterate all the individual characters of the string.</p>

<p>The following example iterates the values of an Array:</p>

<figure class='code'><figcaption><span>iterating over the values of an array</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&quot;this&quot;</span><span class="p">,</span> <span class="s2">&quot;is&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span><span class="p">,</span> <span class="s2">&quot;test&quot;</span> <span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">value</span> <span class="nx">of</span> <span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will produce <code>"this"</code>, <code>"is"</code>, <code>"a"</code>, <code>"test"</code>. This is normally what is
desired when iterating over the values of an Array. Compare this to the <code>in</code>
operator which would produce <code>0</code>, <code>1</code>, <code>2</code> and <code>3</code> instead.</p>

<p>Map and Set objects also implement iterators:</p>

<figure class='code'><figcaption><span>iterating over the contents of a Map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;Sweden&quot;</span><span class="p">,</span> <span class="s2">&quot;Europe&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;China&quot;</span><span class="p">,</span> <span class="s2">&quot;Asia&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;Bolivia&quot;</span><span class="p">,</span> <span class="s2">&quot;South America&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;Australia&quot;</span><span class="p">,</span> <span class="s2">&quot;Australia&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">m</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s2">&quot;South Africa&quot;</span><span class="p">,</span> <span class="s2">&quot;Africa&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">value</span> <span class="nx">of</span> <span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that Maps also provide dedicated iterators for just their keys or
their values:</p>

<figure class='code'><figcaption><span>iterating over keys and values of a Map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">country</span> <span class="nx">of</span> <span class="nx">m</span><span class="p">.</span><span class="nx">keys</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">country</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">continent</span> <span class="nx">of</span> <span class="nx">m</span><span class="p">.</span><span class="nx">values</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">continent</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rolling an iterator for your own object is also possible by implementing the method
<code>Symbol.iterator</code> for it:</p>

<figure class='code'><figcaption><span>creating an iterator for an object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">Sentence</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">text</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* create the actual iterator method */</span>
</span><span class='line'><span class="cm">/* note that the iterator is a generator function here */</span>
</span><span class='line'><span class="nx">Sentence</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="o">*</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">regex</span> <span class="o">=</span> <span class="sr">/\S+/g</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">text</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">match</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nx">match</span> <span class="o">=</span> <span class="nx">regex</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">text</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">yield</span> <span class="nx">match</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">sentence</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Sentence</span><span class="p">(</span><span class="s2">&quot;The quick brown fox jumped over the lazy dog&quot;</span><span class="p">);</span>
</span><span class='line'><span class="cm">/* invoke the iterator */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">word</span> <span class="nx">of</span> <span class="nx">sentence</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generators and iterators are not available by default. To enable them in arangod
or arangosh, start them with the option <code>--javascript.v8-options="--harmony_generators"</code>.</p>

<h2>String enhancements</h2>

<p>ES6 provides the following convenience string functions:</p>

<ul>
<li>string.startsWith(what)</li>
<li>string.endsWith(what)</li>
<li>string.includes(what)</li>
<li>string.repeat(count)</li>
<li>string.normalize(method)</li>
<li>string.codePointAt(position)</li>
<li>String.fromCodePoint(codePoint)</li>
</ul>


<p>These functions are mostly self-explaining, so I won&rsquo;t explain them in more
detail here. Apart from that, these functions are turned off by default.
To enable them in arangod or arangosh, start them with the option
<code>--javascript.v8-options="--harmony_strings"</code>.</p>

<h2>Array enhancements</h2>

<p>ES6 provides the following enhancements for the <code>Array</code> object:</p>

<ul>
<li>array.find(function)</li>
<li>array.findIndex(function)</li>
<li>array.keys()</li>
<li>array.values()</li>
<li>Array.observe(what, function)</li>
</ul>


<p>Here are a few examples demoing these functions:</p>

<figure class='code'><figcaption><span>Array enhancements</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">[</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">42</span> <span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* returns the first Array element for which the function returns true */</span>
</span><span class='line'><span class="nx">values</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">value</span> <span class="o">===</span> <span class="mi">23</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* returns the first Array index for which the function returns true */</span>
</span><span class='line'><span class="nx">values</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">value</span> <span class="o">===</span> <span class="mi">23</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* iterate over the keys of the Array */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="nx">of</span> <span class="nx">values</span><span class="p">.</span><span class="nx">keys</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* iterate over the values of the Array */</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">key</span> <span class="nx">of</span> <span class="nx">values</span><span class="p">.</span><span class="nx">values</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* observe all changes to an Array */</span>
</span><span class='line'><span class="nb">Array</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">changes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">changes</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* trigger a change to the observed Array */</span>
</span><span class='line'><span class="nx">values</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">117</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Array enhancements are turned off by default. To enable them in arangod or
arangosh, start them with the option <code>--javascript.v8-options="--harmony_arrays"</code>.</p>

<h2>Number enhancements</h2>

<p>The <code>Number</code> object is extended with the following ES6 functions:</p>

<ul>
<li>Number.isInteger(value)</li>
<li>Number.isSafeInteger(value)</li>
</ul>


<p>There are also <code>Number.MIN_SAFE_INTEGER</code> and <code>Number.MAX_SAFE_INTEGER</code> so applications
can programmatically check whether a numeric value can still be stored in the range of
-2<sup>53</sup> to +2<sup>53</sup> without potential precision loss.</p>

<h2>Constants</h2>

<p>The <code>const</code> keyword can be used to define a read-only constant. The constant must be
initialized and a variable with the same name should not be redeclared in the same scope.</p>

<p>Here is an example of using <code>const</code>:</p>

<figure class='code'><figcaption><span>using const to create a read-only variable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">calculate</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">magicPrime</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">magicPrime</span> <span class="o">^</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In non-strict mode, <code>const</code> variables behave non-intuitively. Re-assigning a value
to a variable declared <code>const</code> does not throw an exception, but the assignment will
not be carried out either. Instead, the assignment will silently fail and the <code>const</code>
variable will keep its original value:</p>

<figure class='code'><figcaption><span>re-assigning a value to a const variable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">mystery</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">life</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">life</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>        <span class="cm">/* does not change value and does not throw! */</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">life</span><span class="p">;</span>      <span class="cm">/* will return 42 */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>re-assigning a value to a const variable, using strict mode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">mystery</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">life</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">life</span> <span class="o">=</span> <span class="mi">23</span><span class="p">;</span>        <span class="cm">/* will throw SyntaxError &quot;assignment to constant variable&quot; */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>const</code> keyword is disabled by default. To enable it in arangod or arangosh,
start them with the option <code>--javascript.v8-options="--harmony_scoping"</code>.</p>

<h2>Enhanced object literals</h2>

<p>ES6 provides a shorthand for defining methods in object literals.</p>

<p>The following example creates a normal method named <code>save</code> in <code>myObject</code>:</p>

<figure class='code'><figcaption><span>shorthand method declaration</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">myObject</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;myType&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">save</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;save&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interestingly, the object literals seem to work for method declarations only.
I did not get them to work for non-method object properties, though ES6 allows that.
It seems that this is not implemented in V8 yet.</p>

<p>Enhanced object literals are turned off by default. To enable them in arangod
or arangosh, start them with the option <code>--javascript.v8-options="--harmony_object_literals"</code>.</p>

<h2>Enhanced numeric literals</h2>

<p>For the ones that love working with binary- or octal-encoded numbers, ES6 has
support for this too:</p>

<figure class='code'><figcaption><span>numeric literals</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">life</span> <span class="o">=</span> <span class="mi">0</span><span class="nx">b101010</span><span class="p">;</span>          <span class="cm">/* binary, 42 in decimal */</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">filePermissions</span> <span class="o">=</span> <span class="mi">0</span><span class="nx">o777</span><span class="p">;</span>  <span class="cm">/* octal, 511 in decimal */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enhanced numeric literals are turned off by default. To enable them in arangod
or arangosh, start them with the option <code>--javascript.v8-options="--harmony_numeric_literals"</code>.</p>

<h2>Symbols</h2>

<p>ES6 also provides a Symbol type. Symbols are created using the global <code>Symbol()</code> function.
Each time this function is called, a new Symbol object will be created.
A Symbol can be given an optional name, but this name cannot be used to identify the
Symbol later. However, Symbols can be compared by identity.</p>

<p>What one normally wants is to use the same Symbol from different program parts. In this
case, a Symbol should not be created with the <code>Symbol()</code> function, but with <code>Symbol.for()</code>.
This will register the Symbol in a global symbol table if it is not there yet, and return
the Symbol if already created:</p>

<figure class='code'><figcaption><span>using named Symbols</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">typeAttribute</span> <span class="o">=</span> <span class="nx">Symbol</span><span class="p">.</span><span class="k">for</span><span class="p">(</span><span class="s2">&quot;type&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">carType</span> <span class="o">=</span> <span class="nx">Symbol</span><span class="p">.</span><span class="k">for</span><span class="p">(</span><span class="s2">&quot;car&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">trainType</span> <span class="o">=</span> <span class="nx">Symbol</span><span class="p">.</span><span class="k">for</span><span class="p">(</span><span class="s2">&quot;train&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">object1</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'><span class="nx">object1</span><span class="p">[</span><span class="nx">typeAttribute</span><span class="p">]</span> <span class="o">=</span> <span class="nx">carType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">object2</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'><span class="nx">object2</span><span class="p">[</span><span class="nx">typeAttribute</span><span class="p">]</span> <span class="o">=</span> <span class="nx">trainType</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* check if the objects have the same type */</span>
</span><span class='line'><span class="nx">object1</span><span class="p">[</span><span class="nx">typeAttribute</span><span class="p">]</span> <span class="o">===</span> <span class="nx">object2</span><span class="p">[</span><span class="nx">typeAttribute</span><span class="p">];</span>  <span class="cm">/* false */</span>
</span><span class='line'><span class="nx">object1</span><span class="p">[</span><span class="nx">typeAttribute</span><span class="p">]</span> <span class="o">===</span> <span class="nx">carType</span><span class="p">;</span>                 <span class="cm">/* true */</span>
</span><span class='line'><span class="nx">object2</span><span class="p">[</span><span class="nx">typeAttribute</span><span class="p">]</span> <span class="o">===</span> <span class="nx">carType</span><span class="p">;</span>                 <span class="cm">/* false */</span>
</span><span class='line'><span class="nx">object2</span><span class="p">[</span><span class="nx">typeAttribute</span><span class="p">]</span> <span class="o">===</span> <span class="nx">trainType</span><span class="p">;</span>               <span class="cm">/* true */</span>
</span></code></pre></td></tr></table></div></figure>


<p>Symbol object properties are not enumerated by default, so they can be used to implement
&ldquo;hidden&rdquo; or internal properties.</p>

<p>Symbols can be used by default in arangod and arangosh. No special configuration is required.</p>

<h2>TypedArrays</h2>

<p>TypedArrays are Arrays whose members all have the same type and size. They are more
specialized (read: limited but efficient) alternatives to the all-purpose <code>Array</code> type.</p>

<p>TypedArrays look and feel a bit like C arrays, and they are often used as an Array-like
view into binary data (for which JavaScript has no native support).</p>

<p>A TypedArray is created (and all of its memory is allocated) by invoking the appropriate
TypedArray constructor:</p>

<ul>
<li>Int8Array</li>
<li>Uint8Array</li>
<li>Uint8ClampedArray</li>
<li>Int16Array</li>
<li>Uint16Array</li>
<li>Int32Array</li>
<li>Uint32Array</li>
<li>Float32Array</li>
<li>Float64Array</li>
</ul>


<figure class='code'><figcaption><span>using an Array of unsigned 8 bit integers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="nx">b00010101</span><span class="p">;</span>  <span class="cm">/* 23 */</span>
</span><span class='line'><span class="nx">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="nx">b00101010</span><span class="p">;</span>  <span class="cm">/* 42 */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>  <span class="cm">/* 23 */</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="nx">data</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="p">);</span> <span class="cm">/* 2 bytes */</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>using an Array of 64 bit floating point values</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Float64Array</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">23.23</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>  <span class="cm">/* 23.23 */</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>  <span class="cm">/* 0.0 */</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="nx">data</span><span class="p">.</span><span class="nx">BYTES_PER_ELEMENT</span><span class="p">);</span> <span class="cm">/* 16 bytes */</span>
</span></code></pre></td></tr></table></div></figure>


<p>TypedArrays can be used in arangod and arangosh by default. No special
configuration is required to activate them.</p>

<h2>Unsupported ES6 features</h2>

<p>As mentioned before, V8 does not yet support every proposed ES6 feature.
For example, the following ES6 features are currently missing:</p>

<ul>
<li>template strings</li>
<li>function default parameters</li>
<li>rest function parameter</li>
<li>spread operator</li>
<li>destructuring</li>
<li>array comprehension</li>
<li><code>let</code></li>
</ul>


<p>I strongly hope these features will make it into the final version of ES6 and will be
implemented by the V8 team in future versions of V8.</p>

<p>Apart from that, a lot of nice ES6 features are there already and can be used
in ArangoDB applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[99 Bottles of Beer]]></title>
    <link href="http://jsteemann.github.io/blog/2014/12/14/99-bottles-of-beer/"/>
    <updated>2014-12-14T13:14:28+01:00</updated>
    <id>http://jsteemann.github.io/blog/2014/12/14/99-bottles-of-beer</id>
    <content type="html"><![CDATA[<p><a href="http://www.99-bottles-of-beer.net/">99 bottles of beer</a> in AQL:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR quant IN 99..0 
</span><span class='line'>  LET toPrint = (
</span><span class='line'>    quant &gt; 1 ? 
</span><span class='line'>      CONCAT(TO_STRING(quant), " bottles of beer on the wall, ", TO_STRING(quant), " bottles of beer.") : 
</span><span class='line'>      (quant == 1 ? 
</span><span class='line'>        "1 bottle of beer on the wall, 1 bottle of beer." :
</span><span class='line'>        "No more bottles of beer on the wall, no more bottles of beer."
</span><span class='line'>      )
</span><span class='line'>  )
</span><span class='line'> 
</span><span class='line'>  LET suffix = (
</span><span class='line'>    quant &gt; 2 ? 
</span><span class='line'>      CONCAT(TO_STRING(quant - 1), " bottles of beer on the wall.") :
</span><span class='line'>      (quant == 2 ? 
</span><span class='line'>        "1 bottle of beer on the wall." :
</span><span class='line'>        "no more bottles of beer on the wall."
</span><span class='line'>      )
</span><span class='line'>  )
</span><span class='line'> 
</span><span class='line'>  LET result = (
</span><span class='line'>    quant &gt; 0 ? 
</span><span class='line'>      CONCAT(toPrint, "\nTake one down, pass it around, ", suffix) : 
</span><span class='line'>      CONCAT(toPrint, "\nGo to the store and buy some more, 99 bottles of beer on the wall.")
</span><span class='line'>  )
</span><span class='line'>
</span><span class='line'>  RETURN result</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AQL Improvements for 2.4]]></title>
    <link href="http://jsteemann.github.io/blog/2014/12/12/aql-improvements-for-24/"/>
    <updated>2014-12-12T23:35:08+01:00</updated>
    <id>http://jsteemann.github.io/blog/2014/12/12/aql-improvements-for-24</id>
    <content type="html"><![CDATA[<p>While on a retreat in Belgium, we found some spare time to
work on improvements for AQL. These will be shipped with
ArangoDB version 2.4, and are already available in the devel
version for testing from now on.</p>

<p>Here&rsquo;s a short overview of the improvements:</p>

<!-- more -->


<h1>COLLECT WITH COUNT</h1>

<p>A common use case in query languages is to count the number of
documents returned by a query. The AQL solution for this has been
to use the <code>LENGTH</code> function and a subquery:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN LENGTH((
</span><span class='line'>  FOR doc IN collection 
</span><span class='line'>    FILTER doc.someAttribute == someValue
</span><span class='line'>    RETURN doc
</span><span class='line'>  )
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>This works but is probably unintuitive for people which have
used SQL for years.</p>

<p>We therefore now allow using the following alternative syntax,
using the new <code>COLLECT ... WITH COUNT INTO ...</code> clause:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection
</span><span class='line'>  FILTER doc.someAttribute == someValue
</span><span class='line'>  COLLECT WITH COUNT INTO length
</span><span class='line'>  RETURN length</span></code></pre></td></tr></table></div></figure>


<p>This query returns just the total number of matches, but not the
matches themselves. As this query is made for counting only, it
can be executed more efficiently than the original query.
In the query with the <code>COUNT INTO ...</code> clause, the documents found
by the filter condition will only be counted and then instantly
discarded. They will not be shipped around inside the query, from
the subquery to the top level into the <code>LENGTH()</code> function.</p>

<p>This new variant will be drastically faster than the old variant
if there is no filter condition at all. When there is a filter
condition, evaluating the filter condition might be the most computationally
expensive part of the query. But even then, the new variant should
be faster than the old one and use less memory.</p>

<p>As a bonus, there is no need to use a subquery anymore, though the
subquery variant is still fully supported and will be.</p>

<p><code>COLLECT ... WITH COUNT</code> also works for counting the number of items
per group:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection
</span><span class='line'>  COLLECT value = doc.someAttribute WITH COUNT INTO length
</span><span class='line'>  RETURN { value: value, length : length }</span></code></pre></td></tr></table></div></figure>


<p>This returns the number of matches for each distinct <code>value</code>.</p>

<p>A quick unscientific benchmark reveals that the specialized
<code>WITH COUNT</code> clause seems to be faster than the old variant.
The following results show the differences for a collection with
500,000 small documents:</p>

<p>The old variant that counts the number of documents per age runs
in 4.75 seconds on my laptop:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection
</span><span class='line'>  FILTER doc.age &lt; 20 
</span><span class='line'>  COLLECT age = doc.age INTO g 
</span><span class='line'>  RETURN { age: age, length: LENGTH(g) }</span></code></pre></td></tr></table></div></figure>


<p>The new variant produces the same result, but runs in 0.6 seconds locally:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection 
</span><span class='line'>  COLLECT age = doc.age WITH COUNT INTO length 
</span><span class='line'>  RETURN { age: age, length: length }</span></code></pre></td></tr></table></div></figure>


<p>A notable speedup can also be observed if only a fraction of the
groups is built (here: 1/8). The old variant for this runs in 0.6
seconds:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection
</span><span class='line'>  FILTER doc.age &lt; 20 
</span><span class='line'>  COLLECT age = doc.age INTO g 
</span><span class='line'>  RETURN { age: age, length: LENGTH(g) }</span></code></pre></td></tr></table></div></figure>


<p>The new variant runs in 0.12 seconds:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection 
</span><span class='line'>  FILTER doc.age &lt; 20 
</span><span class='line'>  COLLECT age = doc.age WITH COUNT INTO length 
</span><span class='line'>  RETURN { age: age, length: length }</span></code></pre></td></tr></table></div></figure>


<p>The absolute times may vary greatly depending on the type of documents and
the hardware used, but in general the new variant should provide a
speedup.</p>

<h1>COLLECT with group expression</h1>

<p>Finally, <code>COLLECT ... INTO</code> has been extended to support just another variant
that can reduce the amount of copying inside a query.</p>

<p>Let&rsquo;s have a look at this example query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection 
</span><span class='line'>  COLLECT age = doc.age INTO g
</span><span class='line'>  RETURN { age: age, maxDate: MAX(g[*].doc.dateRegistered) }</span></code></pre></td></tr></table></div></figure>


<p>In the above query, for each distinct <code>age</code> value, all documents are collected
into variable <code>g</code>. When the collecting phase is over, there will be an iteration
over all the collected documents again, to extract their <code>dateRegistered</code> value.
After that, the <code>dateRegistered</code> values will be passed into the <code>MAX()</code> function.</p>

<p>This query can be made more efficient now as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection 
</span><span class='line'>  COLLECT age = doc.age INTO g = doc.dateRegistered
</span><span class='line'>  RETURN { age: age, maxDate: MAX(g) }</span></code></pre></td></tr></table></div></figure>


<p>The new thing about this variant is the expression following the <code>INTO</code>.
Having an expression there allows controlling what values are collected for
each group. Using a projection expression here can greatly reduce the
amount of copying afterwards, and thus make the query more efficient than if
it had to copy the entire documents.</p>

<h1>Removing filters covered by indexes</h1>

<p><code>FILTER</code> conditions which are completely covered by indexes will
now be removed from the execution plan if it is safe to do so.
Dropping the <code>FILTER</code> statements allows the optimizer to get rid
of not only the <em>FilterNode</em>, but also its corresponding <em>CalculationNode</em>.
This will save a lot of computation if the condition needs to be checked
for many documents.</p>

<p>For example, imagine the following query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection
</span><span class='line'>  FILTER doc.value &lt; 10 
</span><span class='line'>  RETURN doc</span></code></pre></td></tr></table></div></figure>


<p>If there is a (skiplist) index on <code>doc.value</code>, the optimizer may
decide to use this index. It will replace the query&rsquo;s <em>EnumerateCollectionNode</em>
with an <em>IndexRangeNode</em> instead first. The <em>IndexRangeNode</em> will scan the index
on <code>doc.value</code> for the range [-inf, 10).</p>

<p>Following that, the optimizer rule <code>remove-filter-covered-by-index</code>
should fire and detect that the <code>FILTER</code> condition is already covered
by the <em>IndexRangeNode</em> alone. It can thus remove the <em>FilterNode</em>.
This also makes the <em>CalculationNode</em> of the <em>FilterNode</em> obsolete,
so these two nodes will be removed and computation is saved.</p>

<h1>Removing brackets for subquery function call parameters</h1>

<p>Since the beginning of AQL, the parser required the user the put
subqueries that were used as function parameters inside two pairs of
brackets.</p>

<p>For example, the following query did not parse in 2.3 and before:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN LENGTH(FOR doc IN collection RETURN doc)</span></code></pre></td></tr></table></div></figure>


<p>Instead, it needed to be written as:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN LENGTH((FOR doc IN collection RETURN doc))</span></code></pre></td></tr></table></div></figure>


<p>If you didn&rsquo;t notice the difference, the latter version of the query had
duplicate parentheses. The requirement to use duplicate parentheses has
caused several support questions over time, and this can be taken as a
proof that it was not intuitive.</p>

<p>The requirement for duplicate parentheses was an artifact required by the
AQL parser grammar in order to parse the query correctly.</p>

<p>For 2.4, the AQL grammar has been cleaned up in this respect.
Duplicate parentheses are still allowed and work fine in 2.4 but they are not
required anymore. This should make the first steps with AQL a bit easier
and more intuitive.</p>

<p>We&rsquo;re 1.5 days into our retreat now. Maybe there&rsquo;ll be some more
AQL-related improvements in the end. Let&rsquo;s see.</p>
]]></content>
  </entry>
  
</feed>
