<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[J@ArangoDB]]></title>
  <link href="http://jsteemann.github.io/atom.xml" rel="self"/>
  <link href="http://jsteemann.github.io/"/>
  <updated>2015-07-28T23:34:59+02:00</updated>
  <id>http://jsteemann.github.io/</id>
  <author>
    <name><![CDATA[jsteemann]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Set Up Fish Completion for ArangoDB]]></title>
    <link href="http://jsteemann.github.io/blog/2015/07/28/how-to-set-up-fish-completion-for-arangodb/"/>
    <updated>2015-07-28T23:10:32+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/07/28/how-to-set-up-fish-completion-for-arangodb</id>
    <content type="html"><![CDATA[<p>While experimenting with the <a href="http://fishshell.com/">fish shell</a> on my laptop
I found <em>fish</em> has a slightly different (but much fancier) tab-completion mechanism
than <em>bash</em>.</p>

<p>Re-using the <a href="http://jsteemann.github.io/blog/2014/10/22/how-to-set-up-bash-completion-for-arangodb/">existing completer for bash</a>
wouldn&rsquo;t work, so I put together some dedicated completions files for <em>fish</em>.</p>

<!-- more -->


<p>The files can be downloaded here:
<a href="http://jsteemann.github.io/downloads/code/completions-fish-2.5">2.5</a> <a href="http://jsteemann.github.io/downloads/code/completions-fish-2.6">2.6</a></p>

<p>To activate these completions, copy the appropriate file into <code>~/.arangodb-completions</code>
and source it from <em>fish</em>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">source</span> ~/.arangodb-completions
</span></code></pre></td></tr></table></div></figure>


<p>In order to permanently activate these completions, you may source the completions file
from your <code>config.fish</code> file, which is normally located in directory <code>~/.config/fish</code>.</p>

<h2>Full setup</h2>

<p>The following command, executed in <em>fish</em>, should install the completions for 2.6 and
activate them:</p>

<figure class='code'><figcaption><span>activate completions for ArangoDB 2.6 </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget -O ~/.arangodb-completions https://jsteemann.github.io/downloads/code/completions-fish-2.6
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;source ~/.arangodb-completions&quot;</span> &gt;&gt; ~/.config/fish/config.fish
</span><span class='line'><span class="nb">source</span> ~/.arangodb-completions
</span></code></pre></td></tr></table></div></figure>


<p>To install fish completions for ArangoDB 2.5, the command is:</p>

<figure class='code'><figcaption><span>activate completions for ArangoDB 2.5 </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget -O ~/.arangodb-completions https://jsteemann.github.io/downloads/code/completions-fish-2.5
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;source ~/.arangodb-completions&quot;</span> &gt;&gt; ~/.config/fish/config.fish
</span><span class='line'><span class="nb">source</span> ~/.arangodb-completions
</span></code></pre></td></tr></table></div></figure>


<p>To see it in action, type <code>arangosh --</code> in <em>fish</em> and then press <strong>TAB</strong>:</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/fish-completion.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing RETURN DISTINCT]]></title>
    <link href="http://jsteemann.github.io/blog/2015/07/27/introducing-return-distinct/"/>
    <updated>2015-07-27T11:48:41+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/07/27/introducing-return-distinct</id>
    <content type="html"><![CDATA[<p>Last week saw the addition of the <code>RETURN DISTINCT</code> for AQL queries.
This is a new shortcut syntax for making result sets unique.</p>

<p>For this purpose it can be used as an easier-to-memorize alternative for
the already existing <code>COLLECT</code> statement. <code>COLLECT</code> is very flexible and
can be used for multiple purposes, but it is syntactic overkill for making
a result set unique.</p>

<p>The new <code>RETURN DISTINCT</code> syntax makes queries easier to write and understand.</p>

<!-- more -->


<p>Here&rsquo;s a non-scientific proof for this claim:</p>

<p>Compare the following queries, which both return each distinct <code>age</code> attribute
value from the collection:</p>

<figure class='code'><figcaption><span>making result set unique using COLLECT</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection
</span><span class='line'>  COLLECT age = doc.age
</span><span class='line'>  RETURN age</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>making result set unique using RETURN DISTINCT</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection
</span><span class='line'>  RETURN DISTINCT doc.age</span></code></pre></td></tr></table></div></figure>


<p>Clearly, the query using <code>RETURN DISTINCT</code> is more intuitive, especially for
AQL beginners. Apart from that, using <code>RETURN DISTINCT</code> will save a bit of typing
compared to the longer <code>COLLECT</code>-based query.</p>

<p>Internally both <code>COLLECT</code> and <code>RETURN DISTINCT</code> will work by creating an
<code>AggregateNode</code>. The optimizer will try the <em>sorted</em> and the <em>hashed</em> variants
for both, so they should perform about the same.</p>

<p>However, the result of a <code>RETURN DISTINCT</code> does not have any guaranteed order,
so the optimizer will not insert a post-<code>SORT</code> for it. It may do so for a regular
<code>COLLECT</code>.</p>

<p>As mentioned before, <code>COLLECT</code> is more flexible than <code>RETURN DISTINCT</code>.
Notably, <code>COLLECT</code> is superior to <code>RETURN DISTINCT</code> when the result set should
be made unique using more than one criterion, e.g.</p>

<figure class='code'><figcaption><span>using more than one criterion for uniqueness</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection
</span><span class='line'>  COLLECT status = doc.status, age = doc.age, 
</span><span class='line'>  RETURN { status, age }</span></code></pre></td></tr></table></div></figure>


<p>This is currently not achievable via <code>RETURN DISTINCT</code>, as it only works
with a single criterion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AQL Object Literal Simplification]]></title>
    <link href="http://jsteemann.github.io/blog/2015/07/27/aql-object-literal-simplification/"/>
    <updated>2015-07-27T11:33:09+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/07/27/aql-object-literal-simplification</id>
    <content type="html"><![CDATA[<p>ArangoDB&rsquo;s <code>devel</code> branch recently saw a change that makes writing
some AQL queries a bit simpler.</p>

<p>The change introduces an optional shorthand notation for object attributes
in the style of ES6&rsquo;s enhanced object literal notation.</p>

<!-- more -->


<p>For example, consider the following query that groups values by <code>age</code>
attribute and counts the number of documents per distinct <code>age</code> value:</p>

<figure class='code'><figcaption><span>example query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection 
</span><span class='line'>  COLLECT age = doc.age WITH COUNT INTO length
</span><span class='line'>  RETURN { age: age, length: length } </span></code></pre></td></tr></table></div></figure>


<p>The object declaration in the last line of the query is somewhat redundant
because one has to type identical attribute names and values:</p>

<figure class='code'><figcaption><span>the long notation for object literals</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN { age: age, length: length } </span></code></pre></td></tr></table></div></figure>


<p>In this case, the new shorthand notation simplifies the <code>RETURN</code> to:</p>

<figure class='code'><figcaption><span>using shorthand notation for object literals </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN { age, length } </span></code></pre></td></tr></table></div></figure>


<p>In general, the shorthand notation can be used for all object literals when
there is an attribute name that refers to a query variable of the same name.</p>

<p>It can also be mixed with the longer notation, e.g.:</p>

<figure class='code'><figcaption><span>mixing long and shorthand notation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN { age, length, dateCreated: DATE_NOW() } </span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ES6 Features in ArangoDB 2.7]]></title>
    <link href="http://jsteemann.github.io/blog/2015/07/14/es6-features-in-arangodb-27/"/>
    <updated>2015-07-14T20:33:55+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/07/14/es6-features-in-arangodb-27</id>
    <content type="html"><![CDATA[<p>ArangoDB 2.6 uses V8 engine version 3.31.74.1 for running its own and all user-defined
JavaScript code. In ArangoDB 2.7 (currently in development), we have upgraded V8 to
version 4.3.61.</p>

<p>The new V8 version in ArangoDB 2.7 provides several additional ES6 features that can
be used to improve JavaScript usability and code quality. This blog post showcases <em>strong
mode</em> and <em>rest parameters</em>, and also shows how to activate <em>TurboFan</em>, V8&rsquo;s new JIT compiler
for JavaScript.</p>

<p>ArangoDB 2.7 is in development right now, but it can be tried today by
<a href="http://jsteemann.github.io/blog/2014/10/16/how-to-compile-arangodb-from-source/">compiling it from source</a>.</p>

<!-- more -->


<h2>JavaScript strong mode</h2>

<p>V8 v4 comes with an optional and experimental <em>strong mode</em>. This mode provides only a
subset of JavaScript, with the idea of intentionally deactivating some of
<a href="http://archive.oreilly.com/pub/a/javascript/excerpts/javascript-good-parts/bad-parts.html">JavaScript&rsquo;s bad parts</a>.
It is based on <em>strict mode</em>, but goes further.</p>

<p>Committing to <em>strong mode</em> may not only provide better and stronger semantics, but may
also enable more optimization opportunities for the JavaScript compiler. For example, the
strong mode disables JavaScript&rsquo;s <em>with</em> statement and <code>delete</code>! Additionally, <code>var</code> cannot
be used anymore but is deprecated in favor of <code>let</code> and <code>const</code>.</p>

<p>The proposal for the strong mode can be found
<a href="https://docs.google.com/document/d/1Qk0qC4s_XNCLemj42FqfsRLp49nDQMZ1y7fwf5YjaI4/view">here</a>,
and the V8 team also has a <a href="https://developers.google.com/v8/experiments">page about it</a>.</p>

<p>Strong mode must be turned on explicitly. This can be done by adding the <code>--strong-mode=true</code>
v8 option when starting <em>arangod</em> or <em>arangosh</em>:</p>

<figure class='code'><figcaption><span>enabling strong mode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>arangosh  --javascript.v8-options<span class="o">=</span><span class="s2">&quot;--strong_mode=true&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that I am using <em>arangosh</em> above, but the same would work for <em>arangod</em>, too, so the feature
can be used for Foxx routes as well.</p>

<h2>Rest parameters</h2>

<p>How to pass a variable number of arguments to a function?</p>

<p>C and C++ programmers have been using and abusing the ellipsis (<code>...</code>) and <code>__VA_ARGS__</code> features
of the C preprocessor for a long time. Then came the macros of <code>stdarg.h</code> / <code>cstdarg</code>,
until C++11 really improved the situation with <code>std::initializer_list</code> and variadic templates.</p>

<p>In JavaScript, one can use the <code>arguments</code> object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">logSimple</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">value</span> <span class="nx">of</span> <span class="nx">arguments</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">logSimple</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;baz&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This does the job, and the above will print something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2015-07-14T19:01:51Z [5245] INFO foo
</span><span class='line'>2015-07-14T19:01:51Z [5245] INFO bar
</span><span class='line'>2015-07-14T19:01:51Z [5245] INFO baz</span></code></pre></td></tr></table></div></figure>


<p>This is fine as long as all arguments shall be treated the same way. But what if some
arguments have a designated meaning and should be treated specially?</p>

<p>The solution is to use <em>ES6 rest parameters</em>. The last parameter in an argument list can be
prefixed with <code>...</code> to capture any number of function parameters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">logWithContext</span> <span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="p">...</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="nx">value</span> <span class="nx">of</span> <span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[&#39;</span> <span class="o">+</span> <span class="nx">context</span> <span class="o">+</span> <span class="s1">&#39;] &#39;</span> <span class="o">+</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">logWithContext</span><span class="p">(</span><span class="s2">&quot;es6&quot;</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;baz&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>As can be seen, the <code>logWithContext</code> function specially handles its <code>context</code> argument, while
we can still pass any number of further parameters into it. Here&rsquo;s what the above will print:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2015-07-14T19:07:27Z [5245] INFO [es6]: foo
</span><span class='line'>2015-07-14T19:07:27Z [5245] INFO [es6]: bar
</span><span class='line'>2015-07-14T19:07:27Z [5245] INFO [es6]: baz</span></code></pre></td></tr></table></div></figure>


<p>Note that rest parameters cannot be used with the default configuration and must be turned on
explicitly in <em>arangosh</em> or <em>arangod</em>.</p>

<p>The startup option to turn them on is:</p>

<figure class='code'><figcaption><span>enabling rest parameters</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>arangosh --javascript.v8-options<span class="o">=</span><span class="s2">&quot;--harmony_rest_parameters=true&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>TurboFan</h2>

<p>The new V8 version comes with <em>TurboFan</em>, a new JIT compiler for JavaScript.
According to <a href="http://blog.chromium.org/2015/07/revving-up-javascript-performance-with.html">this post</a>
it is already used in Chrome for compiling certain types of JavaScript code.</p>

<p>As fas as I can see, it is turned off by default in our version of V8, and the compiler
also seems to be rather experimental. To get an idea of what it can already do and where
its limits are, it can already be tried in ArangoDB 2.7.</p>

<p>By default, it seems to be turned off. Using the following startup option, it can be turned on for
JavaScript functions with a certain name pattern (i.e. all function names starting with <em>testTurboFan</em>):</p>

<figure class='code'><figcaption><span>starting ArangoShell with TurboFan enabled</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>arangosh --javascript.v8-options<span class="o">=</span><span class="s2">&quot;--turbo-filter=testTurboFan*&quot;</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without turning on V8 tracing, one will not be able to tell which compiler is used to compile a
specific function. To turn it on and actually confirm V8 is using TurboFan, use these options:</p>

<figure class='code'><figcaption><span>starting ArangoShell with TurboFan and debug output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>arangosh --javascript.v8-options<span class="o">=</span><span class="s2">&quot;--always-opt --trace_opt --turbo-filter=testTurboFan*&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will be very verbose, but it is good to tell which internal compiler is used to compile a given
JavaScript function.</p>

<p>For example, after starting the ArangoShell with the above options, run the following test code
to see that V8 uses TurboFan for compiling the first two functions (which match the name pattern),
and Crankshaft for the third (which does not match the name pattern):</p>

<figure class='code'><figcaption><span>test code for invoking the TurboFan compiler</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">testTurboFan1</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;turbo-fan 1&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">testTurboFan1</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">testTurboFan2</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;turbo-fan 2&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">testTurboFan2</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">testSomethingElse</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;something else&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">testSomethingElse</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s the confirmation that TurboFan is used:</p>

<figure class='code'><figcaption><span>debug output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>[compiling method 0x31ca8804e351 &lt;JS Function testTurboFan1 (SharedFunctionInfo 0x31ca8804e171)&gt; using TurboFan]
</span><span class='line'>...
</span><span class='line'>[compiling method 0x31ca8804e7f9 &lt;JS Function testTurboFan2 (SharedFunctionInfo 0x31ca8804e619)&gt; using TurboFan]
</span><span class='line'>...
</span><span class='line'>[compiling method 0x31ca8804ec71 &lt;JS Function testSomethingElse (SharedFunctionInfo 0x31ca8804ea91)&gt; using Crankshaft]
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AQL Improvements for 2.7]]></title>
    <link href="http://jsteemann.github.io/blog/2015/06/17/aql-improvements-for-27/"/>
    <updated>2015-06-17T12:35:16+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/06/17/aql-improvements-for-27</id>
    <content type="html"><![CDATA[<p>With ArangoDB 2.6 being in beta already, it&rsquo;s time to look at some
features scheduled for 2.7. Today I&rsquo;ll showcase a few AQL parser
improvements that are present in the <code>devel</code> branch already, which will
be the foundation for the 2.7 release.</p>

<!-- more -->


<h2>Star operator</h2>

<p>The already existing star operator (<code>[*]</code>) is much more flexible in 2.7
than in previous ArangoDB versions. It now allows filtering the values it
iterates over, and optional projections.</p>

<p>These features will be demonstrated using the following example member data:</p>

<figure class='code'><figcaption><span>example data for queries</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;sir alfred&quot;</span><span class="p">,</span> <span class="nt">&quot;age&quot;</span> <span class="p">:</span> <span class="mi">60</span><span class="p">,</span> <span class="nt">&quot;likes&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;lettuce&quot;</span><span class="p">,</span> <span class="s2">&quot;tortoises&quot;</span> <span class="p">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;mozquito&quot;</span><span class="p">,</span> <span class="nt">&quot;age&quot;</span> <span class="p">:</span> <span class="mi">15</span><span class="p">,</span> <span class="nt">&quot;likes&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;skateboards&quot;</span><span class="p">,</span> <span class="s2">&quot;music&quot;</span> <span class="p">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;murphy&quot;</span><span class="p">,</span> <span class="nt">&quot;age&quot;</span> <span class="p">:</span> <span class="mi">28</span><span class="p">,</span> <span class="nt">&quot;likes&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;juice&quot;</span><span class="p">,</span> <span class="s2">&quot;tarts&quot;</span><span class="p">,</span> <span class="s2">&quot;cakes&quot;</span> <span class="p">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;helga&quot;</span><span class="p">,</span> <span class="nt">&quot;age&quot;</span> <span class="p">:</span> <span class="mi">52</span><span class="p">,</span> <span class="nt">&quot;likes&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;home&quot;</span><span class="p">,</span> <span class="s2">&quot;garden&quot;</span><span class="p">,</span> <span class="s2">&quot;tortoises&quot;</span><span class="p">,</span> <span class="s2">&quot;cakes&quot;</span> <span class="p">]</span> <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To return all members with an age of 40 or higher and that also like tortoises,
we can now combine the star operator with an inline <code>FILTER</code> expression:</p>

<figure class='code'><figcaption><span>star operator with inline FILTER</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN @members[* FILTER CURRENT.age &gt;= 40 && "tortoises" IN CURRENT.likes]</span></code></pre></td></tr></table></div></figure>


<p>The inline <code>FILTER</code> expression has access to the current array element via the
pseudo-variable <code>CURRENT</code>. The <code>FILTER</code> expression can thus access the element&rsquo;s
attributes and sub-attributes, and also use them in function expressions.</p>

<p>The above query will return only two array members as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;sir alfred&quot;</span><span class="p">,</span> <span class="nt">&quot;age&quot;</span> <span class="p">:</span> <span class="mi">60</span><span class="p">,</span> <span class="nt">&quot;likes&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;lettuce&quot;</span><span class="p">,</span> <span class="s2">&quot;tortoises&quot;</span> <span class="p">]</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;helga&quot;</span><span class="p">,</span> <span class="nt">&quot;age&quot;</span> <span class="p">:</span> <span class="mi">52</span><span class="p">,</span> <span class="nt">&quot;likes&quot;</span> <span class="p">:</span> <span class="p">[</span> <span class="s2">&quot;home&quot;</span><span class="p">,</span> <span class="s2">&quot;garden&quot;</span><span class="p">,</span> <span class="s2">&quot;tortoises&quot;</span><span class="p">,</span> <span class="s2">&quot;cakes&quot;</span> <span class="p">]</span> <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s also possible to extract just a specific sub-attribute of each result value:</p>

<figure class='code'><figcaption><span>extracting just a sub-attribute</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN @members[* FILTER CURRENT.age &gt;= 40 && "tortoises" IN CURRENT.likes].name</span></code></pre></td></tr></table></div></figure>


<p>This will return:</p>

<figure class='code'><figcaption><span>query result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;sir alfred&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;helga&quot;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we don&rsquo;t want to return the whole match but a single attribute is not enough, the
star operator can be used in combination with arbitrary projections, too.</p>

<p>The following query extracts the matching members a <code>FILTER</code> as above, but now only
returns each member&rsquo;s <code>age</code> attribute and the number of values in the member&rsquo;s <code>likes</code>
attribute:</p>

<figure class='code'><figcaption><span>extracting with a FILTER and a projection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN @members[* FILTER CURRENT.age &gt;= 40 && "tortoises" IN CURRENT.likes RETURN { 
</span><span class='line'>  name: CURRENT.name, 
</span><span class='line'>  likes: LENGTH(CURRENT.likes) 
</span><span class='line'>}]</span></code></pre></td></tr></table></div></figure>


<p>This will produce the following result:</p>

<figure class='code'><figcaption><span>query result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;sir alfred&quot;</span><span class="p">,</span> <span class="nt">&quot;likes&quot;</span> <span class="p">:</span> <span class="mi">2</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;name&quot;</span> <span class="p">:</span> <span class="s2">&quot;helga&quot;</span><span class="p">,</span> <span class="nt">&quot;likes&quot;</span> <span class="p">:</span> <span class="mi">4</span> <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If only a certain number of values is required, the star operator can be combined
with a <code>LIMIT</code> clause, too. This is useful for testing whether at least one of the
array members satisfies a <code>FILTER</code> condition:</p>

<figure class='code'><figcaption><span>limiting the number of results</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN @members[* FILTER "garden" IN CURRENT.likes LIMIT 1]</span></code></pre></td></tr></table></div></figure>


<p>Overall, the star operator is now much more powerful than before, so in many queries
it can replace full-blown <code>FOR</code> loops and subqueries when the goal simply is to iterate
over sub-parts of a result.</p>

<h2>Multi-star operator</h2>

<p>In 2.7 there is now also a <em>multi-star</em> operator (<code>[**]</code>). This operator can be used to
iterate over an array, too. In addition it will also flatten its input, so it can be used
for collapsing nested array structures.</p>

<p>This is useful in cases where a flat result is required but the single star operator would
return a nested array.</p>

<p>Consider this query with the single star operator:</p>

<figure class='code'><figcaption><span>extracting nested arrays</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN @members[* FILTER CURRENT.age &gt;= 40].likes[*]</span></code></pre></td></tr></table></div></figure>


<p>This will produce:</p>

<figure class='code'><figcaption><span>result of single star query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">[</span> <span class="s2">&quot;lettuce&quot;</span><span class="p">,</span> <span class="s2">&quot;tortoises&quot;</span> <span class="p">],</span>
</span><span class='line'>  <span class="p">[</span> <span class="s2">&quot;home&quot;</span><span class="p">,</span> <span class="s2">&quot;garden&quot;</span><span class="p">,</span> <span class="s2">&quot;tortoises&quot;</span><span class="p">,</span> <span class="s2">&quot;cakes&quot;</span> <span class="p">]</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get a collapsed array, we can employ the double star operator:</p>

<figure class='code'><figcaption><span>extracting flattend arrays</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN @members[* FILTER CURRENT.age &gt;= 40].likes[**]</span></code></pre></td></tr></table></div></figure>


<p>Then we&rsquo;ll get:</p>

<figure class='code'><figcaption><span>result of double star query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;lettuce&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;tortoises&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;home&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;garden&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;tortoises&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;cakes&quot;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: the result of this query can also be made unique using the standard AQL
function <code>UNIQUE()</code>.</p>

<p>The star operator in 2.7 can have any number of levels. Using it with a single
star will simply iterate over the input array, using it with two stars will
collapse one level of the input, using it with three stars will collapse two
levels of the input etc.</p>

<h2>Subquery result usage</h2>

<p>While working on the AQL parser anyway, the grammar has been modified so
it allows a few more types of expressions.</p>

<p>For example, the result of a subquery can now be used as an array and the
subquery results can be accessed by position directly:</p>

<figure class='code'><figcaption><span>accessing subquery results by position</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN (
</span><span class='line'>  FOR i IN [ 1, 2, 3 ] 
</span><span class='line'>    RETURN i
</span><span class='line'>)[0]</span></code></pre></td></tr></table></div></figure>


<p>The trailing <code>[0]</code> led to a parse error in previous versions. To make this
work in previous versions, the subquery result needs to be captured in an
extra variable using <code>LET</code> before accessing the 0th member of that variable:</p>

<figure class='code'><figcaption><span>workaround for accessing subquery results by position</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET temp = (
</span><span class='line'>  FOR i IN [ 1, 2, 3 ] 
</span><span class='line'>    RETURN i
</span><span class='line'>)
</span><span class='line'>RETURN temp[0]</span></code></pre></td></tr></table></div></figure>


<p>The parser generalizations now also allow to use the star operator directly
on a subquery result and access its individual members:</p>

<figure class='code'><figcaption><span>expanding subquery results using star operator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN (
</span><span class='line'>  FOR member IN [ 
</span><span class='line'>    { name: "sir alfred" }, 
</span><span class='line'>    { name: "mozquito" }
</span><span class='line'>  ]
</span><span class='line'>   RETURN member
</span><span class='line'>)[*].name</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parsing PHP Arrays With PHP]]></title>
    <link href="http://jsteemann.github.io/blog/2015/06/16/parsing-php-arrays-with-php/"/>
    <updated>2015-06-16T23:37:48+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/06/16/parsing-php-arrays-with-php</id>
    <content type="html"><![CDATA[<p>By accident I found <a href="http://stackoverflow.com/questions/30877671/how-i-can-convert-a-string-format-array-to-array-type-in-php">this StackOverflow question</a>
about how to convert a PHP string with array data into an actual PHP array variable.</p>

<p>For example, if your application gets this string from somewhere:</p>

<figure class='code'><figcaption><span>example string data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$string</span> <span class="o">=</span> <span class="s2">&quot;array(array(&#39;aaa&#39;,&#39;bbb&#39;,&#39;ccc&#39;,&#39;ddd&#39;),array(&#39;AAA&#39;,&#39;BBB&#39;,&#39;CCC&#39;,&#39;DDD&#39;))&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>How do you convert this into a PHP array variable so you can access the individual
array elements? This is what we want to be able to do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nx">magicallyConvertStringToArray</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>  <span class="c1">// should be &#39;aaa&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>How do we get to our variable?</p>

<!-- more -->


<p>The obvious solution #1 is to agree on another data exchange format (e.g. JSON)
and simply use that. PHP has built-in functions for <a href="http://www.php.net/manual/en/function.json-encode.php">JSON stringification</a>
and <a href="http://www.php.net/manual/en/function.json-decode.php">JSON parsing</a>.</p>

<h2>Eval?</h2>

<p>But what if the data format really has to stay like this and you cannot change it?
Then the obvious simple solution would be to <code>eval()</code> the string and capture the result
in a new variable.</p>

<p>Voila le array:</p>

<figure class='code'><figcaption><span>using eval</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="k">eval</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>  <span class="c1">// &#39;aaa&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But everyone knows that <code>eval</code> is evil and should be avoided wherever possible &ndash; especially when
being run on strings fetched from remote data sources.</p>

<h2>Writing a PHP data parser in PHP</h2>

<p>Remembering that PHP has a built-in tokenizer for PHP code, we could also make use of
this and write a small parser for PHP array data.
Note that I wouldn&rsquo;t recommend writing your own parser if there are other options. But it&rsquo;s
a last resort, and for the task at hand it should be relatively easy.</p>

<p>This is because we&rsquo;ll only have to deal with arbitrarily nested arrays and some scalar value
types (strings, numbers, bool, null). We don&rsquo;t expect to see serialized object instances in our
data. And, not to forget, PHP comes with a built-in tokenizer for PHP code, and we&rsquo;ll let
it do most of the work.</p>

<p>Before the string can be parsed, it must be turned into PHP code. This can be achieved
by prepending <code>&lt;?php</code> to it (otherwise the tokenizer would interpret the string as an HTML
string). We can then use PHP&rsquo;s <code>token_get_all()</code> function to tokenize the string contents for us.</p>

<p>We can immediately remove all T_WHITESPACE tokens from the list of tokens, because whitespace
is irrelevant for our parsing. For easier handling of tokens, we let a class <code>Tokens</code> handle
the tokens. This class provides functions for matching, consuming and peeking into tokens:</p>

<figure class='code'><figcaption><span>class for managing the tokens</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// class to manage tokens</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Tokens</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$tokens</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span> <span class="p">(</span><span class="nv">$code</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// construct PHP code from string and tokenize it</span>
</span><span class='line'>    <span class="nv">$tokens</span> <span class="o">=</span> <span class="nb">token_get_all</span><span class="p">(</span><span class="s2">&quot;&lt;?php &quot;</span> <span class="o">.</span> <span class="nv">$code</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// kick out whitespace tokens</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span> <span class="o">=</span> <span class="nb">array_filter</span><span class="p">(</span><span class="nv">$tokens</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$token</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="o">!</span> <span class="nb">is_array</span><span class="p">(</span><span class="nv">$token</span><span class="p">)</span> <span class="o">||</span> <span class="nv">$token</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!==</span> <span class="nx">T_WHITESPACE</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="c1">// remove start token (&lt;?php)</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">done</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">pop</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// consume the token and return it</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">done</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;already at end of tokens!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">array_shift</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">peek</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// return next token, don&#39;t consume it</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">done</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;already at end of tokens!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">doesMatch</span> <span class="p">(</span><span class="nv">$what</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$token</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">peek</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">is_string</span><span class="p">(</span><span class="nv">$what</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span> <span class="nb">is_array</span><span class="p">(</span><span class="nv">$token</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$token</span> <span class="o">===</span> <span class="nv">$what</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">is_int</span><span class="p">(</span><span class="nv">$what</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">is_array</span><span class="p">(</span><span class="nv">$token</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$token</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="nv">$what</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">forceMatch</span> <span class="p">(</span><span class="nv">$what</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">doesMatch</span><span class="p">(</span><span class="nv">$what</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">is_int</span><span class="p">(</span><span class="nv">$what</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;unexpected token - expecting &quot;</span> <span class="o">.</span> <span class="nb">token_name</span><span class="p">(</span><span class="nv">$what</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;unexpected token - expecting &quot;</span> <span class="o">.</span> <span class="nv">$what</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">// consume the token</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With all the tokenization being done, we need a parser that understands the meaning
of the individual tokens and puts them together in a meaningful way. Here&rsquo;s a parser
class that can handle simple PHP arrays, string values, int, double and boolean values
plus <code>null</code>:</p>

<figure class='code'><figcaption><span>simple parser class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// parser for simple PHP arrays</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Parser</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">static</span> <span class="nv">$CONSTANTS</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s2">&quot;null&quot;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;true&quot;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;false&quot;</span> <span class="o">=&gt;</span> <span class="k">false</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="nv">$tokens</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Tokens</span> <span class="nv">$tokens</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span> <span class="o">=</span> <span class="nv">$tokens</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">parseValue</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">doesMatch</span><span class="p">(</span><span class="nx">T_CONSTANT_ENCAPSED_STRING</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// strings</span>
</span><span class='line'>      <span class="nv">$token</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">stripslashes</span><span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$token</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">doesMatch</span><span class="p">(</span><span class="nx">T_STRING</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// built-in string literals: null, false, true</span>
</span><span class='line'>      <span class="nv">$token</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$value</span> <span class="o">=</span> <span class="nx">strtolower</span><span class="p">(</span><span class="nv">$token</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">array_key_exists</span><span class="p">(</span><span class="nv">$value</span><span class="p">,</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$CONSTANTS</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$CONSTANTS</span><span class="p">[</span><span class="nv">$value</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;unexpected string literal &quot;</span> <span class="o">.</span> <span class="nv">$token</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// the rest...</span>
</span><span class='line'>    <span class="c1">// we expect a number here</span>
</span><span class='line'>    <span class="nv">$uminus</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">doesMatch</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// unary minus</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">forceMatch</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$uminus</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">doesMatch</span><span class="p">(</span><span class="nx">T_LNUMBER</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// long number</span>
</span><span class='line'>      <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$uminus</span> <span class="o">*</span> <span class="p">(</span><span class="nx">int</span><span class="p">)</span> <span class="nv">$value</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">doesMatch</span><span class="p">(</span><span class="nx">T_DNUMBER</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// double number</span>
</span><span class='line'>      <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$uminus</span> <span class="o">*</span> <span class="p">(</span><span class="nx">double</span><span class="p">)</span> <span class="nv">$value</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;unexpected value token&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">parseArray</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$found</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">forceMatch</span><span class="p">(</span><span class="nx">T_ARRAY</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">forceMatch</span><span class="p">(</span><span class="s2">&quot;(&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">doesMatch</span><span class="p">(</span><span class="s2">&quot;)&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// reached the end of the array</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">forceMatch</span><span class="p">(</span><span class="s2">&quot;)&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$found</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// we must see a comma following the first element</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">forceMatch</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">doesMatch</span><span class="p">(</span><span class="nx">T_ARRAY</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// nested array</span>
</span><span class='line'>        <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parseArray</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">doesMatch</span><span class="p">(</span><span class="nx">T_CONSTANT_ENCAPSED_STRING</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// string</span>
</span><span class='line'>        <span class="nv">$string</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parseValue</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">doesMatch</span><span class="p">(</span><span class="nx">T_DOUBLE_ARROW</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// array key (key =&gt; value)</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">tokens</span><span class="o">-&gt;</span><span class="na">pop</span><span class="p">();</span>
</span><span class='line'>          <span class="nv">$result</span><span class="p">[</span><span class="nv">$string</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parseValue</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// simple string</span>
</span><span class='line'>          <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$string</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parseValue</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">++</span><span class="nv">$found</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally we need some code to invoke the parser:</p>

<figure class='code'><figcaption><span>parser invokation </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// here&#39;s our test string (with intentionally wild usage of whitespace)</span>
</span><span class='line'><span class="nv">$string</span> <span class="o">=</span> <span class="s2">&quot; array (</span><span class="se">\&quot;</span><span class="s2">test</span><span class="se">\&quot;</span><span class="s2"> =&gt; </span><span class="se">\&quot;</span><span class="s2">someValue</span><span class="se">\&quot;</span><span class="s2">, </span>
</span><span class='line'><span class="s2">  array</span><span class="se">\n</span><span class="s2">(&#39;aaa&#39;, &#39;bbb&#39;, &#39;ccc&#39;, array(&#39;ddd&#39;)), </span>
</span><span class='line'><span class="s2">array(&#39;AAA&#39;, &#39;BBB&#39;,&#39;CCC&#39;,&#39;DDD&#39;, null,1, 2, 3,-4, -42.99, -4e32, true, false))&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$tokens</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tokens</span><span class="p">(</span><span class="nv">$string</span><span class="p">);</span>
</span><span class='line'><span class="nv">$parser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Parser</span><span class="p">(</span><span class="nv">$tokens</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nv">$parser</span><span class="o">-&gt;</span><span class="na">parseArray</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// check if the parser matched the whole string or if there&#39;s something left at the end</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nv">$tokens</span><span class="o">-&gt;</span><span class="na">done</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;still tokens left after parsing&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="s2">&quot;RESULT: &quot;</span><span class="p">,</span> <span class="nv">$result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will give us the data in a ready-to-use PHP variable <code>$result</code>, with all the
nested data structures being built correctly.</p>

<p>A few things to note:</p>

<ul>
<li><p>Parsing PHP data with PHP is quite easy because PHP already comes with a tokenizer
for PHP. Parsing a different language with PHP is quite harder, as we would have to
write a language-specific tokenizer first!</p></li>
<li><p>The above code was quickly put together for demonstration purposes. I am pretty sure
it will not cover all cases. Apart from that, it was written to be intuitive and not
to be efficient (i.e. instead modifying the <code>tokens</code> array in place with <code>array_shift()</code>,
we would rather leave that array constant and work with an index into it).</p></li>
<li><p>For grammars more complex than this simple one, don&rsquo;t go with hand-written parsers
but use a parser generator. I am not sure what parser generators are available in the
PHP world, but in C and C++ most people will go with <a href="http://www.gnu.org/software/bison/">GNU Bison</a>
and <a href="http://flex.sourceforge.net/">Flex</a>.</p></li>
<li><p>Writing your own parsers is error-prone even with a parser generator, so <strong>don&rsquo;t do
it if you don&rsquo;t have to</strong>. If you can, use a widely supported data format such as JSON
instead and let <code>json_decode()</code> do all the heavy lifting for you.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding Up Array/object Literal Access]]></title>
    <link href="http://jsteemann.github.io/blog/2015/06/15/speeding-up-array-slash-object-literal-access/"/>
    <updated>2015-06-15T15:56:27+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/06/15/speeding-up-array-slash-object-literal-access</id>
    <content type="html"><![CDATA[<p>Last week some further optimization slipped into 2.6. The optimization can
provide significant speedups in AQL queries using huge array/object bind parameters
and passing them into V8-based functions.</p>

<!-- more -->


<p>It started with an ArangoDB user reporting a specific query to run unexpectedly slow.
The part of the query that caused the problem was simple and looked like this:</p>

<figure class='code'><figcaption><span>problematic query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR doc IN collection
</span><span class='line'>  FILTER doc.attribute == @value
</span><span class='line'>  RETURN TRANSLATE(doc.from, translations, 0)</span></code></pre></td></tr></table></div></figure>


<p>In the original query, <code>translations</code> was a big, constant object literal. Think of
something like the following, but with a lot more values:</p>

<figure class='code'><figcaption><span>example translations value</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;p1&quot;</span> <span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;p2&quot;</span> <span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;p3&quot;</span> <span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;p4&quot;</span> <span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;p5&quot;</span> <span class="p">:</span> <span class="mi">12</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The translations were used for replacing an attribute value in existing documents
with a lookup table computed outside the AQL query.</p>

<p>The number of values in the <code>translations</code> object was varying from query to query,
with no upper bound on the number of values. It was possible that the query was
running with 50,000 lookup values in the <code>translations</code> object.</p>

<p>When trying to reproduce the problem, we expected that the query would get at worst
<em>linearly</em> slower with an increasing number of lookup values. But in reality, the
following <em>non-linear</em> execution times were observed when increasing the number of
lookup values:</p>

<figure class='code'><figcaption><span>execution times for varying input sizes, without optimization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># of values |  execution time
</span><span class='line'>------------+----------------
</span><span class='line'>          1 |        0.6111 s
</span><span class='line'>          2 |        0.6078 s  
</span><span class='line'>          4 |        0.6021 s
</span><span class='line'>          8 |        0.6160 s
</span><span class='line'>         16 |        0.6925 s
</span><span class='line'>         32 |        0.7107 s
</span><span class='line'>         64 |        0.7677 s
</span><span class='line'>        128 |        0.8576 s
</span><span class='line'>        256 |        1.0544 s
</span><span class='line'>        512 |        1.4579 s
</span><span class='line'>       1024 |        8.8303 s
</span><span class='line'>       2048 |       17.3674 s
</span><span class='line'>       4096 |       35.3109 s
</span><span class='line'>       8192 |       74.9161 s
</span><span class='line'>      16384 |      145.0837 s
</span><span class='line'>      32768 |      361.9870 s
</span><span class='line'>      65536 |      880.4995 s</span></code></pre></td></tr></table></div></figure>


<p>(note: all values stated above are wall-clock times for running the query with a
FILTER condition matching 50,000 documents &ndash; i.e. the <code>TRANSLATE()</code> expression was
executed 50,000 times per query)</p>

<p>With small objects passed in <code>translate</code>, the execution times only increased slowly
even when object sizes were doubled. The <code>TRANSLATE()</code> expression&rsquo;s share of the
overall query execution time was still low for small objects, even when doubling
their sizes. However, it got pretty bad for objects with 1,024 members already, and
from that point on, execution times more than doubled if object sizes got doubled.</p>

<p>The <code>TRANSLATE()</code> function itself has O(1) complexity, so we could rule it out as
the problem cause. However, <code>TRANSLATE()</code> is V8-based, and it turned out that there
was a problem when the number of values in the <code>translations</code> object increased from
1022 to 1023. At that particular threshold, execution time quadrupled.</p>

<p>At 1023 object members, V8 seems to change the internal object format, which probably
requires rearranging the object data internally. V8 has several <em>internal</em> types for
representing JavaScript objects, and converting between them is not free.</p>

<p>The obvious optimization opportunity for this case was to create the <code>translations</code>
object value just once as a V8 object, and reuse the same object when calling the
<code>TRANSLATE()</code> function repeatedly. This avoids repeated creation and destruction of
the V8 objects used in function calls, and as a side effect may also lead to less garbage
values being accumulated when functions are called repeatedly.</p>

<p>The optimization is possible here because the <code>translations</code> object is an object literal
and thus constant. It will also work for array literals and bind parameters (which
are also treated as literals once their values are known).</p>

<p>Here are the execution time for running the <code>TRANSLATE()</code> on 50,000 documents with the
modification:</p>

<figure class='code'><figcaption><span>execution times, with optimization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># of values |  execution time
</span><span class='line'>------------+----------------
</span><span class='line'>          1 |        0.6251 s
</span><span class='line'>          2 |        0.6302 s  
</span><span class='line'>          4 |        0.6138 s
</span><span class='line'>          8 |        0.6141 s
</span><span class='line'>         16 |        0.6685 s
</span><span class='line'>         32 |        0.6232 s
</span><span class='line'>         64 |        0.6204 s
</span><span class='line'>        128 |        0.6326 s
</span><span class='line'>        256 |        0.6460 s
</span><span class='line'>        512 |        0.6275 s
</span><span class='line'>       1024 |        0.6639 s
</span><span class='line'>       2048 |        0.6345 s
</span><span class='line'>       4096 |        0.6554 s
</span><span class='line'>       8192 |        0.6789 s
</span><span class='line'>      16384 |        0.7569 s
</span><span class='line'>      32768 |        0.7636 s
</span><span class='line'>      65536 |        1.0173 s</span></code></pre></td></tr></table></div></figure>


<p>Looks like this is going to scale way better.</p>

<p>The optimization is disabled for big array/objects which are non-constant (e.g. a variable
or the result of an expression), or for parameters passed into user-defined AQL functions.
Enabling it for user-defined AQL functions is not safe because in theory these might
modify their arguments (and function arguments are passed by reference &ndash; passing them
by value would also defeat the purpose of the optimization).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Getting Unique Values]]></title>
    <link href="http://jsteemann.github.io/blog/2015/06/01/on-getting-unique-values/"/>
    <updated>2015-06-01T13:27:13+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/06/01/on-getting-unique-values</id>
    <content type="html"><![CDATA[<p>While paging through the issues in the <a href="https://github.com/arangodb/arangodb">ArangoDB issue tracker</a>
I came across <a href="https://github.com/arangodb/arangodb/issues/987">issue #987</a>, titled
<em>Trying to get distinct document attribute values from a large collection fails</em>.</p>

<p>The issue was opened around 10 months ago when ArangoDB 2.2 was around. We improved AQL performance
somewhat since then, so I was eager to see how the query would perform in ArangoDB 2.6, especially
when comparing it to 2.2.</p>

<!-- more -->


<p>For reproduction I quickly put together some example data to run the query on:</p>

<figure class='code'><figcaption><span>setting up example data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb&quot;</span><span class="p">).</span><span class="nx">db</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">c</span><span class="p">.</span><span class="nx">save</span><span class="p">({</span> <span class="nx">_key</span><span class="o">:</span> <span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">100</span><span class="p">)</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;internal&quot;</span><span class="p">).</span><span class="nx">wal</span><span class="p">.</span><span class="nx">flush</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This produces a collection named <code>test</code> with 4 million documents. Each document has a numeric <code>value</code>
attribute, which in total has 100 unique values. I remembered from a conversation with the guy that
opened the issue that the number of distinct values was 100 or even slightly lower. I didn&rsquo;t bother
to create an index on the <code>value</code> attribute, which might have sped up the query.</p>

<p>With data available, it was time to run the query and measure its execution time:</p>

<figure class='code'><figcaption><span>running the query </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;internal&quot;</span><span class="p">).</span><span class="nx">time</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">time</span><span class="p">();</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="s2">&quot;FOR doc IN test COLLECT value = doc.value RETURN value&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">time</span><span class="p">()</span> <span class="o">-</span> <span class="nx">start</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this in 2.2.7 took 3 minutes and 18 seconds before bursting with the following error message:</p>

<figure class='code'><figcaption><span>2.2.7 error message</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#
</span><span class='line'># Fatal error in CALL_AND_RETRY_2
</span><span class='line'># Allocation failed - process out of memory
</span><span class='line'>#</span></code></pre></td></tr></table></div></figure>


<p>In the 2.2 branch AQL queries were fully transformed to JavaScript and executed using V8. Obviously
that didn&rsquo;t work well with large collections. That was one of the reasons why version 2.3 saw a major
rewrite of the AQL engine.</p>

<p>As a consequence, running the query in 2.3 (2.3.5) worked fine. Execution took around 28 seconds.
The same was true for 2.4 (2.4.8) and 2.5 (2.5.5).</p>

<p>Finally, running the query in 2.6.0 completed in just 3.2 seconds.</p>

<p>The reasons for the speedup are the optimizations done for <code>COLLECT</code> (see
<a href="http://jsteemann.github.io/blog/2015/04/22/collecting-with-a-hash-table/">COLLECTing with a hash table</a>, the
<a href="http://jsteemann.github.io/blog/2015/05/04/return-value-optimization-for-aql/">Return value optimization for AQL</a> and some
minor optimizations within AQL that didn&rsquo;t get a pretty working title.</p>

<p>Looks like in sum all the optimizations put into 2.6 really pay out.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diffing Two Documents in AQL]]></title>
    <link href="http://jsteemann.github.io/blog/2015/05/26/diffing-two-documents-in-aql/"/>
    <updated>2015-05-26T11:08:31+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/05/26/diffing-two-documents-in-aql</id>
    <content type="html"><![CDATA[<p>I just stumbled upon a <a href="https://www.arangodb.com/2015/04/aql-functions-improvements/">comment in the ArangoDB blog</a>
asking how to create a diff of two documents with AQL.</p>

<p>Though there is no built-in AQL function to diff two documents, it is easily possible to build your own like in
the following query.</p>

<!-- more -->




<figure class='code'><figcaption><span>AQL code for diffing two documents</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/* input document 1*/
</span><span class='line'>LET doc1 = { 
</span><span class='line'>  "foo" : "bar", 
</span><span class='line'>  "a" : 1, 
</span><span class='line'>  "b" : 2 
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>/* input document 2 */
</span><span class='line'>LET doc2 = { 
</span><span class='line'>  "foo" : "baz", 
</span><span class='line'>  "a" : 2, 
</span><span class='line'>  "c" : 3 
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>/* collect attributes present in doc1, but missing in doc2 */
</span><span class='line'>LET missing = (
</span><span class='line'>  FOR key IN ATTRIBUTES(doc1)
</span><span class='line'>    FILTER ! HAS(doc2, key)
</span><span class='line'>    RETURN {
</span><span class='line'>      [ key ]: doc1[key]
</span><span class='line'>    }
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>/* collect attributes present in both docs, but that have different values */
</span><span class='line'>LET changed = (
</span><span class='line'>  FOR key IN ATTRIBUTES(doc1)
</span><span class='line'>    FILTER HAS(doc2, key) && doc1[key] != doc2[key]
</span><span class='line'>    RETURN {
</span><span class='line'>      [ key ] : {
</span><span class='line'>        old: doc1[key],
</span><span class='line'>        new: doc2[key]
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>/* collect attributes present in doc2, but missing in doc1 */
</span><span class='line'>LET added = (
</span><span class='line'>  FOR key IN ATTRIBUTES(doc2)
</span><span class='line'>    FILTER ! HAS(doc1, key)
</span><span class='line'>    RETURN {
</span><span class='line'>      [ key ] : doc2[key]
</span><span class='line'>    }
</span><span class='line'>)
</span><span class='line'>
</span><span class='line'>/* return final result */
</span><span class='line'>RETURN {
</span><span class='line'>  "missing" : missing,
</span><span class='line'>  "changed" : changed,
</span><span class='line'>  "added" : added
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Note: the query may look a bit lengthy, but much of that is due to formatting. A more terse
version can be found below.</p>

<p>The above query will return a document with three attributes:</p>

<ul>
<li><em>missing</em>: contains all attributes only present in first document (i.e. missing in second document)</li>
<li><em>changed</em>: contains all attributes present in both documents that have different values</li>
<li><em>added</em>: contains all attributes only present in second document (i.e. missing in first document)</li>
</ul>


<p>For the two example documents it will return:</p>

<figure class='code'><figcaption><span>diff query result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;missing&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;b&quot;</span> <span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;changed&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;foo&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;old&quot;</span> <span class="p">:</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;new&quot;</span> <span class="p">:</span> <span class="s2">&quot;baz&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;a&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;old&quot;</span> <span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;new&quot;</span> <span class="p">:</span> <span class="mi">2</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;added&quot;</span> <span class="p">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;c&quot;</span> <span class="p">:</span> <span class="mi">3</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That output format was the first that came to my mind. It is of course possible to adjust the query so
it produces a different output format.</p>

<p>Following is a version of the same query that can be invoked from JavaScript easily. It passes the two
documents as bind parameters and calls <code>db._query</code>. The query is now a one-liner (less readable but easier
to copy&amp;paste):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">bindVariables</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doc1</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;foo&quot;</span> <span class="o">:</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span> <span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="o">:</span> <span class="mi">2</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">doc2</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;foo&quot;</span> <span class="o">:</span> <span class="s2">&quot;baz&quot;</span><span class="p">,</span> <span class="s2">&quot;a&quot;</span> <span class="o">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;c&quot;</span> <span class="o">:</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">query</span> <span class="o">=</span> <span class="s2">&quot;LET doc1 = @doc1, doc2 = @doc2, missing = (FOR key IN ATTRIBUTES(doc1) FILTER ! HAS(doc2, key) RETURN { [ key ]: doc1[key] }), changed = (FOR key IN ATTRIBUTES(doc1) FILTER HAS(doc2, key) &amp;&amp; doc1[key] != doc2[key] RETURN { [ key ] : { old: doc1[key], new: doc2[key] } }), added = (FOR key IN ATTRIBUTES(doc2) FILTER ! HAS(doc1, key) RETURN { [ key ] : doc2[key] }) RETURN { missing : missing, changed : changed, added : added }&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">result</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">bindVariables</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Great AQL Shootout: ArangoDB 2.5 vs 2.6]]></title>
    <link href="http://jsteemann.github.io/blog/2015/05/20/the-great-aql-shootout-arangodb-25-vs-26/"/>
    <updated>2015-05-20T18:04:04+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/05/20/the-great-aql-shootout-arangodb-25-vs-26</id>
    <content type="html"><![CDATA[<p>We are currently preparing ArangoDB 2.6 for release. A lot of work has been put into this release,
and I really hope we can ship a first 2.6 release soon.</p>

<p>To keep you hanging on in the meantime, I put together some performance tests results from 2.6.
The tests I ran compared AQL query execution times in 2.6 and 2.5.</p>

<p>The results look quite promising: <strong>2.6 outperformed 2.5 for all tested queries</strong>, mostly by
factors of 2 to 5. A few dedicated AQL features in the tests got boosted even more, resulting in
query execution time reductions of 90 % and more.
Finally, the tests also revealed a dedicated case for which 2.6 provides a several hundredfold speedup.</p>

<p>Also good news is that not a single of the test queries ran slower in 2.6 than in 2.5.</p>

<!-- more -->


<h1>What was tested?</h1>

<p>The tests execute several read-only AQL queries on datasets of different sizes and measure the
query execution times. The tests were conducted in both ArangoDB 2.5 (2.5.4, the current stable version)
and 2.6 (2.6.0-alpha2, the upcoming version), so the results of the two ArangoDB versions can be compared.</p>

<p>Though the tests do not cover every possible type of AQL operation, feature and function, they still do
cover a wide range of features, e.g. lookups, joins, COLLECT operations, sorting, subqueries,
and some AQL functions. Overall, the test suite contains 33 different cases.</p>

<p>All queries were run on datasets of three different sizes to validate that the results are relevant
for datasets of various sizes. The dataset sizes are 10,000 documents, 100,000 documents, and 1,000,000
documents. Each query was repeated a few times so outliers in execution time can be identified.</p>

<p>There is full disclosure of the test methodology and the test script below, so anyone interested
can repeat the tests locally and verify the results.</p>

<h1>Test results</h1>

<p>The combined test results from 2.5 and 2.6 can be found in this
<a href="http://jsteemann.github.io/downloads/code/arango-25-26-shootout-results.pdf">PDF file</a>.
There is also an <em>ods</em> version of the same file <a href="http://jsteemann.github.io/downloads/code/arango-25-26-shootout-results.ods">here</a>.
A description of the columns and test cases used in these files can be found further below.</p>

<p>For the detail-loving folks, here are the raw results for both versions in isolation:
<a href="http://jsteemann.github.io/downloads/code/arango-25-26-shootout-results-25.txt">2.5</a>,
<a href="http://jsteemann.github.io/downloads/code/arango-25-26-shootout-results-26.txt">2.6</a>.</p>

<p>The results show that ArangoDB 2.6 was consistently faster for <strong>all</strong> AQL queries included in the
tests.</p>

<p>The queries that improved most in 2.6 over 2.5 include:</p>

<ul>
<li><code>FILTER</code> conditions: simple <code>FILTER</code> conditions as used in the tests are 3 to 5 times faster</li>
<li>simple joins using the primary index (<code>_key</code> attribute), hash index or skiplist index are
2 to 3.5 times faster</li>
<li>sorting on a string attribute is 2.5 to 3 times faster</li>
<li>extracting the <code>_key</code> or other top-level attributes from documents is 4 to 5 times faster</li>
<li><code>COLLECT</code> statements: simple <code>COLLECT</code> statements like the ones in the tests are 7 to 15 times
faster</li>
<li>looking up documents using <code>IN</code> lists with a substantial amount of values contained in the <code>IN</code>
list is 250 to 700 times faster</li>
</ul>


<p>The one thing that did not change much when comparing 2.6 with 2.5 is iterating over a collection
and returning all its documents unmodified. The speedups observed for this type of query are between
18 and 25 %, which is the lowest speedup measured by the tests. Still 18 to 25 % seem okay
as a free take-away.</p>

<p>Speedups were observed for all three test dataset sizes alike. In some cases, the speedups
varied a bit with the dataset sizes, but it was still in the same ballpark for all three datasets.
The conclusion is thus that the speedups did not depend much on the dataset sizes.</p>

<h1>Reasons for speedups</h1>

<p>There are several reasons why the 2.6 performance is better than in previous versions. The main
reason is that we spent much time optimizing some of the crtical AQL code paths. Then we also
worked on optimizations for specific features, which are used by some of the tested queries.</p>

<p>If you&rsquo;re interested in the details, here they are:</p>

<ul>
<li><a href="http://jsteemann.github.io/blog/2015/04/22/collecting-with-a-hash-table/">COLLECTing with a hash table</a></li>
<li><a href="http://jsteemann.github.io/blog/2015/04/23/aql-functions-improvements/">AQL functions improvements</a></li>
<li><a href="http://jsteemann.github.io/blog/2015/05/04/subquery-optimizations/">Subquery optimizations</a></li>
<li><a href="http://jsteemann.github.io/blog/2015/05/04/return-value-optimization-for-aql/">Return value optimization for AQL</a></li>
<li><a href="http://jsteemann.github.io/blog/2015/05/07/in-list-improvements/">IN-list improvements</a></li>
</ul>


<p>Additionally, UTF-8 string comparisons were boosted by the upgrade from ICU 52 to ICU 54. The
latter version contains a rewritten and much faster UTF-8-aware strcmp, which we heavily rely on.</p>

<h1>Test methodology</h1>

<p>Each query was run five times on each dataset, so execution time outliers can be identified. The
results contain the minimum, maximum and average execution times for each query.</p>

<p>Queries were run in isolation on an otherwise idle server. The queries were all run inside the
server, so there was no HTTP/network traffic involved for shipping query results (note: this
was also <a href="http://jsteemann.github.io/blog/2015/04/01/improvements-for-the-cursor-api/">vastly improved in 2.6</a> but this is
not the subject of this post).</p>

<p>All tests were run on my local machine, which has 4 cores, 8 CPUs (though the number of CPUs will
not matter for any of the tests), 12 GB of physical memory, a Linux 3.16 kernel and an Ubuntu 15
OS. All datasets fit into the main memory, so tests were not I/O-bound.</p>

<p>The ArangoDB versions tested were 2.5.4 and 2.6.0-alpha2. Both versions were hand-compiled with
g++ 4.9.1 with options <code>CC='gcc' CXX='g++' CFLAGS='-O3 -Wall' CXXFLAGS='-O3 -Wall'</code>.</p>

<p>The complete test script, including the setup of the test data, is contained in
<a href="http://jsteemann.github.io/downloads/code/arango-25-26-shootout-script.js">this file</a>. It can be run inside <em>arangod</em> by
typing the following in the server console:</p>

<figure class='code'><figcaption><span>running the tests inside arangod</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;internal&quot;</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="s2">&quot;/path/to/arango-25-26-shootout-script.js&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that this needs an <em>arangod</em> started with option <code>--console</code>. Also note that running the
script will only test the current <em>arangod</em> instance, so the script needs to be run once in a
2.5 instance and once in 2.6.</p>

<p>Running the script will set up the test collections, run all queries on them (you will need some
patience for this) and finally print a table like the following:</p>

<figure class='code'><figcaption><span>excerpt from test results</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>test name                     | collection  |    runs |     min (s) |     max (s) |     avg (s)
</span><span class='line'>---------------------------------------------------------------------------------------------------
</span><span class='line'>collect-number                | 10k         |       5 |      0.0760 |      0.1638 |      0.0943
</span><span class='line'>collect-number                | 100k        |       5 |      0.8697 |      0.8966 |      0.8803
</span><span class='line'>collect-number                | 1000k       |       5 |     10.4320 |     10.6597 |     10.5314
</span><span class='line'>collect-string                | 10k         |       5 |      0.1211 |      0.1319 |      0.1250
</span><span class='line'>collect-string                | 100k        |       5 |      1.5406 |      1.5974 |      1.5641
</span><span class='line'>collect-string                | 1000k       |       5 |     19.0708 |     19.0966 |     19.0825
</span><span class='line'>collect-count-number          | 10k         |       5 |      0.0763 |      0.0792 |      0.0778</span></code></pre></td></tr></table></div></figure>


<p>These result columns have the following meanings:</p>

<ul>
<li><em>test name</em>: name of test</li>
<li><em>collection</em>: name of collection. <em>10k</em> is a collection with 10,000 documents, <em>100k</em> contains
 100,000 documents, and <em>1000k</em> contains 1,000,000 documents.</li>
<li><em>runs</em>: number of times the query was run</li>
<li><em>min (s)</em>: minimum query execution time (in seconds)</li>
<li><em>max (s)</em>: maximum query execution time (in seconds)</li>
<li><em>avg (s)</em>: average query execution time (in seconds)</li>
</ul>


<h1>Test data</h1>

<p>The test datasets for the three collections are filled with artifical data. Test documents are
created like this:</p>

<figure class='code'><figcaption><span>test document creation</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">collection</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">_key</span><span class="o">:</span> <span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">value1</span><span class="o">:</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">value2</span><span class="o">:</span> <span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">value3</span><span class="o">:</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">value4</span><span class="o">:</span> <span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">value5</span><span class="o">:</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">value6</span><span class="o">:</span> <span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">value7</span><span class="o">:</span> <span class="nx">i</span> <span class="o">%</span> <span class="nx">g</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">value8</span><span class="o">:</span> <span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="nx">g</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each document has a <code>_key</code> attribute and 8 other attributes, <code>value1</code> to <code>value8</code>.</p>

<p><code>value1</code>, <code>value3</code>, <code>value5</code> and <code>value7</code> are numeric attributes, the other attributes contain
string values. The attributes <code>value1</code> to <code>value6</code> contain unique values. The attributes <code>value7</code>
and <code>value8</code> contain repeating values. They are used for <code>COLLECT</code> queries.</p>

<p><code>value1</code> and <code>value2</code> are each indexed with a hash index. <code>value3</code> and <code>value4</code> are each indexed with
a skiplist index. <code>value5</code> to <code>value8</code> are not indexed. This way queries can be run on the same values,
but with different indexes and even without indexes.</p>

<h1>Test cases</h1>

<p>The test cases cover the following queries:</p>

<ul>
<li><em>collect-number</em> and <em>collect-string</em>: run <code>COLLECT</code> on a repeating attribute, which is either
numeric or a string</li>
<li><em>collect-count-number</em> and <em>collect-count-string</em>: ditto, but also calculate the group lengths
using <code>WITH COUNT INTO</code></li>
<li><em>subquery</em>: run a single-document subquery for each document of the original collection</li>
<li><em>concat</em>: for each document in the collection, concat the document <code>_key</code> attribute with another
 document attribute using <code>CONCAT()</code></li>
<li><em>merge</em>: for each document in the collection, merge the document with another object using <code>MERGE()</code></li>
<li><em>keep</em>: for each document in the collection, remove all but a few named attributes from it using
<code>KEEP()</code></li>
<li><em>unset</em>: for each document in the collection, remove a few named attributes from it using <code>UNSET()</code></li>
<li><em>min-number</em> and <em>min-string</em>: return the minimum value of a specific attribute from all documents in
 the collection, which is either numeric or a string. This uses <code>MIN()</code></li>
<li><em>max-number</em> and <em>max-string</em>: ditto, but using <code>MAX()</code></li>
<li><em>sort-number</em> and <em>sort-string</em>: sort all documents in the collection by a non-indexed attribute,
 which is either numeric or a string</li>
<li><em>filter-number</em> and <em>filter-string</em>: filter all documents in the collection using a non-indexed attribute,
 which is either numeric or a string</li>
<li><em>extract-doc</em>: return all documents in the collection unmodified</li>
<li><em>extract-key</em>: return the <code>_key</code> attribute of all documents in the collection</li>
<li><em>extract-number</em> and <em>extract-string</em>: return an attribute from all documents in the collection,
 which is either numeric or a string</li>
<li><em>join-key</em>: for each document in the collection, perform a join on the <code>_key</code> attribute on the collection
 itself (i.e. <code>FOR c1 IN @@c FOR c2 IN @@c FILTER c1._key == c2._key RETURN c1</code>)</li>
<li><em>join-id</em>: ditto, but perform the join using the <code>_id</code> attribute</li>
<li><em>join-hash-number</em> and <em>join-hash-string</em>: ditto, but join using a hash index on a numeric or string
 attribute</li>
<li><em>join-skiplist-number</em> and <em>join-skiplist-string</em>: ditto, but join using a skiplist index on a numeric or
 string attribute</li>
<li><em>lookup-key</em>, <em>lookup-hash-number</em>, <em>lookup-hash-string</em>, <em>lookup-skiplist-number</em>, <em>lookup-skiplist-string</em>:
 compile an IN-list of 10,000 lookup values and search these 10,000 documents in the collection using
 either the primary index (<code>_key</code> attribute), a hash index or a skiplist index. The latter two are tested
 on numeric and string attributes.</li>
</ul>


<p>Further implementation details can be checked in the <a href="http://jsteemann.github.io/downloads/code/arango-25-26-shootout-script.js">test script</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Less Intrusive Linking]]></title>
    <link href="http://jsteemann.github.io/blog/2015/05/07/less-intrusive-linking/"/>
    <updated>2015-05-07T19:52:53+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/05/07/less-intrusive-linking</id>
    <content type="html"><![CDATA[<p>A while ago our continuous integration builds on <a href="http://travis-ci.org">TravisCI</a>
began to fail seemingly randomly because the build worker was killed without
an apparent reason. Obviously the build process reached some resource limits
though we couldn&rsquo;t find any documented limit that the build obviously violated.</p>

<p>Some builds still succeeded without issues, but those builds that were killed
had one thing in common: they were all stuck waiting the linker to finish.</p>

<p>The default linker used on TravisCI is <em>GNU ld</em>. After some research, it turned
out that replacing <em>GNU ld</em> with <em>GNU gold</em> not only made the linking much
faster, but also less resource-intensive. Linking ArangoDB on my local machine
is almost twice as fast with <em>gold</em> as with <em>ld</em>. Even better, after reconfiguring
our TravisCI builds to also use <em>gold</em>, our builds weren&rsquo;t killed anymore by
TravisCI&rsquo;s build scheduling system.</p>

<p>To make TravisCI use <em>gold</em> instead of <em>ld</em>, add the following to your project&rsquo;s
<code>.travis.yml</code> in the <code>install</code> section (so it gets execute before the actual build
steps):</p>

<figure class='code'><figcaption><span>commands for wrapping gold</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get -y install binutils-gold
</span><span class='line'>mkdir -p ~/bin/gold
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;#!/bin/bash&#39;</span> &gt; ~/bin/gold/ld
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;gold &quot;$@&quot;&#39;</span> &gt;&gt; ~/bin/gold/ld
</span><span class='line'>chmod a+x ~/bin/gold/ld
</span><span class='line'><span class="nb">export </span><span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">&quot;-B$HOME/bin/gold $CFLAGS&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CXXFLAGS</span><span class="o">=</span><span class="s2">&quot;-B$HOME/bin/gold $CXXFLAGS&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script downloads and installs <em>gold</em> and creates a tiny wrapper script in a
file named <code>ld</code> in the user&rsquo;s home directory. The wrapper simply calls <em>gold</em>
with all the arguments passed to the wrapper. Finally, the script modifies the
environments <code>CFLAGS</code> and <code>CXXFLAGS</code> by setting the <code>-B</code> parameter to the
wrapper script&rsquo;s directory.</p>

<p><code>-B</code> is the option for the compiler&rsquo;s search path. The compiler (g++) at least
will look in this path for any helper tools it invokes. As we have a file named
<code>ld</code> in this directory, g++ will use our wrapper script instead of the original
<code>ld</code> binary. This way we can keep the original version of <code>ld</code> in <code>/usr/bin</code>,
and only override it using environment variables. This is also helpful in
other contexts, e.g. when <code>ld</code> shall remain as the system&rsquo;s default linker but
<code>gold</code>shall only be used for linking a few selected components.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bulk Document Lookups]]></title>
    <link href="http://jsteemann.github.io/blog/2015/05/07/bulk-document-lookups/"/>
    <updated>2015-05-07T17:48:21+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/05/07/bulk-document-lookups</id>
    <content type="html"><![CDATA[<p>ArangoDB 2.6 comes with a specialized API for bulk document lookups.</p>

<p>The new API allows fetching multiple documents from the server using a single
request, making bulk document retrieval more efficient than when using
one request per document to fetch.</p>

<!-- more -->


<p>The straight-forward implementation of a client application that needs to
fetch several documents from an ArangoDB server looks like this:</p>

<figure class='code'><figcaption><span>fetching multiple documents from the server one by one</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// list of document keys</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">keys</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;baz&quot;</span><span class="p">,</span> <span class="p">...];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// sequentially fetch all documents from the server</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="p">[</span> <span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">results</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nb">document</span><span class="p">(</span><span class="nx">keys</span><span class="p">[</span><span class="nx">i</span><span class="p">]));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// now all documents are contained in variable &#39;results&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works fine but causes excessive HTTP communication between the client
application and the server when many documents need to be fetched. In fact,
the above code will issue as many HTTP requests as there are documents to fetch.</p>

<p>From the performance point of view, it would be much better to reduce the
number of HTTP requests, and retrieve multiple documents from the server in
one go, using a single request.</p>

<p>This is where the new document lookup function comes into play. Provided the
documents keys are known, all the client application needs to do is to call the
collection&rsquo;s <code>lookupByKeys</code> method:</p>

<figure class='code'><figcaption><span>bulk method: fetching multiple documents at once</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// list of document keys</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">keys</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="s2">&quot;bar&quot;</span><span class="p">,</span> <span class="s2">&quot;baz&quot;</span><span class="p">,</span> <span class="p">...];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">results</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">lookupByKeys</span><span class="p">(</span><span class="nx">keys</span><span class="p">);</span>
</span><span class='line'><span class="c1">// now all documents are contained in variable &#39;results&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Following is a comparison of the execution times for the two different methds.
All test runs were conducted in the same ArangoDB 2.6 instance. The tests were
run from the ArangoShell. The ArangoShell and the ArangoDB server were located on
the same physical host.</p>

<figure class='code'><figcaption><span>comparing single document requests and bulk requests</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Number of keys     Single documents        Bulk
</span><span class='line'>-----------------------------------------------
</span><span class='line'>         1,000               0.24 s      0.04 s
</span><span class='line'>        10,000               1.23 s      0.31 s
</span><span class='line'>       100,000              10.89 s      2.13 s</span></code></pre></td></tr></table></div></figure>


<p>As can be seen, the bulk method can provide a substantial speedup in case lots
of documents need to be fetched by their keys at once. The actual speedups might be
even higher when using a remote ArangoDB server instead of a localhost connection.</p>

<p>In 2.6 there is currently an ArangoShell implementation for bulk document lookups.
Other drivers will follow.</p>

<p>Additionally, the server-side REST API method for bulk document lookups can be
invoked directly via HTTP as follows:</p>

<figure class='code'><figcaption><span>invoking bulk document lookups via HTTP</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl                                                  \
</span><span class='line'>  -X PUT                                              \
</span><span class='line'>  http://127.0.0.1:8529/_api/simple/lookup-by-keys    \
</span><span class='line'>  --data '{"collection":"test","keys":["foo","bar","baz"]}'</span></code></pre></td></tr></table></div></figure>


<p>Restrictions: the bulk document API works only with document keys, not document ids.
Additionally, it works on a single collection at a time and cannot be leveraged to fetch
documents from multiple collections. Still, a client application can group document keys
by collection beforehand and send one bulk request per involved collection. Finally,
trying to fetch a document using a non-existing key will not produce an error with the
bulk API. Using the one-by-one method, trying to fetch a non-existing document will throw
an exception.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IN-list Improvements]]></title>
    <link href="http://jsteemann.github.io/blog/2015/05/07/in-list-improvements/"/>
    <updated>2015-05-07T16:46:30+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/05/07/in-list-improvements</id>
    <content type="html"><![CDATA[<p>We have worked on many AQL optimizations for ArangoDB 2.6.</p>

<p>As a side effect of one of these optimizations, some cases involving the handling
of large IN-lists have become much faster than before. Large IN-lists are normally
used when comparing attribute or index values against some big array of lookup values
or keys provided by the application.</p>

<!-- more -->


<p>Let&rsquo;s quickly create and populate a collection named <code>keys</code> so that we can use some
IN-list queries on it later on:</p>

<figure class='code'><figcaption><span>setting up example data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;keys&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// insert 100k documents with some defined keys into the collection</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">keys</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span> <span class="nx">_key</span><span class="o">:</span> <span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="nx">i</span> <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is a query to all find documents with one of the provided keys <code>test0</code> to <code>test999</code>.
The IN-list here contains 1,000 values:</p>

<figure class='code'><figcaption><span>using an IN-list with 1,000 values</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">keys</span> <span class="o">=</span> <span class="p">[</span> <span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">keys</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="s2">&quot;FOR doc IN keys FILTER doc._key IN @keys RETURN doc&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">keys</span><span class="o">:</span> <span class="nx">keys</span> <span class="p">});</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>When invoked from the ArangoShell, this takes around 0.6 seconds to complete with ArangoDB 2.5.</p>

<p>Increasing the length of the IN-list from 1,000 to 5,000 values makes this run in around 15 seconds.
With an IN-list of 10,000 values, this already takes more than 60 seconds to complete in 2.5.</p>

<p>Obviously longer IN-lists weren&rsquo;t handled terribly efficiently in 2.5, and should be avoided there
if possible.</p>

<p>I am glad this has been fixed in 2.6. Following is a comparison of the above query for different
IN-list sizes, run on both ArangoDB 2.5 and 2.6.</p>

<figure class='code'><figcaption><span>2.5 and 2.6 with different IN-list sizes </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># of IN-list values    Execution time (2.5)   Execution time (2.6)
</span><span class='line'>------------------------------------------------------------------
</span><span class='line'>              1,000                  0.67 s                 0.03 s
</span><span class='line'>              5,000                 15.34 s                 0.12 s
</span><span class='line'>             10,000                 63.48 s                 0.20 s
</span><span class='line'>             50,000                   n/a                   0.81 s
</span><span class='line'>            100,000                   n/a                   1.60 s</span></code></pre></td></tr></table></div></figure>


<p>Looks like 2.6 handles longer IN-lists way better than 2.5! The above figures suggest that execution
times now scale about linearly with the number of IN-list values. This also leads to reductions in query
execution times of 90 % and more percent.</p>

<p>Please note that longer IN-lists will still make a the query run longer than when
using shorter IN-lists. This is expected because longer IN-lists require more comparisons to
be made and will lead (in the above example) to more documents being returned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fulltext Index Enhancements]]></title>
    <link href="http://jsteemann.github.io/blog/2015/05/07/fulltext-index-enhancements/"/>
    <updated>2015-05-07T15:08:18+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/05/07/fulltext-index-enhancements</id>
    <content type="html"><![CDATA[<p>This post is about improvements for the fulltext index in ArangoDB 2.6. The improvements
address the problem that non-string attributes were ignored when fulltext-indexing.</p>

<p>Effectively this prevented string values inside arrays or objects from being indexed. Though this
behavior was documented, it was limited the usefulness of the fulltext index much. Several
users requested the fulltext index to be able to index arrays and object attributes, too.</p>

<p>Finally this has been accomplished, so the fulltext index in 2.6 supports indexing arrays
and objects!</p>

<!-- more -->


<h2>Some history</h2>

<p>So far (up to including ArangoDB 2.5) the fulltext indexing in ArangoDB only supported indexing
<em>string</em> attributes. Documents in which the index attribute was an <em>array</em> of strings or an <em>object</em>
with string member values were excluded from indexing.</p>

<p>This turned out to be limiting, because more complex documents effectively couldn&rsquo;t be
fulltext-indexed.</p>

<p>Here&rsquo;s an example&hellip; Let&rsquo;s say we had a collection named <code>example</code> with a fulltext index
defined on attribute <code>value</code>, set up as follows:</p>

<figure class='code'><figcaption><span>setting up a collection with a fulltext index</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;example&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">ensureFulltextIndex</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding a document with a <code>value</code> attribute containing a string value adds all words contained
in the string attribute to the fulltext index:</p>

<figure class='code'><figcaption><span>adding a document that is fulltext-indexed</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span> <span class="nx">value</span><span class="o">:</span> <span class="s2">&quot;Fox is the English translation of the German word Fuchs&quot;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the index can be queried using any of the words:</p>

<figure class='code'><figcaption><span>querying the fulltext index`</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">fulltext</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="s2">&quot;fox&quot;</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="s2">&quot;Fox is the English translation of the German word Fuchs&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far, so good. Now let&rsquo;s try it with more complex document structures.
We&rsquo;re now using arrays and objects inside the <code>value</code> attribute instead of simple
string values:</p>

<figure class='code'><figcaption><span>adding documents that are not fulltext-indexed    </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span> <span class="nx">value</span><span class="o">:</span> <span class="p">{</span> <span class="nx">en</span><span class="o">:</span> <span class="s2">&quot;fox&quot;</span><span class="p">,</span> <span class="nx">de</span><span class="o">:</span> <span class="s2">&quot;Fuchs&quot;</span><span class="p">,</span> <span class="nx">fr</span><span class="o">:</span> <span class="s2">&quot;renard&quot;</span><span class="p">,</span> <span class="nx">ru</span><span class="o">:</span> <span class="s2">&quot;лиса&quot;</span> <span class="p">}</span> <span class="p">});</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span> <span class="nx">value</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;ArangoDB&quot;</span><span class="p">,</span> <span class="s2">&quot;document&quot;</span><span class="p">,</span> <span class="s2">&quot;database&quot;</span><span class="p">,</span> <span class="s2">&quot;Foxx&quot;</span> <span class="p">]</span> <span class="p">});</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span> <span class="nx">value</span><span class="o">:</span> <span class="p">[</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;ArangoDB&quot;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;database&quot;</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Fox&quot;</span><span class="p">,</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;animal&quot;</span> <span class="p">}</span> <span class="p">]</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">fulltext</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="s2">&quot;renard&quot;</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span><span class='line'><span class="p">[</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">fulltext</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="s2">&quot;ArangoDB&quot;</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span><span class='line'><span class="p">[</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">fulltext</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="s2">&quot;database&quot;</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span><span class='line'><span class="p">[</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bad luck!</p>

<p>None of the above documents made it into the fulltext index because the index attribute
did not contain string values. Though that was documented, it was not the desirable
behavior.</p>

<h2>2.6</h2>

<p>Retrying the same operations in ArangoDB 2.6 changes the picture.</p>

<p>All the above example documents are included in the fulltext index in 2.6. The fulltext index
in 2.6 can index <em>string</em> values, <em>object</em> values (it will index the object&rsquo;s members if they are strings)
and <em>array</em> values (it will index the array members if they are strings or objects). Indexing
is still limited to one sub-attribute level, so in deeply nested structures only the
top level ones will be indexed.</p>

<p>A few example queries on the index in 2.6 prove that now all the data from the more
complex documents can be queried:</p>

<figure class='code'><figcaption><span>querying the fulltext index in 2.6</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">fulltext</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="s2">&quot;renard&quot;</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;en&quot;</span> <span class="o">:</span> <span class="s2">&quot;fox&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;de&quot;</span> <span class="o">:</span> <span class="s2">&quot;Fuchs&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;fr&quot;</span> <span class="o">:</span> <span class="s2">&quot;renard&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;ru&quot;</span> <span class="o">:</span> <span class="s2">&quot;лиса&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">fulltext</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="s2">&quot;ArangoDB&quot;</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;ArangoDB&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;document&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;database&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Foxx&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;ArangoDB&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;database&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Fox&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;animal&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">fulltext</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="s2">&quot;database&quot;</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;ArangoDB&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;document&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;database&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Foxx&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;ArangoDB&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;database&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Fox&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;animal&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">fulltext</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="s2">&quot;лиса&quot;</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;en&quot;</span> <span class="o">:</span> <span class="s2">&quot;fox&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;de&quot;</span> <span class="o">:</span> <span class="s2">&quot;Fuchs&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;fr&quot;</span> <span class="o">:</span> <span class="s2">&quot;renard&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;ru&quot;</span> <span class="o">:</span> <span class="s2">&quot;лиса&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">fulltext</span><span class="p">(</span><span class="s2">&quot;value&quot;</span><span class="p">,</span> <span class="s2">&quot;prefix:Fox&quot;</span><span class="p">).</span><span class="nx">toArray</span><span class="p">();</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="s2">&quot;Fox is the English translation of the German word Fuchs&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;en&quot;</span> <span class="o">:</span> <span class="s2">&quot;fox&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;de&quot;</span> <span class="o">:</span> <span class="s2">&quot;Fuchs&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;fr&quot;</span> <span class="o">:</span> <span class="s2">&quot;renard&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;ru&quot;</span> <span class="o">:</span> <span class="s2">&quot;лиса&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;ArangoDB&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;document&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;database&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Foxx&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="s2">&quot;value&quot;</span> <span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;ArangoDB&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;database&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span> <span class="o">:</span> <span class="s2">&quot;Fox&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;type&quot;</span> <span class="o">:</span> <span class="s2">&quot;animal&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subquery Optimizations]]></title>
    <link href="http://jsteemann.github.io/blog/2015/05/04/subquery-optimizations/"/>
    <updated>2015-05-04T13:26:00+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/05/04/subquery-optimizations</id>
    <content type="html"><![CDATA[<p>This is another post demonstrating some of the AQL query performance improvements
that can be expected in ArangoDB 2.6. Specifically, this post is about an optimization
for subqueries. AQL queries with multiple subqueries will likely benefit from it.</p>

<!-- more -->


<p>The following example queries use the same <code>users</code> collection with 100,000 documents
that was used in the <a href="http://jsteemann.github.io/blog/2015/05/04/return-value-optimization-for-aql/">previous post about return value optimizations</a>.
Again, the source data for the collection can be found <a href="http://jsteemann.github.io/downloads/code/users-100000.json.tar.gz">here</a>.</p>

<p>We&rsquo;ll start with a query that uses a single subquery extracting all users from the
collection into a flat result array:</p>

<figure class='code'><figcaption><span>example query with single subquery</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN [ 
</span><span class='line'>  (FOR u IN users RETURN u) 
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>This query is equally fast with ArangoDB 2.5 and 2.6, no changes here.</p>

<p>Let&rsquo;s ramp it up to using two subqueries, one for users with a <code>gender</code> attribute value
of <code>male</code>, and one for users with <code>gender</code> attribute value <code>female</code>. No indexes were used
for the extraction in 2.5 nor 2.6:</p>

<figure class='code'><figcaption><span>example query with two subqueries</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN [ 
</span><span class='line'>  (FOR u IN users FILTER u.gender == 'male' RETURN u), 
</span><span class='line'>  (FOR u IN users FILTER u.gender == 'female' RETURN u) 
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>The query takes 16.6 seconds to execute in 2.5, but only 2.95 seconds with ArangoDB 2.6.
This 80 % reduction in execution time is due to ArangoDB 2.6 being a bit smarter about
subqueries than 2.5 is.</p>

<p>In the above query, the two subqueries are independent, so not only can they be executed in
any order, but they also do not rely on each other&rsquo;s results. ArangoDB 2.6 will detect that
and avoid copying variables and intermediate results into subqueries if they are actually not
needed there. 2.5 copied all variables into subqueries unconditionally, even if variables
were not needed there.</p>

<p>In 2.6, any AQL query with multiple subqueries will benefit from this optimization. The
performance improvements will be greater if subqueries late in the execution pipeline have a lot of
intermediate results created in front of them, but do not rely on these intermediate results.</p>

<p>Another nice example for a 2.6 speedup is extracting a single attribute per subquery, as is done
for the <code>name</code> attribute in the following query:</p>

<figure class='code'><figcaption><span>extracting a single attribute in two subqueries</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RETURN [ 
</span><span class='line'>  (FOR u IN users FILTER u.gender == 'male' RETURN u.name), 
</span><span class='line'>  (FOR u IN users FILTER u.gender == 'female' RETURN u.name) 
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p>This takes 42 seconds to execute in 2.5, and only 0.86 seconds in 2.6. This is a more than
95 % reduction in execution time. It is caused by a mix of factors, one of them again being
the subquery optimization that avoids copying unneeded intermediate results.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Return Value Optimization for AQL]]></title>
    <link href="http://jsteemann.github.io/blog/2015/05/04/return-value-optimization-for-aql/"/>
    <updated>2015-05-04T10:32:43+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/05/04/return-value-optimization-for-aql</id>
    <content type="html"><![CDATA[<p>While in search for further AQL query optimizations last week, we found that intermediate AQL
query results were copied one time too often in some cases. Precisely, the data that a query&rsquo;s
<code>ReturnNode</code> will return to the caller was copied into the <code>ReturnNode</code>&rsquo;s own register. With
<code>ReturnNode</code>s never modifying their input data, this demanded for something that is called
<em>return-value optimization</em> in compilers.</p>

<p>2.6 will now optimize away these copies in many cases, and this post shows which performance
benefits can be expected due to the optimization.</p>

<!-- more -->


<p>The effect of the optimization can be demonstrated easily with a few simple AQL queries.
Let&rsquo;s start with a query that simply returns all 100,000 documents from a collection <code>users</code>:
<code>FOR u IN users RETURN u</code> (the source data for the collection can be found <a href="http://jsteemann.github.io/downloads/code/users-100000.json.tar.gz">here</a>).</p>

<p>This query&rsquo;s execution plan is already straight-forward and simple:</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/return.png"></p>

<p>So where&rsquo;s the problem?</p>

<p>The <code>ReturnNode</code> in this query (and other queries too) will copy its input data into its own output
register, only to finally hand the results to the query&rsquo;s caller. This copying is most often unnecessary
as the <code>ReturnNode</code> will not modify its input. So the idea was to get rid of the copying action and
tell the query&rsquo;s calling code in which (now different) register to look for the results.</p>

<p>Optimizing away the copying inside the <code>ReturnNode</code> made the query run faster already.
The same query now returns the 100,000 documents in 0.24 to 0.26 seconds, compared to 0.27 to 0.30 s
before applying the optimization.</p>

<p>Returning just an attribute of each document shows about the same improvement rates. The execution
times of the query <code>FOR u IN users RETURN u._key</code> drop to between 0.13 and 0.14 seconds with the
optimization, from initially between 0.15 and 0.17 seconds.</p>

<p>Another example query, <code>FOR i IN 1..1000000 RETURN i</code>, now runs in 0.58 to 0.61 seconds with
the optimization, compared to between 0.77 and 0.81 seconds without it.</p>

<p>These absolute figures may not look overly impressive, but they indicate relative improvements of
between 10 and 25 %, which is quite nice. This is effectively saved CPU time that can now be used
for something more productive.</p>

<p>Of course the performance improvements may not be that high for every imaginable AQL query.
Though the optimization may be active in most AQL queries, its effect will only be measurable
for queries that return a significant number of documents/values. Otherwise the share of the
<code>ReturnNode</code>&rsquo;s work in the query&rsquo;s overall computations may be too low to have any effect.
Additionally, the more work a query spends in performing other operations (e.g. filtering,
sorting, collecting), the less relevant will be the overall effect of the optimized <code>ReturnNode</code>.
Finally, when query results need to be shipped from the server to the client over a network,
the relative effect of the optimization may diminish further.</p>

<p>So your mileage may vary. But the optimization will not do any harm, and together with some
other query optimizations already finished for 2.6 it will contribute to many AQL queries
running faster than before.</p>

<p>AQL queries will benefit from the optimization automatically in ArangoDB 2.6, without requiring
any adjustments to the query string, the server configuration etc. The optimizer will automatically
apply the optimization for the main-level <code>ReturnNode</code> of every AQL query.</p>

<p>On a side note: the optimization will not be shown in the list of applied optimizer rules for the
query. This is because the optimization is performed in some different place in the query
executor, after applying the optimizer rules.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exporting Data for Offline Processing]]></title>
    <link href="http://jsteemann.github.io/blog/2015/04/24/exporting-data-for-offline-processing/"/>
    <updated>2015-04-24T15:47:31+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/04/24/exporting-data-for-offline-processing</id>
    <content type="html"><![CDATA[<p>A few weeks ago I wrote about ArangoDB&rsquo;s
<a href="https://jsteemann.github.io/blog/2015/04/04/more-efficient-data-exports/">specialized export API</a>.</p>

<p>The export API is useful when the goal is to extract all documents from a given collection
and to process them outside of ArangoDB.</p>

<p>The export API can provide quick and memory-efficient snapshots of the data in the underlying
collection, making it suitable for extract all documents of the collection. It will be able
to provide data much faster than with an AQL query that will extract all documents.</p>

<p>In this post I&rsquo;ll show how to use the export API to extract data and process it with PHP.</p>

<!-- more -->


<p>A prerequiste for using the export API is using an ArangoDB server with version 2.6
or higher. As there hasn&rsquo;t been an official 2.6 release yet, this currently requires
building the <code>devel</code> branch of ArangoDB from source. When there is a regular 2.6
release, this should be used instead.</p>

<h2>Importing example data</h2>

<p>First we need some data in an ArangoDB collection that we can process externally.</p>

<p>For the following examples, I&rsquo;ll use a collection named <code>users</code> which I&rsquo;ll populate
with 100k <a href="http://jsteemann.github.io/downloads/code/users-100000.json.tar.gz">example documents</a>. Here&rsquo;s how
to get this data into ArangoDB:</p>

<figure class='code'><figcaption><span>commands for fetching and importing data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># download data file</span>
</span><span class='line'>wget https://jsteemann.github.io/downloads/code/users-100000.json.tar.gz
</span><span class='line'><span class="c"># uncompress it</span>
</span><span class='line'>tar xvfz users-100000.json.tar.gz
</span><span class='line'><span class="c"># import into ArangoDB </span>
</span><span class='line'>arangoimp --file users-100000.json --collection users --create-collection <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>There should now be 100K documents present in a collection named <code>users</code>. You can
quickly verify that by peeking into the collection using the web interface.</p>

<h2>Setting up ArangoDB-PHP</h2>

<p>An easy way of trying the export API is to use it from PHP. We therefore clone the
devel branch of the <strong>arangodb-php</strong> Github repository into a local directory:</p>

<figure class='code'><figcaption><span>cloning arangodb-php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone -b devel <span class="s2">&quot;https://github.com/arangodb/arangodb-php.git&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: when there is an official 2.6 release, the <code>2.6</code> branch of arangodb-php should
be used instead of the <code>devel</code> branch.</p>

<p>We now write a simple PHP script that establishes a connection to the ArangoDB
server running on localhost. We&rsquo;ll extend that file gradually. Here&rsquo;s a skeleton
file to start with. The code can be downloaded <a href="http://jsteemann.github.io/downloads/code/export-skeleton.php">here</a>:</p>

<figure class='code'><figcaption><span>skeleton file for establishing a connection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">triagens\ArangoDb</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// use the driver&#39;s autoloader to load classes</span>
</span><span class='line'><span class="k">require</span> <span class="s1">&#39;arangodb-php/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">Autoloader</span><span class="o">::</span><span class="na">init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set up connection options</span>
</span><span class='line'><span class="nv">$connectionOptions</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="c1">// endpoint to connect to</span>
</span><span class='line'>  <span class="nx">ConnectionOptions</span><span class="o">::</span><span class="na">OPTION_ENDPOINT</span>     <span class="o">=&gt;</span> <span class="s1">&#39;tcp://localhost:8529&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// can use Keep-Alive connection</span>
</span><span class='line'>  <span class="nx">ConnectionOptions</span><span class="o">::</span><span class="na">OPTION_CONNECTION</span>   <span class="o">=&gt;</span> <span class="s1">&#39;Keep-Alive&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// use basic authorization</span>
</span><span class='line'>  <span class="nx">ConnectionOptions</span><span class="o">::</span><span class="na">OPTION_AUTH_TYPE</span>    <span class="o">=&gt;</span> <span class="s1">&#39;Basic&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// user for basic authorization</span>
</span><span class='line'>  <span class="nx">ConnectionOptions</span><span class="o">::</span><span class="na">OPTION_AUTH_USER</span>    <span class="o">=&gt;</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// password for basic authorization</span>
</span><span class='line'>  <span class="nx">ConnectionOptions</span><span class="o">::</span><span class="na">OPTION_AUTH_PASSWD</span>  <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// timeout in seconds</span>
</span><span class='line'>  <span class="nx">ConnectionOptions</span><span class="o">::</span><span class="na">OPTION_TIMEOUT</span>      <span class="o">=&gt;</span> <span class="mi">30</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// database name </span>
</span><span class='line'>  <span class="nx">ConnectionOptions</span><span class="o">::</span><span class="na">OPTION_DATABASE</span>     <span class="o">=&gt;</span> <span class="s1">&#39;_system&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// establish connection</span>
</span><span class='line'>  <span class="nv">$connection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Connection</span><span class="p">(</span><span class="nv">$connectionOptions</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">echo</span> <span class="s1">&#39;Connected!&#39;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// TODO: now do something useful with the connection!</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">ConnectException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">print</span> <span class="nv">$e</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">ServerException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">print</span> <span class="nv">$e</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">ClientException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">print</span> <span class="nv">$e</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running that script should simply print <code>Connected!</code>. This means the PHP script
can connect to ArangoDB and we can go on.</p>

<h2>Extracting the data</h2>

<p>With a working database connection we can now start with the actual processing.
In place of the <code>TODO</code> in the skeleton file, we can actually run an export of
the data in collection <code>users</code>. The following simple function extracts all
documents from the collection and writes them to an output file <code>output.json</code>
in JSON format.</p>

<p>It will also print some statistics about the number of documents and the total
data size. The full script can be downloaded <a href="http://jsteemann.github.io/downloads/code/export.php">here</a>:</p>

<figure class='code'><figcaption><span>exporting data into a file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">export</span><span class="p">(</span><span class="nv">$collection</span><span class="p">,</span> <span class="nx">Connection</span> <span class="nv">$connection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$fp</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;output.json&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nv">$fp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s1">&#39;could not open output file!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// settings to use for the export</span>
</span><span class='line'>  <span class="nv">$settings</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;batchSize&#39;</span> <span class="o">=&gt;</span> <span class="mi">5000</span><span class="p">,</span>  <span class="c1">// export in chunks of 5K documents</span>
</span><span class='line'>    <span class="s1">&#39;_flat&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span>       <span class="c1">// use simple PHP arrays</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$export</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Export</span><span class="p">(</span><span class="nv">$connection</span><span class="p">,</span> <span class="nv">$collection</span><span class="p">,</span> <span class="nv">$settings</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// execute the export. this will return an export cursor</span>
</span><span class='line'>  <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$export</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// statistics </span>
</span><span class='line'>  <span class="nv">$count</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$batches</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="nv">$bytes</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// now we can fetch the documents from the collection in batches</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nv">$docs</span> <span class="o">=</span> <span class="nv">$cursor</span><span class="o">-&gt;</span><span class="na">getNextBatch</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$docs</span> <span class="k">as</span> <span class="nv">$doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$output</span> <span class="o">.=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nv">$doc</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// write out chunk</span>
</span><span class='line'>    <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// update statistics</span>
</span><span class='line'>    <span class="nv">$count</span> <span class="o">+=</span> <span class="nb">count</span><span class="p">(</span><span class="nv">$docs</span><span class="p">);</span>
</span><span class='line'>    <span class="nv">$bytes</span> <span class="o">+=</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>    <span class="o">++</span><span class="nv">$batches</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">echo</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;written %d documents in %d batches with %d total bytes&#39;</span><span class="p">,</span>
</span><span class='line'>               <span class="nv">$count</span><span class="p">,</span>
</span><span class='line'>               <span class="nv">$batches</span><span class="p">,</span>
</span><span class='line'>               <span class="nv">$bytes</span><span class="p">)</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// run the export</span>
</span><span class='line'><span class="nx">export</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="nv">$connection</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this version of the script should print something similar to the following
and also produce a file named <code>output.json</code>. Each line in the file should be a JSON
object representing a document in the collection.</p>

<figure class='code'><figcaption><span>script output</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>written 100000 documents in 20 batches with 40890013 total bytes</span></code></pre></td></tr></table></div></figure>


<h2>Applying some transformations</h2>

<p>We now use PHP to transform data as we extract it. With an example script, we&rsquo;ll apply
the following transformations on the data:</p>

<ul>
<li>rewrite the contents of the <code>gender</code> attribute:

<ul>
<li><code>female</code> should become <code>f</code></li>
<li><code>male</code> should become <code>m</code></li>
</ul>
</li>
<li>rename attribute <code>birthday</code> to <code>dob</code></li>
<li>change date formats in <code>dob</code> and <code>memberSince</code> from YYYY-MM-DD to MM/DD/YYYY</li>
<li>concatenate the contents of the <code>name.first</code> and <code>name.last</code> subattributes</li>
<li>transform array in <code>contact.email</code> into a flat string</li>
<li>remove all other attributes</li>
</ul>


<p>Here&rsquo;s a transformation function that does this, and a slightly simplified export
function. This version of the script can also be downloaded <a href="http://jsteemann.github.io/downloads/code/export-transform.php">here</a>:</p>

<figure class='code'><figcaption><span>transformation and export functions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">transformDate</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">preg_replace</span><span class="p">(</span><span class="s1">&#39;/^(\\d+)-(\\d+)-(\\d+)$/&#39;</span><span class="p">,</span> <span class="s1">&#39;\\2/\\3/\\1&#39;</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">transform</span><span class="p">(</span><span class="k">array</span> <span class="nv">$document</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="nv">$genders</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;male&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;female&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;f&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$transformed</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;gender&#39;</span>      <span class="o">=&gt;</span> <span class="nv">$genders</span><span class="p">[</span><span class="nv">$document</span><span class="p">[</span><span class="s1">&#39;gender&#39;</span><span class="p">]],</span>
</span><span class='line'>    <span class="s1">&#39;dob&#39;</span>         <span class="o">=&gt;</span> <span class="nx">transformDate</span><span class="p">(</span><span class="nv">$document</span><span class="p">[</span><span class="s1">&#39;birthday&#39;</span><span class="p">]),</span>
</span><span class='line'>    <span class="s1">&#39;memberSince&#39;</span> <span class="o">=&gt;</span> <span class="nx">transformDate</span><span class="p">(</span><span class="nv">$document</span><span class="p">[</span><span class="s1">&#39;memberSince&#39;</span><span class="p">]),</span>
</span><span class='line'>    <span class="s1">&#39;fullName&#39;</span>    <span class="o">=&gt;</span> <span class="nv">$document</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">][</span><span class="s1">&#39;first&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39; &#39;</span> <span class="o">.</span> <span class="nv">$document</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">][</span><span class="s1">&#39;last&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="s1">&#39;email&#39;</span>       <span class="o">=&gt;</span> <span class="nv">$document</span><span class="p">[</span><span class="s1">&#39;contact&#39;</span><span class="p">][</span><span class="s1">&#39;email&#39;</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$transformed</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nf">export</span><span class="p">(</span><span class="nv">$collection</span><span class="p">,</span> <span class="nx">Connection</span> <span class="nv">$connection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$fp</span> <span class="o">=</span> <span class="nb">fopen</span><span class="p">(</span><span class="s1">&#39;output-transformed.json&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nv">$fp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s1">&#39;could not open output file!&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// settings to use for the export</span>
</span><span class='line'>  <span class="nv">$settings</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;batchSize&#39;</span> <span class="o">=&gt;</span> <span class="mi">5000</span><span class="p">,</span>  <span class="c1">// export in chunks of 5K documents</span>
</span><span class='line'>    <span class="s1">&#39;_flat&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span>       <span class="c1">// use simple PHP arrays</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$export</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Export</span><span class="p">(</span><span class="nv">$connection</span><span class="p">,</span> <span class="nv">$collection</span><span class="p">,</span> <span class="nv">$settings</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// execute the export. this will return an export cursor</span>
</span><span class='line'>  <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$export</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// now we can fetch the documents from the collection in batches</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nv">$docs</span> <span class="o">=</span> <span class="nv">$cursor</span><span class="o">-&gt;</span><span class="na">getNextBatch</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$docs</span> <span class="k">as</span> <span class="nv">$doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$output</span> <span class="o">.=</span> <span class="nb">json_encode</span><span class="p">(</span><span class="nx">transform</span><span class="p">(</span><span class="nv">$doc</span><span class="p">))</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// write out chunk</span>
</span><span class='line'>    <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nv">$output</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// run the export</span>
</span><span class='line'><span class="nx">export</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="nv">$connection</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The adjusted version of the PHP script will now produce an output file named
<code>output-transformed.json</code>.</p>

<h2>Filtering attributes</h2>

<p>In the last example we discarded a few attributes of each document. Instead of
filtering out these attributes with PHP, we can configure the export to already
exclude these attributes server-side. This way we can save some traffic.</p>

<p>Here&rsquo;s an adjusted configuration that will exclude the unneeded attributes <code>_id</code>,
<code>_rev</code>, <code>_key</code> and <code>likes</code>:</p>

<figure class='code'><figcaption><span>configuration for attribute exclusion </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// settings to use for the export</span>
</span><span class='line'><span class="nv">$settings</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;batchSize&#39;</span> <span class="o">=&gt;</span> <span class="mi">5000</span><span class="p">,</span>  <span class="c1">// export in chunks of 5K documents</span>
</span><span class='line'>  <span class="s1">&#39;_flat&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>      <span class="c1">// use simple PHP arrays</span>
</span><span class='line'>  <span class="s1">&#39;restrict&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;exclude&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;fields&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;_id&#39;</span><span class="p">,</span> <span class="s1">&#39;_rev&#39;</span><span class="p">,</span> <span class="s1">&#39;_key&#39;</span><span class="p">,</span> <span class="s1">&#39;likes&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The full script that employs the adjusted configuration can be downloaded
<a href="http://jsteemann.github.io/downloads/code/export-exclude.php">here</a>.</p>

<p>Instead of excluding specific attributes we can also do it the other way and only
include certain attributes in an export. The following script demonstrates this by
extracting only the <code>_key</code> and <code>name</code> attributes of each document. It then prints the
key/name pairs in CSV format.</p>

<p>The full script can be downloaded <a href="http://jsteemann.github.io/downloads/code/export-csv.php">here</a>.</p>

<figure class='code'><figcaption><span>export function that prints key/name pairs in CSV format</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">export</span><span class="p">(</span><span class="nv">$collection</span><span class="p">,</span> <span class="nx">Connection</span> <span class="nv">$connection</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// settings to use for the export</span>
</span><span class='line'>  <span class="nv">$settings</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;batchSize&#39;</span> <span class="o">=&gt;</span> <span class="mi">5000</span><span class="p">,</span>  <span class="c1">// export in chunks of 5K documents</span>
</span><span class='line'>    <span class="s1">&#39;_flat&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>      <span class="c1">// use simple PHP arrays</span>
</span><span class='line'>    <span class="s1">&#39;restrict&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;include&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;fields&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;_key&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$export</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Export</span><span class="p">(</span><span class="nv">$connection</span><span class="p">,</span> <span class="nv">$collection</span><span class="p">,</span> <span class="nv">$settings</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// execute the export. this will return an export cursor</span>
</span><span class='line'>  <span class="nv">$cursor</span> <span class="o">=</span> <span class="nv">$export</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// now we can fetch the documents from the collection in batches</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="nv">$docs</span> <span class="o">=</span> <span class="nv">$cursor</span><span class="o">-&gt;</span><span class="na">getNextBatch</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$output</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$docs</span> <span class="k">as</span> <span class="nv">$doc</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$values</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="nv">$doc</span><span class="p">[</span><span class="s1">&#39;_key&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="nv">$doc</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">][</span><span class="s1">&#39;first&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39; &#39;</span> <span class="o">.</span> <span class="nv">$doc</span><span class="p">[</span><span class="s1">&#39;name&#39;</span><span class="p">][</span><span class="s1">&#39;last&#39;</span><span class="p">]</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$output</span> <span class="o">.=</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">.</span> <span class="nb">implode</span><span class="p">(</span><span class="s1">&#39;&quot;,&quot;&#39;</span><span class="p">,</span> <span class="nv">$values</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;&quot;&#39;</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// print out the data directly </span>
</span><span class='line'>    <span class="k">print</span> <span class="nv">$output</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// run the export</span>
</span><span class='line'><span class="nx">export</span><span class="p">(</span><span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="nv">$connection</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using the API without PHP</h2>

<p>The export API REST interface is simple and it can be used with any client that can
speak HTTP. This includes <em>curl</em> obviously:</p>

<p>The following command fetches the initial 5K documents from the <code>users</code> collection
using <em>curl</em>:</p>

<figure class='code'><figcaption><span>using the export API with curl </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl                                                   <span class="se">\</span>
</span><span class='line'>  -X POST                                              <span class="se">\</span>
</span><span class='line'>  http://localhost:8529/_api/export?collection<span class="o">=</span>users   <span class="se">\</span>
</span><span class='line'>  --data <span class="s1">&#39;{&quot;batchSize&quot;:5000}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The HTTP response will contain a <code>result</code> attribute that contains the actual
documents. It will also contain an attribute <code>hasMore</code> that will indicate whether
there are more documents for the client to fetch. If it is set to <code>true</code>, the
HTTP response will also contain an attribute <code>id</code>. The client can use this id
for sending follow-up requests like this (assuming the returned id was <code>13979338067709</code>):</p>

<figure class='code'><figcaption><span>sending a follow-up request with curl </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl                                                   <span class="se">\</span>
</span><span class='line'>  -X PUT                                               <span class="se">\</span>
</span><span class='line'>  http://localhost:8529/_api/export/13979338067709
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s about it. Using the export API it should be fairly simple to ship bulk
ArangoDB data to client applications or data processing tools.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AQL Functions Improvements]]></title>
    <link href="http://jsteemann.github.io/blog/2015/04/23/aql-functions-improvements/"/>
    <updated>2015-04-23T10:24:53+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/04/23/aql-functions-improvements</id>
    <content type="html"><![CDATA[<p>Waiting for a <code>git pull</code> to complete over an 8 KiB/s internet connection is boring.
So I thought I&rsquo;d rather use the idle time and quickly write about some performance
improvements for certain AQL functions that were recently completed and that will
become available with ArangoDB 2.6.</p>

<p>The improvements affect the following AQL functions:</p>

<ul>
<li><code>UNSET()</code>: remove specified attributes from an object/document</li>
<li><code>KEEP()</code>: keep only specified attributes of an object/document</li>
<li><code>MERGE()</code>: merge the attributes of multiple objects/documents</li>
</ul>


<p>This blog post shows a few example queries that will benefit from <strong>50 to more than 60 %
reductions</strong> in query execution times due to the changes done to these functions.</p>

<!-- more -->


<h2>When to expect benefits</h2>

<p>Reductions in execution time can be expected for AQL queries invoking one of the above
AQL functions many times, and if the AQL function is used in a so-called <em>simple</em>
calculation. Whether or not a calculation is considered <em>simple</em> is shown in the detailed
JSON output of an <code>explain()</code>.</p>

<p>Queries will not benefit if they invoke the AQL functions only a few times or when the
function call is contained in an expression that is executed using the non-<em>simple</em> code path.</p>

<h2>Example queries</h2>

<p>Following are a few example queries for the three AQL functions, showing the reductions in
execution times. They all use the <em>simple</em> code path so the benefits can be reaped.</p>

<p>For comparing the execution times between 2.5 and 2.6, I have prepared a simple test setup.
Here is a test function that will create a collection named <code>test</code> and populate it
with a configurable amount documents. It will then run an AQL query that will update
each document in the collection, using one of the named AQL functions. The function
will return the execution time for the AQL query, excluding the collection setup time:</p>

<figure class='code'><figcaption><span>test function</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">run</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="nx">query</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;internal&quot;</span><span class="p">).</span><span class="nx">time</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;org/arangodb&quot;</span><span class="p">).</span><span class="nx">db</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// drop and re-create test collection </span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">_drop</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// insert n documents</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">c</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span> <span class="nx">value1</span><span class="o">:</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">value2</span><span class="o">:</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">value3</span><span class="o">:</span> <span class="s1">&#39;foobar&#39;</span> <span class="o">+</span> <span class="nx">i</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// flush write-ahead log and wait a few seconds before running query</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;internal&quot;</span><span class="p">).</span><span class="nx">wal</span><span class="p">.</span><span class="nx">flush</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;internal&quot;</span><span class="p">).</span><span class="nx">wait</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// run query </span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">time</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">_query</span><span class="p">(</span><span class="nx">query</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">time</span><span class="p">()</span> <span class="o">-</span> <span class="nx">s</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h3>UNSET()</h3>

<p>Let&rsquo;s start with the <code>UNSET()</code> AQL function. Its purpose is to remove or multiple
attributes from an object/document. Here is an example AQL query that removes
attribute <code>value2</code> from each document in the <code>test</code> collection:</p>

<figure class='code'><figcaption><span>invocation of UNSET()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">run</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="s2">&quot;FOR t IN test LET modified = UNSET(t, &#39;value2&#39;) REPLACE t WITH modified IN test&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The execution times (in seconds) for different <code>n</code> values in ArangoDB 2.5 and 2.6 are:</p>

<figure class='code'><figcaption><span>execution times of UNSET() query in 2.5 and 2.6</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>value of n       time 2.5       time 2.6       speedup
</span><span class='line'>------------------------------------------------------
</span><span class='line'>   100,000         3.28 s         1.13 s          65 %
</span><span class='line'>   500,000        16.93 s         5.38 s          68 %
</span><span class='line'> 1,000,000        32.60 s        11.40 s          65 %</span></code></pre></td></tr></table></div></figure>


<h3>KEEP()</h3>

<p>The purpose of <code>KEEP()</code> is to remove all attributes from an object/document but the
specified ones. Here&rsquo;s an example query that uses <code>KEEP()</code> to remove all attributes
from the documents in the <code>test</code> collectionn but attribute <code>value2</code>:</p>

<figure class='code'><figcaption><span>invocation of KEEP()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">run</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="s2">&quot;FOR t IN test LET modified = KEEP(t, &#39;value2&#39;) REPLACE t WITH modified IN test&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The execution times (in seconds) for different <code>n</code> values in ArangoDB 2.5 and 2.6 are:</p>

<figure class='code'><figcaption><span>execution times of KEEP() query in 2.5 and 2.6</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>value of n       time 2.5       time 2.6       speedup
</span><span class='line'>------------------------------------------------------
</span><span class='line'>   100,000         1.98 s         0.87 s          56 %
</span><span class='line'>   500,000         9.34 s         4.09 s          56 %
</span><span class='line'> 1,000,000        18.86 s         8.23 s          56 %</span></code></pre></td></tr></table></div></figure>


<h3>MERGE()</h3>

<p>Finally, the <code>MERGE()</code> function can be used to merge multiple objects/documents in a
single one. The following query will add an attribute <code>value4</code> to all documents in
collection <code>test</code>:</p>

<figure class='code'><figcaption><span>invocation of MERGE()</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">run</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span> <span class="s2">&quot;FOR t IN test LET modified = MERGE(t, { value4 : 1 }) REPLACE t WITH modified IN test&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The execution times (in seconds) for different <code>n</code> values in ArangoDB 2.5 and 2.6 are:</p>

<figure class='code'><figcaption><span>execution times of MERGE() query in 2.5 and 2.6</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>value of n       time 2.5       time 2.6       speedup
</span><span class='line'>------------------------------------------------------
</span><span class='line'>   100,000         3.93 s         1.22 s          68 %
</span><span class='line'>   500,000        19.17 s         5.91 s          69 %
</span><span class='line'> 1,000,000        38.27 s        12.33 s          67 %</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[COLLECTing With a Hash Table]]></title>
    <link href="http://jsteemann.github.io/blog/2015/04/22/collecting-with-a-hash-table/"/>
    <updated>2015-04-22T13:53:10+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/04/22/collecting-with-a-hash-table</id>
    <content type="html"><![CDATA[<p>ArangoDB 2.6 will feature an alternative <strong>hash</strong> implementation of the AQL <code>COLLECT</code>
operation. The new implementation can speed up some AQL queries that can not exploit indexes
on the <code>COLLECT</code> group criteria.</p>

<p>This blog post provides a preview of the feature and shows some nice performance improvements.
It also explains the <code>COLLECT</code>-related optimizer parts and how the optimizer will decide whether
to use the new or the traditional implementation.</p>

<!-- more -->


<h2>Introduction to COLLECT</h2>

<p>A quick recap: in AQL, the <code>COLLECT</code> operation can be used for grouping and optionally counting values.</p>

<p>Here&rsquo;s an example, using flight data:</p>

<figure class='code'><figcaption><span>AQL COLLECT example</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR flight IN flights
</span><span class='line'>  COLLECT from = flight._from WITH COUNT INTO count
</span><span class='line'>  RETURN { from: from, count: count }</span></code></pre></td></tr></table></div></figure>


<p>This query will iterate over all documents in collection <code>flights</code>, and count the
number of flights per different <code>_from</code> value (origin airport). The query result will
contain only unique <code>from</code> values plus a counter for each:</p>

<figure class='code'><figcaption><span>query result, grouped by from</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/ABE&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">6205</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/ABQ&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">39346</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/ACV&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">362</span> <span class="p">},</span>
</span><span class='line'>  <span class="err">...</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/YAP&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">285</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/YKM&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">879</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span> <span class="nt">&quot;from&quot;</span> <span class="p">:</span> <span class="s2">&quot;airports/YUM&quot;</span><span class="p">,</span> <span class="nt">&quot;count&quot;</span> <span class="p">:</span> <span class="mi">2275</span> <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>As the <code>COLLECT</code> will group its result according to the specified group criteria (<code>flights._from</code>
in the above query), it needs a way of figuring out to which group any input value does belong.</p>

<p>Before ArangoDB 2.6, there was a single method for determining the group. Starting with ArangoDB
2.6, the query optimizer can choose between two different <code>COLLECT</code> methods, the <strong>sorted</strong> method
and the <strong>hash</strong> method.</p>

<h2>Sorted COLLECT method</h2>

<p>The traditional method for determining the group values is the <strong>sorted</strong> method. It has been
available in ArangoDB since the very start.</p>

<p>The sorted method of <code>COLLECT</code> requires its input to be sorted by the group criteria specified
in the <code>COLLECT</code> statement. Because there is no guarantee that the input data are already sorted
in the same way, the query optimizer will automatically insert a <code>SORT</code> statement into the query
in front of the <code>COLLECT</code>. In case there is a sorted index present on the group criteria attributes,
the optimizer may be able to optimize away the <code>SORT</code> again. If there is no sorted index present
on the group criteria attributes, the <code>SORT</code> will remain in the execution plan.</p>

<p>Here is the execution plan for the above query using the <strong>sorted</strong> method of <code>COLLECT</code>. We can see
the extra <code>SortNode</code> with id #7 being added by the optimizer in front of the <code>COLLECT</code>:</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/collect-sorted.png"></p>

<p>The <strong>sorted</strong> method of <code>COLLECT</code> is efficient because it can write out a group result whenever
an input value will start a new group. Therefore it does not need to keep the whole <code>COLLECT</code>
result in memory. The downside of using the sorted method is that it requires its input to be
sorted, and that this requires adding an extra <code>SORT</code> for not properly sorted input.</p>

<h2>Hash COLLECT method</h2>

<p>Since ArangoDB 2.6, the query optimizer can also employ the <strong>hash</strong> method for <code>COLLECT</code>. The
hash method works by assigning the input values of the <code>COLLECT</code> to slots in a hash table. It
does not require its input to be sorted. Because the entries in the hash table do not have a
particular order, the query optimizer will add a post-<code>COLLECT</code> <code>SORT</code> statement. With this extra
sort of the <code>COLLECT</code> result, the optimizer ensures that the output of the sorted <code>COLLECT</code> will
be the same as the output of the hash <code>COLLECT</code>.</p>

<p>Here is the execution plan for the above query when using the <strong>hash</strong> method of <code>COLLECT</code>.
Here we can see the extra <code>SortNode</code> with id #7 being added post-<code>COLLECT</code>:</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/collect-hash.png"></p>

<p>The <strong>hash</strong> method is beneficial because it does not require sorted input and thus no extra
<code>SORT</code> step in front. However, as the input is not sorted, it is never clear when a group is
actually finished. The hash method therefore needs to build the whole <code>COLLECT</code> result in memory
until the input is exhausted. Then it can safely write out all group results. Additionally,
the result of the hash <code>COLLECT</code> is unsorted. Therefore the optimizer will add a post-<code>COLLECT</code>
sort to ensure the result will be identical to a <strong>sorted</strong> <code>COLLECT</code>.</p>

<h2>Which method will be used when?</h2>

<p>The query optimizer will always take the initial query plan and specialize its <code>COLLECT</code> nodes to
using the <strong>sorted</strong> method. It will also add the pre-<code>COLLECT</code> <code>SORT</code> in the original plan.</p>

<p>In addition, for every <code>COLLECT</code> statement not using an <code>INTO</code> clause, the optimizer will create
a plan variant that uses the <strong>hash</strong> method. In that plan variant, the post-<code>COLLECT</code> <code>SORT</code>
will be added. Note that a <code>WITH COUNT INTO</code> is still ok here, but that using a regular <code>INTO</code>
clause will disable the usage of the <strong>hash</strong> method:</p>

<figure class='code'><figcaption><span>a query that cannot use the hash method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR flight IN flights
</span><span class='line'>  COLLECT from = flight._from INTO allFlights
</span><span class='line'>  RETURN { from: from, flights: allFlights }</span></code></pre></td></tr></table></div></figure>


<p>If more than one <code>COLLECT</code> method can be used for a query, the created plans will be shipped through
the regular optimization pipeline. In the end, the optimizer will pick the plan with the lowest
estimated total cost as it will do for all other queries.</p>

<p>The <strong>hash</strong> variant does not require an up-front sort of the <code>COLLECT</code> input, and will thus be
preferred over the <strong>sorted</strong> method if the optimizer estimates many input elements for the <code>COLLECT</code>
and cannot use an index to process them in already sorted order. In this case, the optimizer
will estimate that post-sorting the result of the <strong>hash</strong> <code>COLLECT</code> will be more efficient than
pre-sorting the input for the <strong>sorted</strong> <code>COLLECT</code>.</p>

<p>The main assumption behind this estimation is that the result of any <code>COLLECT</code> statement will
contain at most as many elements as there are input elements to it. Therefore, the output of
a <code>COLLECT</code> is likely to be smaller (in terms of rows) than its input, making post-sorting more
efficient than pre-sorting.</p>

<p>If there is a sorted index on the <code>COLLECT</code> group criteria that the optimizer can exploit, the
optimizer will pick the <strong>sorted</strong> method because thanks to the index it can optimize away the
pre-<code>COLLECT</code> sort, leaving no sorts left in the final execution plan.</p>

<p>To override the optimizer decision, <code>COLLECT</code> statements now have an <code>OPTIONS</code> modifier. This
modifier can be used to force the optimizer to use the <strong>sorted</strong> variant:</p>

<figure class='code'><figcaption><span>forcing the use of the sorted variant</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR flight IN flights
</span><span class='line'>  COLLECT from = flight._from WITH COUNT INTO count OPTIONS { method: "sorted" }
</span><span class='line'>  RETURN { from: from, count: count }</span></code></pre></td></tr></table></div></figure>


<p>Note that specifying <strong>hash</strong> in <code>method</code> will not force the optimizer to use the <strong>hash</strong> method.
The reason is that the <strong>hash</strong> variant cannot be used for all queries (only <code>COLLECT</code> statements
without an <code>INTO</code> clause are eligible). If <code>OPTIONS</code> are omitted or any other method than <code>sorted</code>
is specified, the optimizer will ignore it and use its regular cost estimations.</p>

<h2>Understanding execution plans</h2>

<p>Which method is actually used in a query can found out by explaining it and looking at its
execution plan.</p>

<p>A <code>COLLECT</code> is internally handled by an object called <code>AggregateNode</code>, so we have to look for that.
In the above screenshots, the <code>AggregateNode</code>s are tagged with either <strong>hash</strong> or <strong>sorted</strong>. This can
also be checked programatically by looking at the <code>aggregationOptions.method</code> attributes in the
JSON result of an explain().</p>

<p>Here is some example code to extract this information, limited to the <code>AggregateNode</code>s of the
query already:</p>

<figure class='code'><figcaption><span>extracting just the AggregateNodes from an explain</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">query</span> <span class="o">=</span> <span class="err">`</span>
</span><span class='line'>  <span class="nx">FOR</span> <span class="nx">flight</span> <span class="nx">IN</span> <span class="nx">flights</span>
</span><span class='line'>  <span class="nx">COLLECT</span> <span class="nx">from</span> <span class="o">=</span> <span class="nx">flight</span><span class="p">.</span><span class="nx">_from</span> <span class="nx">WITH</span> <span class="nx">COUNT</span> <span class="nx">INTO</span> <span class="nx">count</span>
</span><span class='line'>  <span class="nx">RETURN</span> <span class="p">{</span> <span class="nx">from</span><span class="o">:</span> <span class="nx">from</span><span class="p">,</span> <span class="nx">count</span><span class="o">:</span> <span class="nx">count</span> <span class="p">}</span>
</span><span class='line'><span class="err">`</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">stmt</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">_createStatement</span><span class="p">(</span><span class="nx">query</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">plan</span> <span class="o">=</span> <span class="nx">stmt</span><span class="p">.</span><span class="nx">explain</span><span class="p">().</span><span class="nx">plan</span><span class="p">;</span>
</span><span class='line'><span class="nx">plan</span><span class="p">.</span><span class="nx">nodes</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">node</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;AggregateNode&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the above query, this will produce something like this:</p>

<figure class='code'><figcaption><span>JSON explain result for AggregateNode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span> <span class="p">:</span> <span class="s2">&quot;AggregateNode&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="nt">&quot;aggregationOptions&quot;</span> <span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;method&quot;</span> <span class="p">:</span> <span class="s2">&quot;hash&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we can see that the query is using the <strong>hash</strong> method.</p>

<h2>Optimizing away post-COLLECT sorts</h2>

<p>If a query uses the <strong>hash</strong> method for a <code>COLLECT</code> but the sort order of the <code>COLLECT</code> result
is irrelevant to the user, the user can provide a hint to the optimizer to remove the
post-<code>COLLECT</code> sort.</p>

<p>This can be achieved by simply appending a <code>SORT null</code> to the original <code>COLLECT</code> statement.
Here we can see that this removes the post-<code>COLLECT</code> sort:</p>

<p><img src="http://jsteemann.github.io/downloads/screenshots/collect-nosort.png"></p>

<h2>Performance improvements</h2>

<p>The improvements achievable by using the <strong>hash</strong> method instead of the <strong>sorted</strong> method obviously
depend on whether there are appropriate indexes present for the group criteria. If an index can
be exploited, the <strong>sorted</strong> method may be just fine. However, there are cases when no indexes are
present, for example, when running arbitrary ad-hoc queries or when indexes are too expensive
(indexes need to be updated on insert/update/remove and also will use memory).</p>

<p>Following are a few comparisons of the <strong>sorted</strong> and the <strong>hash</strong> methods in case no indexes can be
used.</p>

<p>Here&rsquo;s the setup for the test data. This generates 1M documents with both unique and repeating
string and numeric values. For the non-unique values, we&rsquo;ll use 20 different categories:</p>

<figure class='code'><figcaption><span>setting up test data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">1000000</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">test</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">uniqueNumber</span><span class="o">:</span> <span class="nx">i</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">uniqueString</span><span class="o">:</span> <span class="nb">String</span><span class="p">(</span><span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="nx">i</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">repeatingNumber</span><span class="o">:</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">20</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">repeatingString</span><span class="o">:</span> <span class="nb">String</span><span class="p">(</span><span class="s2">&quot;test&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">20</span><span class="p">))</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s run the following query on the data and measure its execution time:</p>

<figure class='code'><figcaption><span>test query</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR v IN test
</span><span class='line'>  COLLECT value = v.@attribute WITH COUNT INTO count
</span><span class='line'>  RETURN { value: value, count: count }</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The worst case is when the <code>COLLECT</code> will produce as many output rows as there are input
rows. This will happen when using a unique attribute as the grouping criterion. We&rsquo;ll run
tests on both numeric and string values.</p>

<p>Here are the execution times for unique inputs. It can be seen that the <strong>hash</strong> method
here will be beneficial if the post-<code>COLLECT</code> sort can be optimized away. As demonstrated
above, this can be achieved by adding an extra <code>SORT null</code> after the <code>COLLECT</code> statement.
If the post-<code>COLLECT</code> sort is not optimized away, it will make the hash method a bit more
expensive than the <strong>sorted</strong> method:</p>

<figure class='code'><figcaption><span>COLLECT performance with unique inputs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>collect method       @attribute                duration
</span><span class='line'>-------------------------------------------------------
</span><span class='line'>sorted               uniqueNumber               11.92 s 
</span><span class='line'>hash                 uniqueNumber               13.40 s
</span><span class='line'>hash (sort null)     uniqueNumber               10.13 s
</span><span class='line'>sorted               uniqueString               22.04 s
</span><span class='line'>hash                 uniqueString               27.35 s
</span><span class='line'>hash (sort null)     uniqueString               12.12 s</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s check the results when we group on an attribute that is non-unique. Following
are the results for numeric and string attributes with 20 different categories each:</p>

<figure class='code'><figcaption><span>COLLECT performance with non-unique inputs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>collect method       @attribute                duration
</span><span class='line'>-------------------------------------------------------
</span><span class='line'>sorted               repeatingNumber             5.56 s
</span><span class='line'>hash                 repeatingNumber             0.94 s
</span><span class='line'>hash (sort null)     repeatingNumber             0.94 s
</span><span class='line'>sorted               repeatingString            10.56 s
</span><span class='line'>hash                 repeatingString             1.09 s
</span><span class='line'>hash (sort null)     repeatingString             1.09 s</span></code></pre></td></tr></table></div></figure>


<p>In these cases, the result of the <code>COLLECT</code> will be much smaller than its input (we&rsquo;ll
only get 20 result rows out instead of 1M). Therefore the post-<code>COLLECT</code> sort for the <strong>hash</strong>
method will not make any difference, but the pre-<code>COLLECT</code> sort for the <strong>sorted</strong> method
will still need to sort 1M input values. This is also the reason why the <strong>hash</strong> method
is significantly faster here.</p>

<p>As usual, your mileage may vary, so please run your own tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Highscore Lists]]></title>
    <link href="http://jsteemann.github.io/blog/2015/04/20/creating-highscore-lists/"/>
    <updated>2015-04-20T20:18:59+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/04/20/creating-highscore-lists</id>
    <content type="html"><![CDATA[<p>I just came across a question about how to create highscore lists or
leaderboards in ArangoDB, and how they would work when compared to
<a href="http://redis.io/topics/data-types-intro#sorted-sets">Redis sorted sets</a>.</p>

<p>This blog post tries to give an answer on the topic and also detailed
instructions and queries for setting up highscore lists with ArangoDB.</p>

<!-- more -->


<h2>A highscore list in Redis</h2>

<p>Highscore lists are normally used to quickly determine who&rsquo;s currently at
the top, so we obviously need some sorted data structure.</p>

<p>Redis has a specialized datatype named <em>sorted set</em> which can be used for
exactly this purpose. A sorted set in Redis is a value consisting of multiple
key/value pairs, and that is automatically sorted by values. The sorted
set is stored under a key so it can be accessed as a whole.</p>

<p>Here&rsquo;s how one would create a sorted set named <code>highscores</code> and populate
it with 5 key/value pairs in Redis (using <em>redis-cli</em>):</p>

<figure class='code'><figcaption><span>creating a sorted set in Redis</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ZADD highscores frank 50 jan 20 willi 35 thomas 75 ingo 60</span></code></pre></td></tr></table></div></figure>


<p>Adding a new entry to a sorted set is done using <code>ZADD</code> too.
Inserting into a Redis sorted set has logarithmic complexity.</p>

<p>Updating a score in the sorted set is done using <code>ZINCRBY</code>. This command works
regardless of whether the to-be-updated key already exists in the sorted set.
If it exists, its score will be increased by the specified value, and if it does
not exist, it will be created with the specified value:</p>

<figure class='code'><figcaption><span>updating a value in a sorted set</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ZINCRBY highscores 80 max
</span><span class='line'>(integer) 1</span></code></pre></td></tr></table></div></figure>


<p>In this case the return value <code>1</code> indicates that a new key was added to the set
and that it didn&rsquo;t update an existing one.</p>

<p>Querying the entries with the lowest scores from a Redis sorted set is trivial.</p>

<p>The <code>ZRANGE</code> command will query the entries in the sorted set from lowest to
highest score. As the entries are already stored in sorted order, this is very
efficient.</p>

<p>The following command queries the bottom 3 keys from the sorted set:</p>

<figure class='code'><figcaption><span>querying the sorted set, from lowest to highest</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ZRANGE highscores 0 2
</span><span class='line'>1) "jan"
</span><span class='line'>2) "willi"
</span><span class='line'>3) "frank"</span></code></pre></td></tr></table></div></figure>


<p>For querying in reverse order, there is <code>ZREVRANGE</code>. Both commands can be
accompanied by the <code>WITHSCORES</code> flag to also return the associated values (i.e.
the scores). Here are the top 3 key/value pairs in the sorted set:</p>

<figure class='code'><figcaption><span>querying the sorted set, from highest to lowest and with scores</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ZREVRANGE highscores 0 2 WITHSCORES
</span><span class='line'>1) "max"
</span><span class='line'>2) "80"
</span><span class='line'>3) "thomas"
</span><span class='line'>4) "70"
</span><span class='line'>5) "ingo"
</span><span class='line'>6) "60"</span></code></pre></td></tr></table></div></figure>


<p>For removing an entry from a sorted set there is <code>ZREM</code>:</p>

<figure class='code'><figcaption><span>removing a key from a sorted set</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; ZREM highscores jan
</span><span class='line'>(integer) 1</span></code></pre></td></tr></table></div></figure>


<p>There are many more specialized Redis commands for working with sorted sets. The
<a href="http://redis.io/commands">Redis commands</a> prefixed with a <code>Z</code> are sorted set
commands.</p>

<h2>A highscore list in ArangoDB</h2>

<p>Now let&rsquo;s try to mimic that with ArangoDB.</p>

<p>In ArangoDB, there is no such thing as a sorted set and no direct equivalent.
Instead, data in ArangoDB are stored in collections. Collections are a
general-purpose storage mechanism and they are not limited to storing just
scores.</p>

<p>We also need a mechanism for keeping highscores sorted. By default, no
specific sort order is maintained for data in a collection. To have the
collection entries sorted by highscore values, we have to explicitly create
a (sorted) skiplist index on some attribute. We&rsquo;ll use an attribute named
<code>score</code> for this.</p>

<p>The following shell commands create the collection and the index on <code>score</code>:</p>

<figure class='code'><figcaption><span>creating the highscores collection in ArangoDB</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;highscores&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;skiplist&quot;</span><span class="p">,</span> <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;score&quot;</span> <span class="p">]</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the collection is set up, we can switch to AQL for the following operations
(though we could achieve the same with Shell commands).</p>

<p>To insert the same initial data as in the Redis case, we can run the following
five AQL queries:</p>

<figure class='code'><figcaption><span>inserting initial scores</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INSERT { _key: "frank", score: 50 } IN highscores
</span><span class='line'>INSERT { _key: "jan", score: 20 } IN highscores
</span><span class='line'>INSERT { _key: "willi", score: 35 } IN highscores
</span><span class='line'>INSERT { _key: "thomas", score: 75 } IN highscores
</span><span class='line'>INSERT { _key: "ingo", score: 60 } IN highscores</span></code></pre></td></tr></table></div></figure>


<p>Note that I have been using the <code>_key</code> attribute for saving the user id. Using the
<code>_key</code> attribute is normally beneficial because it is the collection&rsquo;s primary key.
It is always present and automatically unique, so exactly what we need for maintaining
a highscore list. Note that there are some restrictions for what can be stored inside
the <code>_key</code> attribute, but as long as values are only ASCII letters or digits, there
is nothing to worry about.</p>

<p>Inserting into the collection will also automatically populate the indexes.
Inserting into a skiplist should have about logarithmic complexity on average
(though this is not guaranteed &ndash; this is because the skiplist is a probabilistic
data structure and internally it will be flipping coins. In theory there is a chance
that it becomes badly balanced. But in practice it should be quite close to an
average logarithmic complexity).</p>

<p>As we have some initial documents, we can now query the lowest and highest scores.
This will also be efficient as the queries will use the sorted index on <code>score</code>:</p>

<figure class='code'><figcaption><span>querying the users with lowest scores</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores 
</span><span class='line'>  SORT h.score ASC 
</span><span class='line'>  LIMIT 3 
</span><span class='line'>  RETURN { user: h._key, score: h.score }</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>querying the users with highest scores</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores 
</span><span class='line'>  SORT h.score DESC 
</span><span class='line'>  LIMIT 3 
</span><span class='line'>  RETURN { user: h._key, score: h.score }</span></code></pre></td></tr></table></div></figure>


<p>To store a highscore for a user without knowing in advance whether a value has already
been stored before for this user, one can use <code>UPSERT</code>. The <code>UPSERT</code> will either insert
a new highscore entry, or update an existing one if already present:</p>

<figure class='code'><figcaption><span>using UPSERT </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT { _key: "max" } 
</span><span class='line'>  INSERT { _key: "max", score: 80 } 
</span><span class='line'>  UPDATE { score: OLD.score + 80 } IN highscores 
</span><span class='line'>  RETURN { user: NEW._key, score: NEW.score }</span></code></pre></td></tr></table></div></figure>


<p>If there is already an entry with a key <code>max</code>, its scores will be increased by 80.
If such entry does not exist, it will be created. In both cases, the new score will
be returned.</p>

<p>Note: the <code>UPSERT</code> command has been added in ArangoDB version 2.6.</p>

<p>Finally, removing an entry from a highscore list is a straight-forward remove operation:</p>

<figure class='code'><figcaption><span>removing an element </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>REMOVE { _key: "jan" } IN highscores</span></code></pre></td></tr></table></div></figure>


<h2>Extensions</h2>

<p>We&rsquo;ll now build on this simple example and create slightly more advanced highscore list
use cases. The following topics will be covered:</p>

<ul>
<li>multi-game highscore lists</li>
<li>joining data</li>
<li>maintaining a &ldquo;last updated&rdquo; date</li>
</ul>


<h3>Multi-game highscore lists</h3>

<p>We&rsquo;ll start with generalizing the single-game highscore list into a multi-game
highscore list.</p>

<p>In Redis, one would create multiple sorted sets for handling the highscore lists of
multiple games. Multiple Redis sorted sets are stored under different keys, so they
are isolated from each other.</p>

<p>Though Redis provides a few commands to aggregate data from multiple sorted sets
(<code>ZUNIONSTORE</code> and <code>ZINTERSTORE</code>) into a new sorted set, other cross-set operations are
not supported. This is not a problem if the client application does not have to
perform cross-set queries or cleanup tasks.</p>

<p>In ArangoDB, multi-game highscore lists can be implemented in two variants.<br/>
In order to decide which variant is better suited, we need to be clear about whether
all highscores should be stored in the same collection or if we prefer using multiple
collections (e.g. one per game).</p>

<p>Storing highscores for different games in separate collections has the advantage that
they&rsquo;re really isolated. It is easy to get rid of a specific highscore list by simply
dropping its collection. It is also easy to get right query-wise.</p>

<p>All that needs to be changed to turn the above examples into a multi-game highscore
list solution is to change the hard-coded collection name <code>highscores</code> and make it a
bind parameter, so the right collection name can be injected by the client application
easily.</p>

<p>On the downside, the multi-collection solution will make cross-game operations difficult.
Additionally, having one collection per game may get out of hand when there are many,
many highscore lists to maintain. In case there are many but small highscore lists to
maintain, it might be better to put them into a single collection and add a <code>game</code>
attribute to tell the individual lists apart in it.</p>

<p>Let&rsquo;s focus on this and put all highscores of all games into a single collection.</p>

<p>The first adjustment that needs to be made is that we cannot use <code>_key</code> for user ids
anymore. This is because user ids may repeat now (a user may be contained in more than
one list). So we will change the design and make the combination of <code>game</code> and <code>user</code>
a new unique key:</p>

<figure class='code'><figcaption><span>creating a multi-game highscore collection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_drop</span><span class="p">(</span><span class="s2">&quot;highscores&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;highscores&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;hash&quot;</span><span class="p">,</span> <span class="nx">unique</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;user&quot;</span><span class="p">,</span> <span class="s2">&quot;game&quot;</span> <span class="p">]</span> <span class="p">});</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;skiplist&quot;</span><span class="p">,</span> <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;game&quot;</span><span class="p">,</span> <span class="s2">&quot;score&quot;</span> <span class="p">]</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can use the unique hash index on <code>user</code> and <code>game</code> to ensure there is at most one entry
for per user per game. It also allows use to find out quickly whether we already have
an entry for that particular combination of game and user. Because we are not using
<code>_key</code> we could now also switch to numeric ids if we preferred that.</p>

<p>The other index on <code>game</code> and <code>score</code> is sorted. It can be used to quickly retrieve the
leaderboard for a given game. As it is primarily sorted by <code>game</code>, it can also be used
to enumerate all entries for a given game.</p>

<p>The following Shell command populates the multi-game highscores collection with 55,000
highscores:</p>

<figure class='code'><figcaption><span>populating the multi-game collection</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">game</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">game</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="nx">game</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">user</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">game</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">;</span> <span class="o">++</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">save</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">game</span><span class="o">:</span> <span class="nx">game</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">user</span><span class="o">:</span> <span class="nb">String</span><span class="p">(</span><span class="nx">user</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">score</span><span class="o">:</span> <span class="p">(</span><span class="nx">game</span> <span class="o">+</span> <span class="nx">user</span><span class="p">)</span> <span class="o">%</span> <span class="mi">997</span>  <span class="cm">/* arbitrary score */</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The game ids used above are between 0 and 9, though any other game ids would work, too.
User ids are stringified numbers.</p>

<p>We can now find out the leaderboard for game 2 with the following adjusted AQL query.
The query will use the (sorted) skiplist index:</p>

<figure class='code'><figcaption><span>querying the leaderboard of a specific game</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores 
</span><span class='line'>  FILTER h.game == 2 
</span><span class='line'>  SORT h.score DESC 
</span><span class='line'>  LIMIT 3 
</span><span class='line'>  RETURN { user: h.user, score: h.score }</span></code></pre></td></tr></table></div></figure>


<p>Removing all scores for a specific game is also efficient due to the the same index:</p>

<figure class='code'><figcaption><span>removing all scores for game 5</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores
</span><span class='line'>  FILTER h.game == 5
</span><span class='line'>  REMOVE h IN highscores</span></code></pre></td></tr></table></div></figure>


<p>On a side note: when storing all highscores in the same collection, we could also
run cross-game queries if we wanted to. All that needs to be done for this is adjusting
the <code>FILTER</code> conditions in the queries.</p>

<p>Inserting or updating a user score can be achieved using an <code>UPSERT</code>.
Here&rsquo;s a query to increase the score of user <code>"1571"</code> in game <code>2</code> by a value of 5:</p>

<figure class='code'><figcaption><span>updating a score for a specific user/game combination</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>UPSERT { game: 2, user: "1571" } 
</span><span class='line'>  INSERT { game: 2, user: "1571", score: 5 } 
</span><span class='line'>  UPDATE { score: OLD.score + 5 } IN highscores 
</span><span class='line'>  RETURN { user: NEW._key, score: NEW.score }</span></code></pre></td></tr></table></div></figure>


<p>The same index on <code>[ "user", "game" ]</code> is used in the following query that will
delete the highscore of a given user in a specific game:</p>

<figure class='code'><figcaption><span>removing a score for a specific user/game combination</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores 
</span><span class='line'>  FILTER h.game == 6 
</span><span class='line'>  FILTER h.user == '3894' 
</span><span class='line'>  REMOVE h IN highscores</span></code></pre></td></tr></table></div></figure>


<h3>Joining data</h3>

<p>Querying the leaderboard for a specific game was easy. However, so far we have only
queried user ids and associated scores in games. In reality, we probably want to display
some more user information in a leaderboard, for example their screen names.</p>

<p>In Redis, no extra information can be stored in sorted sets. So extra user information
must be stored under separate keys. There is no concept of joins in Redis. The scores
contained in the sorted set need to be queried by the client application, and extra
user information have to be queried by the client application separately.</p>

<p>In ArangoDB, we could store the screen names in the highscores collection along with
the highscores so we can easily query them with the leaderboard query. This is also how it
would be done in MongoDB due to the absence of joins there.</p>

<p>While this would work, it will create lots of redundant data if the screen names are
also used and stored elsewhere.</p>

<p>So let&rsquo;s pick the option that stores highscores and screen names in separate places,
and brings them together only when needed in a leaderboard query.</p>

<p>Let&rsquo;s store screen names in a collection named <code>users</code>. The following Shell commands
will create the collection and set up 100K users with dummy screen names:</p>

<figure class='code'><figcaption><span>creating test users</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">_create</span><span class="p">(</span><span class="s2">&quot;users&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100000</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">_key</span><span class="o">:</span> <span class="nb">String</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;test user #&quot;</span> <span class="o">+</span> <span class="nx">i</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now query the highscores plus the screen name in one go:</p>

<figure class='code'><figcaption><span>joining highscores with user data</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>FOR h IN highscores 
</span><span class='line'>  FILTER h.game == 2 
</span><span class='line'>  SORT h.score DESC 
</span><span class='line'>  LIMIT 3 
</span><span class='line'>  FOR u IN users 
</span><span class='line'>    FILTER h.user == u._key 
</span><span class='line'>    RETURN { user: h.user, name: u.name, score: h.score } </span></code></pre></td></tr></table></div></figure>


<h3>Maintaining a &ldquo;last updated&rdquo; date</h3>

<p>Finally, let&rsquo;s try to keep track of when a highscore was last updated. There are
a few use cases for this, for example displaying the date and time of when a highscore
was achieved or for revmoing older highscores.</p>

<p>In Redis, the sorted set values are just the numeric scores, so we cannot store
anything else (such as a date) inside the sorted sets. We would really need to store
the update date for each highscore entry outside the sorted set, either under a
separate key, or using a Redis hash. However, this is complex to manage and keep
consistent so we won&rsquo;t do it.</p>

<p>For implementing the automatic expiration, it would be good if we could use the
built-in automatic key expiration of Redis. Each key can optionally be given a time-to-live
or an expiration date, and it will automatically expire and vanish then without further
ado. This may be exactly what we need to remove older highscore entries, but we cannot
use it. The reason is that expiration only works for keys at the top level, but not
for individual keys inside a sorted set. So we cannot really implement this sanely.</p>

<p>Let&rsquo;s switch to ArangoDB now. Here we work with arbitrarily structured documents.
That means we can store any other attributes along with a highscore. We can store the
timestamp of when a highscore was last set or updated in an attribute named <code>date</code>:</p>

<figure class='code'><figcaption><span>storing the date of last update</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET now = DATE_NOW()
</span><span class='line'>UPSERT { game: 2, user: "1571" } 
</span><span class='line'>  INSERT { game: 2, user: "1571", score: 10, date: now } 
</span><span class='line'>  UPDATE { score: OLD.score + 10, date: now } IN highscores 
</span><span class='line'>  RETURN { user: NEW._key, score: NEW.score }</span></code></pre></td></tr></table></div></figure>


<p>The <code>date</code> attribute can now be used for display purposes already.</p>

<p>We can also use the <code>date</code> attribute for identifying the oldest entries in the
highscore list in case we want the list to be periodically cleaned up.</p>

<p>Obviously we will be indexing <code>date</code> for this, but we need to decide whether we want to use
the same expiration periods for all games, or if we want to use game-specific expirations.</p>

<p>If the expiration date is the same for all games, then we can index just <code>date</code>:</p>

<figure class='code'><figcaption><span>creating the index on date</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;skiplist&quot;</span><span class="p">,</span> <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;date&quot;</span> <span class="p">]</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we now want to remove entries older than roughly 2 days, regardless of the
associated game, the removal query looks like this:</p>

<figure class='code'><figcaption><span>deleting oldest entries</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET compare = DATE_NOW() - 2 * 86400 * 1000
</span><span class='line'>FOR h IN highscores
</span><span class='line'>  FILTER h.date &lt; compare
</span><span class='line'>  LIMIT 1000
</span><span class='line'>  REMOVE h IN highscores</span></code></pre></td></tr></table></div></figure>


<p>If we instead want to find (and remove) the oldest entries for individual games,
we need to create the index on <code>game</code> and <code>date</code>:</p>

<figure class='code'><figcaption><span>creating the index on game and date</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">highscores</span><span class="p">.</span><span class="nx">ensureIndex</span><span class="p">({</span> <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;skiplist&quot;</span><span class="p">,</span> <span class="nx">fields</span><span class="o">:</span> <span class="p">[</span> <span class="s2">&quot;game&quot;</span><span class="p">,</span> <span class="s2">&quot;date&quot;</span> <span class="p">]</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This index allows to efficiently get rid of the oldest entries per game:</p>

<figure class='code'><figcaption><span>remvoin oldest entries for a game</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LET compare = DATE_NOW() - 2 * 86400 * 1000
</span><span class='line'>FOR h IN highscores
</span><span class='line'>  FILTER h.game == 2
</span><span class='line'>  FILTER h.date &lt; compare
</span><span class='line'>  LIMIT 1000
</span><span class='line'>  REMOVE h IN highscores</span></code></pre></td></tr></table></div></figure>


<p>On a side note: the <code>REMOVE</code> was limited to the <em>oldest</em> 1000 entries. This
was done to make the query return fast. The removal query can be repeated while
there are still entries to remove.</p>
]]></content>
  </entry>
  
</feed>
