<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AQL | J@ArangoDB]]></title>
  <link href="http://jsteemann.github.io/blog/categories/aql/atom.xml" rel="self"/>
  <link href="http://jsteemann.github.io/"/>
  <updated>2015-05-07T18:31:26+02:00</updated>
  <id>http://jsteemann.github.io/</id>
  <author>
    <name><![CDATA[jsteemann]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IN-list Improvements]]></title>
    <link href="http://jsteemann.github.io/blog/2015/05/07/in-list-improvements/"/>
    <updated>2015-05-07T16:46:30+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/05/07/in-list-improvements</id>
    <content type="html"><![CDATA[<p>We have worked on many AQL optimizations for ArangoDB 2.6.</p>

<p>As a side effect of one of these optimizations, some cases involving the handling
of large IN-lists have become much faster than before. Large IN-lists are normally
used when comparing attribute or index values against some big array of lookup values
or keys provided by the application.</p>

<!-- more -->


<p>Let&rsquo;s quickly create and populate a collection named <code>keys</code> so that we can use some
IN-list queries on it later on:</p>

<p>```js setting up example data
db._create(&ldquo;keys&rdquo;);</p>

<p>// insert 100k documents with some defined keys into the collection
for (var i = 0; i &lt; 100000; ++i) {
  db.keys.insert({ _key: &ldquo;test&rdquo; + i });
}
```</p>

<p>And here is a query to all find documents with one of the provided keys <code>test0</code> to <code>test999</code>.
The IN-list here contains 1,000 values:</p>

<p><code>js using an IN-list with 1,000 values
var keys = [ ];
var n = 1000;
for (var i = 0; i &lt; n; ++i) {
  keys.push("test" + i);
}
db._query("FOR doc IN keys FILTER doc._key IN @keys RETURN doc", { keys: keys }); });
</code></p>

<p>When invoked from the ArangoShell, this takes around 0.6 seconds to complete with ArangoDB 2.5.</p>

<p>Increasing the length of the IN-list from 1,000 to 5,000 values makes this run in around 15 seconds.
With an IN-list of 10,000 values, this already takes more than 60 seconds to complete in 2.5.</p>

<p>Obviously longer IN-lists weren&rsquo;t handled terribly efficiently in 2.5, and should be avoided there
if possible.</p>

<p>I am glad this has been fixed in 2.6. Following is a comparison of the above query for different
IN-list sizes, run on both ArangoDB 2.5 and 2.6.</p>

<p>```plain 2.5 and 2.6 with different IN-list sizes</p>

<h1>of IN-list values    Execution time (2.5)   Execution time (2.6)</h1>

<hr />

<pre><code>          1,000                  0.67 s                 0.03 s
          5,000                 15.34 s                 0.12 s
         10,000                 63.48 s                 0.20 s
         50,000                   n/a                   0.81 s
        100,000                   n/a                   1.60 s
</code></pre>

<p>```</p>

<p>Looks like 2.6 handles longer IN-lists way better than 2.5! The above figures suggest that execution
times now scale about linearly with the number of IN-list values. This also leads to reductions in query
execution times of 90 % and more percent.</p>

<p>Please note that longer IN-lists will still make a the query run longer than when
using shorter IN-lists. This is expected because longer IN-lists require more comparisons to
be made and will lead (in the above example) to more documents being returned.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subquery Optimizations]]></title>
    <link href="http://jsteemann.github.io/blog/2015/05/04/subquery-optimizations/"/>
    <updated>2015-05-04T13:26:00+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/05/04/subquery-optimizations</id>
    <content type="html"><![CDATA[<p>This is another post demonstrating some of the AQL query performance improvements
that can be expected in ArangoDB 2.6. Specifically, this post is about an optimization
for subqueries. AQL queries with multiple subqueries will likely benefit from it.</p>

<!-- more -->


<p>The following example queries use the same <code>users</code> collection with 100,000 documents
that was used in the <a href="/blog/2015/05/04/return-value-optimization-for-aql/">previous post about return value optimizations</a>.
Again, the source data for the collection can be found <a href="/downloads/code/users-100000.json.tar.gz">here</a>.</p>

<p>We&rsquo;ll start with a query that uses a single subquery extracting all users from the
collection into a flat result array:</p>

<p><code>plain example query with single subquery
RETURN [
  (FOR u IN users RETURN u)
]
</code></p>

<p>This query is equally fast with ArangoDB 2.5 and 2.6, no changes here.</p>

<p>Let&rsquo;s ramp it up to using two subqueries, one for users with a <code>gender</code> attribute value
of <code>male</code>, and one for users with <code>gender</code> attribute value <code>female</code>. No indexes were used
for the extraction in 2.5 nor 2.6:</p>

<p><code>plain example query with two subqueries
RETURN [
  (FOR u IN users FILTER u.gender == 'male' RETURN u),
  (FOR u IN users FILTER u.gender == 'female' RETURN u)
]
</code></p>

<p>The query takes 16.6 seconds to execute in 2.5, but only 2.95 seconds with ArangoDB 2.6.
This 80 % reduction in execution time is due to ArangoDB 2.6 being a bit smarter about
subqueries than 2.5 is.</p>

<p>In the above query, the two subqueries are independent, so not only can they be executed in
any order, but they also do not rely on each other&rsquo;s results. ArangoDB 2.6 will detect that
and avoid copying variables and intermediate results into subqueries if they are actually not
needed there. 2.5 copied all variables into subqueries unconditionally, even if variables
were not needed there.</p>

<p>In 2.6, any AQL query with multiple subqueries will benefit from this optimization. The
performance improvements will be greater if subqueries late in the execution pipeline have a lot of
intermediate results created in front of them, but do not rely on these intermediate results.</p>

<p>Another nice example for a 2.6 speedup is extracting a single attribute per subquery, as is done
for the <code>name</code> attribute in the following query:</p>

<p><code>plain extracting a single attribute in two subqueries
RETURN [
  (FOR u IN users FILTER u.gender == 'male' RETURN u.name),
  (FOR u IN users FILTER u.gender == 'female' RETURN u.name)
]
</code></p>

<p>This takes 42 seconds to execute in 2.5, and only 0.86 seconds in 2.6. This is a more than
95 % reduction in execution time. It is caused by a mix of factors, one of them again being
the subquery optimization that avoids copying unneeded intermediate results.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Return Value Optimization for AQL]]></title>
    <link href="http://jsteemann.github.io/blog/2015/05/04/return-value-optimization-for-aql/"/>
    <updated>2015-05-04T10:32:43+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/05/04/return-value-optimization-for-aql</id>
    <content type="html"><![CDATA[<p>While in search for further AQL query optimizations last week, we found that intermediate AQL
query results were copied one time too often in some cases. Precisely, the data that a query&rsquo;s
<code>ReturnNode</code> will return to the caller was copied into the <code>ReturnNode</code>&rsquo;s own register. With
<code>ReturnNode</code>s never modifying their input data, this demanded for something that is called
<em>return-value optimization</em> in compilers.</p>

<p>2.6 will now optimize away these copies in many cases, and this post shows which performance
benefits can be expected due to the optimization.</p>

<!-- more -->


<p>The effect of the optimization can be demonstrated easily with a few simple AQL queries.
Let&rsquo;s start with a query that simply returns all 100,000 documents from a collection <code>users</code>:
<code>FOR u IN users RETURN u</code> (the source data for the collection can be found <a href="/downloads/code/users-100000.json.tar.gz">here</a>).</p>

<p>This query&rsquo;s execution plan is already straight-forward and simple:</p>

<p><img src="/downloads/screenshots/return.png"></p>

<p>So where&rsquo;s the problem?</p>

<p>The <code>ReturnNode</code> in this query (and other queries too) will copy its input data into its own output
register, only to finally hand the results to the query&rsquo;s caller. This copying is most often unnecessary
as the <code>ReturnNode</code> will not modify its input. So the idea was to get rid of the copying action and
tell the query&rsquo;s calling code in which (now different) register to look for the results.</p>

<p>Optimizing away the copying inside the <code>ReturnNode</code> made the query run faster already.
The same query now returns the 100,000 documents in 0.24 to 0.26 seconds, compared to 0.27 to 0.30 s
before applying the optimization.</p>

<p>Returning just an attribute of each document shows about the same improvement rates. The execution
times of the query <code>FOR u IN users RETURN u._key</code> drop to between 0.13 and 0.14 seconds with the
optimization, from initially between 0.15 and 0.17 seconds.</p>

<p>Another example query, <code>FOR i IN 1..1000000 RETURN i</code>, now runs in 0.58 to 0.61 seconds with
the optimization, compared to between 0.77 and 0.81 seconds without it.</p>

<p>These absolute figures may not look overly impressive, but they indicate relative improvements of
between 10 and 25 %, which is quite nice. This is effectively saved CPU time that can now be used
for something more productive.</p>

<p>Of course the performance improvements may not be that high for every imaginable AQL query.
Though the optimization may be active in most AQL queries, its effect will only be measurable
for queries that return a significant number of documents/values. Otherwise the share of the
<code>ReturnNode</code>&rsquo;s work in the query&rsquo;s overall computations may be too low to have any effect.
Additionally, the more work a query spends in performing other operations (e.g. filtering,
sorting, collecting), the less relevant will be the overall effect of the optimized <code>ReturnNode</code>.
Finally, when query results need to be shipped from the server to the client over a network,
the relative effect of the optimization may diminish further.</p>

<p>So your mileage may vary. But the optimization will not do any harm, and together with some
other query optimizations already finished for 2.6 it will contribute to many AQL queries
running faster than before.</p>

<p>AQL queries will benefit from the optimization automatically in ArangoDB 2.6, without requiring
any adjustments to the query string, the server configuration etc. The optimizer will automatically
apply the optimization for the main-level <code>ReturnNode</code> of every AQL query.</p>

<p>On a side note: the optimization will not be shown in the list of applied optimizer rules for the
query. This is because the optimization is performed in some different place in the query
executor, after applying the optimizer rules.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AQL Functions Improvements]]></title>
    <link href="http://jsteemann.github.io/blog/2015/04/23/aql-functions-improvements/"/>
    <updated>2015-04-23T10:24:53+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/04/23/aql-functions-improvements</id>
    <content type="html"><![CDATA[<p>Waiting for a <code>git pull</code> to complete over an 8 KiB/s internet connection is boring.
So I thought I&rsquo;d rather use the idle time and quickly write about some performance
improvements for certain AQL functions that were recently completed and that will
become available with ArangoDB 2.6.</p>

<p>The improvements affect the following AQL functions:</p>

<ul>
<li><code>UNSET()</code>: remove specified attributes from an object/document</li>
<li><code>KEEP()</code>: keep only specified attributes of an object/document</li>
<li><code>MERGE()</code>: merge the attributes of multiple objects/documents</li>
</ul>


<p>This blog post shows a few example queries that will benefit from <strong>50 to more than 60 %
reductions</strong> in query execution times due to the changes done to these functions.</p>

<!-- more -->


<h2>When to expect benefits</h2>

<p>Reductions in execution time can be expected for AQL queries invoking one of the above
AQL functions many times, and if the AQL function is used in a so-called <em>simple</em>
calculation. Whether or not a calculation is considered <em>simple</em> is shown in the detailed
JSON output of an <code>explain()</code>.</p>

<p>Queries will not benefit if they invoke the AQL functions only a few times or when the
function call is contained in an expression that is executed using the non-<em>simple</em> code path.</p>

<h2>Example queries</h2>

<p>Following are a few example queries for the three AQL functions, showing the reductions in
execution times. They all use the <em>simple</em> code path so the benefits can be reaped.</p>

<p>For comparing the execution times between 2.5 and 2.6, I have prepared a simple test setup.
Here is a test function that will create a collection named <code>test</code> and populate it
with a configurable amount documents. It will then run an AQL query that will update
each document in the collection, using one of the named AQL functions. The function
will return the execution time for the AQL query, excluding the collection setup time:</p>

<p>```js test function
var run = function (n, query) {
  var time = require(&ldquo;internal&rdquo;).time;
  var db = require(&ldquo;org/arangodb&rdquo;).db;</p>

<p>  // drop and re-create test collection
  db.<em>drop(&ldquo;test&rdquo;);
  var c = db.</em>create(&ldquo;test&rdquo;);</p>

<p>  // insert n documents
  for (var i = 0; i &lt; n; ++i) {</p>

<pre><code>c.insert({ value1: i, value2: i, value3: 'foobar' + i }); 
</code></pre>

<p>  }</p>

<p>  // flush write-ahead log and wait a few seconds before running query
  require(&ldquo;internal&rdquo;).wal.flush();
  require(&ldquo;internal&rdquo;).wait(5);</p>

<p>  // run query
  var s = time();
  db._query(query);
  return time() &ndash; s;
};
```</p>

<h3>UNSET()</h3>

<p>Let&rsquo;s start with the <code>UNSET()</code> AQL function. Its purpose is to remove or multiple
attributes from an object/document. Here is an example AQL query that removes
attribute <code>value2</code> from each document in the <code>test</code> collection:</p>

<p><code>js invocation of UNSET()
run(n, "FOR t IN test LET modified = UNSET(t, 'value2') REPLACE t WITH modified IN test");
</code></p>

<p>The execution times (in seconds) for different <code>n</code> values in ArangoDB 2.5 and 2.6 are:</p>

<p>```plain execution times of UNSET() query in 2.5 and 2.6</p>

<h2>value of n       time 2.5       time 2.6       speedup</h2>

<p>   100,000         3.28 s         1.13 s          65 %
   500,000        16.93 s         5.38 s          68 %
 1,000,000        32.60 s        11.40 s          65 %
```</p>

<h3>KEEP()</h3>

<p>The purpose of <code>KEEP()</code> is to remove all attributes from an object/document but the
specified ones. Here&rsquo;s an example query that uses <code>KEEP()</code> to remove all attributes
from the documents in the <code>test</code> collectionn but attribute <code>value2</code>:</p>

<p><code>js invocation of KEEP()
run(n, "FOR t IN test LET modified = KEEP(t, 'value2') REPLACE t WITH modified IN test");
</code></p>

<p>The execution times (in seconds) for different <code>n</code> values in ArangoDB 2.5 and 2.6 are:</p>

<p>```plain execution times of KEEP() query in 2.5 and 2.6</p>

<h2>value of n       time 2.5       time 2.6       speedup</h2>

<p>   100,000         1.98 s         0.87 s          56 %
   500,000         9.34 s         4.09 s          56 %
 1,000,000        18.86 s         8.23 s          56 %
```</p>

<h3>MERGE()</h3>

<p>Finally, the <code>MERGE()</code> function can be used to merge multiple objects/documents in a
single one. The following query will add an attribute <code>value4</code> to all documents in
collection <code>test</code>:</p>

<p><code>js invocation of MERGE()
run(n, "FOR t IN test LET modified = MERGE(t, { value4 : 1 }) REPLACE t WITH modified IN test");
</code></p>

<p>The execution times (in seconds) for different <code>n</code> values in ArangoDB 2.5 and 2.6 are:</p>

<p>```plain execution times of MERGE() query in 2.5 and 2.6</p>

<h2>value of n       time 2.5       time 2.6       speedup</h2>

<p>   100,000         3.93 s         1.22 s          68 %
   500,000        19.17 s         5.91 s          69 %
 1,000,000        38.27 s        12.33 s          67 %
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[COLLECTing With a Hash Table]]></title>
    <link href="http://jsteemann.github.io/blog/2015/04/22/collecting-with-a-hash-table/"/>
    <updated>2015-04-22T13:53:10+02:00</updated>
    <id>http://jsteemann.github.io/blog/2015/04/22/collecting-with-a-hash-table</id>
    <content type="html"><![CDATA[<p>ArangoDB 2.6 will feature an alternative <strong>hash</strong> implementation of the AQL <code>COLLECT</code>
operation. The new implementation can speed up some AQL queries that can not exploit indexes
on the <code>COLLECT</code> group criteria.</p>

<p>This blog post provides a preview of the feature and shows some nice performance improvements.
It also explains the <code>COLLECT</code>-related optimizer parts and how the optimizer will decide whether
to use the new or the traditional implementation.</p>

<!-- more -->


<h2>Introduction to COLLECT</h2>

<p>A quick recap: in AQL, the <code>COLLECT</code> operation can be used for grouping and optionally counting values.</p>

<p>Here&rsquo;s an example, using flight data:</p>

<p><code>plain AQL COLLECT example
FOR flight IN flights
  COLLECT from = flight._from WITH COUNT INTO count
  RETURN { from: from, count: count }
</code></p>

<p>This query will iterate over all documents in collection <code>flights</code>, and count the
number of flights per different <code>_from</code> value (origin airport). The query result will
contain only unique <code>from</code> values plus a counter for each:</p>

<p><code>json query result, grouped by from
[
  { "from" : "airports/ABE", "count" : 6205 },
  { "from" : "airports/ABQ", "count" : 39346 },
  { "from" : "airports/ACV", "count" : 362 },
  ...
  { "from" : "airports/YAP", "count" : 285 },
  { "from" : "airports/YKM", "count" : 879 },
  { "from" : "airports/YUM", "count" : 2275 }
]
</code></p>

<p>As the <code>COLLECT</code> will group its result according to the specified group criteria (<code>flights._from</code>
in the above query), it needs a way of figuring out to which group any input value does belong.</p>

<p>Before ArangoDB 2.6, there was a single method for determining the group. Starting with ArangoDB
2.6, the query optimizer can choose between two different <code>COLLECT</code> methods, the <strong>sorted</strong> method
and the <strong>hash</strong> method.</p>

<h2>Sorted COLLECT method</h2>

<p>The traditional method for determining the group values is the <strong>sorted</strong> method. It has been
available in ArangoDB since the very start.</p>

<p>The sorted method of <code>COLLECT</code> requires its input to be sorted by the group criteria specified
in the <code>COLLECT</code> statement. Because there is no guarantee that the input data are already sorted
in the same way, the query optimizer will automatically insert a <code>SORT</code> statement into the query
in front of the <code>COLLECT</code>. In case there is a sorted index present on the group criteria attributes,
the optimizer may be able to optimize away the <code>SORT</code> again. If there is no sorted index present
on the group criteria attributes, the <code>SORT</code> will remain in the execution plan.</p>

<p>Here is the execution plan for the above query using the <strong>sorted</strong> method of <code>COLLECT</code>. We can see
the extra <code>SortNode</code> with id #7 being added by the optimizer in front of the <code>COLLECT</code>:</p>

<p><img src="/downloads/screenshots/collect-sorted.png"></p>

<p>The <strong>sorted</strong> method of <code>COLLECT</code> is efficient because it can write out a group result whenever
an input value will start a new group. Therefore it does not need to keep the whole <code>COLLECT</code>
result in memory. The downside of using the sorted method is that it requires its input to be
sorted, and that this requires adding an extra <code>SORT</code> for not properly sorted input.</p>

<h2>Hash COLLECT method</h2>

<p>Since ArangoDB 2.6, the query optimizer can also employ the <strong>hash</strong> method for <code>COLLECT</code>. The
hash method works by assigning the input values of the <code>COLLECT</code> to slots in a hash table. It
does not require its input to be sorted. Because the entries in the hash table do not have a
particular order, the query optimizer will add a post-<code>COLLECT</code> <code>SORT</code> statement. With this extra
sort of the <code>COLLECT</code> result, the optimizer ensures that the output of the sorted <code>COLLECT</code> will
be the same as the output of the hash <code>COLLECT</code>.</p>

<p>Here is the execution plan for the above query when using the <strong>hash</strong> method of <code>COLLECT</code>.
Here we can see the extra <code>SortNode</code> with id #7 being added post-<code>COLLECT</code>:</p>

<p><img src="/downloads/screenshots/collect-hash.png"></p>

<p>The <strong>hash</strong> method is beneficial because it does not require sorted input and thus no extra
<code>SORT</code> step in front. However, as the input is not sorted, it is never clear when a group is
actually finished. The hash method therefore needs to build the whole <code>COLLECT</code> result in memory
until the input is exhausted. Then it can safely write out all group results. Additionally,
the result of the hash <code>COLLECT</code> is unsorted. Therefore the optimizer will add a post-<code>COLLECT</code>
sort to ensure the result will be identical to a <strong>sorted</strong> <code>COLLECT</code>.</p>

<h2>Which method will be used when?</h2>

<p>The query optimizer will always take the initial query plan and specialize its <code>COLLECT</code> nodes to
using the <strong>sorted</strong> method. It will also add the pre-<code>COLLECT</code> <code>SORT</code> in the original plan.</p>

<p>In addition, for every <code>COLLECT</code> statement not using an <code>INTO</code> clause, the optimizer will create
a plan variant that uses the <strong>hash</strong> method. In that plan variant, the post-<code>COLLECT</code> <code>SORT</code>
will be added. Note that a <code>WITH COUNT INTO</code> is still ok here, but that using a regular <code>INTO</code>
clause will disable the usage of the <strong>hash</strong> method:</p>

<p><code>plain a query that cannot use the hash method
FOR flight IN flights
  COLLECT from = flight._from INTO allFlights
  RETURN { from: from, flights: allFlights }
</code></p>

<p>If more than one <code>COLLECT</code> method can be used for a query, the created plans will be shipped through
the regular optimization pipeline. In the end, the optimizer will pick the plan with the lowest
estimated total cost as it will do for all other queries.</p>

<p>The <strong>hash</strong> variant does not require an up-front sort of the <code>COLLECT</code> input, and will thus be
preferred over the <strong>sorted</strong> method if the optimizer estimates many input elements for the <code>COLLECT</code>
and cannot use an index to process them in already sorted order. In this case, the optimizer
will estimate that post-sorting the result of the <strong>hash</strong> <code>COLLECT</code> will be more efficient than
pre-sorting the input for the <strong>sorted</strong> <code>COLLECT</code>.</p>

<p>The main assumption behind this estimation is that the result of any <code>COLLECT</code> statement will
contain at most as many elements as there are input elements to it. Therefore, the output of
a <code>COLLECT</code> is likely to be smaller (in terms of rows) than its input, making post-sorting more
efficient than pre-sorting.</p>

<p>If there is a sorted index on the <code>COLLECT</code> group criteria that the optimizer can exploit, the
optimizer will pick the <strong>sorted</strong> method because thanks to the index it can optimize away the
pre-<code>COLLECT</code> sort, leaving no sorts left in the final execution plan.</p>

<p>To override the optimizer decision, <code>COLLECT</code> statements now have an <code>OPTIONS</code> modifier. This
modifier can be used to force the optimizer to use the <strong>sorted</strong> variant:</p>

<p><code>plain forcing the use of the sorted variant
FOR flight IN flights
  COLLECT from = flight._from WITH COUNT INTO count OPTIONS { method: "sorted" }
  RETURN { from: from, count: count }
</code></p>

<p>Note that specifying <strong>hash</strong> in <code>method</code> will not force the optimizer to use the <strong>hash</strong> method.
The reason is that the <strong>hash</strong> variant cannot be used for all queries (only <code>COLLECT</code> statements
without an <code>INTO</code> clause are eligible). If <code>OPTIONS</code> are omitted or any other method than <code>sorted</code>
is specified, the optimizer will ignore it and use its regular cost estimations.</p>

<h2>Understanding execution plans</h2>

<p>Which method is actually used in a query can found out by explaining it and looking at its
execution plan.</p>

<p>A <code>COLLECT</code> is internally handled by an object called <code>AggregateNode</code>, so we have to look for that.
In the above screenshots, the <code>AggregateNode</code>s are tagged with either <strong>hash</strong> or <strong>sorted</strong>. This can
also be checked programatically by looking at the <code>aggregationOptions.method</code> attributes in the
JSON result of an explain().</p>

<p>Here is some example code to extract this information, limited to the <code>AggregateNode</code>s of the
query already:</p>

<p><code>js extracting just the AggregateNodes from an explain
var query = `
  FOR flight IN flights
  COLLECT from = flight._from WITH COUNT INTO count
  RETURN { from: from, count: count }
`;
var stmt = db._createStatement(query);
var plan = stmt.explain().plan;
plan.nodes.filter(function(node) {
  return node.type === 'AggregateNode';
});
</code></p>

<p>For the above query, this will produce something like this:</p>

<p>```json JSON explain result for AggregateNode
[
  {</p>

<pre><code>"type" : "AggregateNode", 
...
"aggregationOptions" : { 
  "method" : "hash" 
}  
</code></pre>

<p>  }
]
```</p>

<p>Here we can see that the query is using the <strong>hash</strong> method.</p>

<h2>Optimizing away post-COLLECT sorts</h2>

<p>If a query uses the <strong>hash</strong> method for a <code>COLLECT</code> but the sort order of the <code>COLLECT</code> result
is irrelevant to the user, the user can provide a hint to the optimizer to remove the
post-<code>COLLECT</code> sort.</p>

<p>This can be achieved by simplying appending a <code>SORT null</code> to the original <code>COLLECT</code> statement.
Here we can see that this removes the post-<code>COLLECT</code> sort:</p>

<p><img src="/downloads/screenshots/collect-nosort.png"></p>

<h2>Performance improvements</h2>

<p>The improvements achievable by using the <strong>hash</strong> method instead of the <strong>sorted</strong> method obviously
depend on whether there are appropriate indexes present for the group criteria. If an index can
be exploited, the <strong>sorted</strong> method may be just fine. However, there are cases when no indexes are
present, for example, when running arbitrary ad-hoc queries or when indexes are too expensive
(indexes need to be updated on insert/update/remove and also will use memory).</p>

<p>Following are a few comparisons of the <strong>sorted</strong> and the <strong>hash</strong> methods in case no indexes can be
used.</p>

<p>Here&rsquo;s the setup for the test data. This generates 1M documents with both unique and repeating
string and numeric values. For the non-unique values, we&rsquo;ll use 20 different categories:</p>

<p>```js setting up test data
var test = db._create(&ldquo;test&rdquo;);
for (var i = 0; i &lt; 1000000; ++i) {
  test.insert({</p>

<pre><code>uniqueNumber: i, 
uniqueString: String("test" + i), 
repeatingNumber: (i % 20), 
repeatingString: String("test" + (i % 20)) 
</code></pre>

<p>  });
}
```</p>

<p>Now let&rsquo;s run the following query on the data and measure its execution time:</p>

<p><code>plain test query
FOR v IN test
  COLLECT value = v.@attribute WITH COUNT INTO count
  RETURN { value: value, count: count }
</code></p>

<p>The worst case is when the <code>COLLECT</code> will produce as many output rows as there are input
rows. This will happen when using a unique attribute as the grouping criterion. We&rsquo;ll run
tests on both numeric and string values.</p>

<p>Here are the execution times for unique inputs. It can be seen that the <strong>hash</strong> method
here will be beneficial if the post-<code>COLLECT</code> sort can be optimized away. As demonstrated
above, this can be achieved by adding an extra <code>SORT null</code> after the <code>COLLECT</code> statement.
If the post-<code>COLLECT</code> sort is not optimized away, it will make the hash method a bit more
expensive than the <strong>sorted</strong> method:</p>

<p>```plain COLLECT performance with unique inputs</p>

<h2>collect method       @attribute                duration</h2>

<p>sorted               uniqueNumber               11.92 s
hash                 uniqueNumber               13.40 s
hash (sort null)     uniqueNumber               10.13 s
sorted               uniqueString               22.04 s
hash                 uniqueString               27.35 s
hash (sort null)     uniqueString               12.12 s
```</p>

<p>Now let&rsquo;s check the results when we group on an attribute that is non-unique. Following
are the results for numeric and string attributes with 20 different categories each:</p>

<p>```plain COLLECT performance with non-unique inputs</p>

<h2>collect method       @attribute                duration</h2>

<p>sorted               repeatingNumber             5.56 s
hash                 repeatingNumber             0.94 s
hash (sort null)     repeatingNumber             0.94 s
sorted               repeatingString            10.56 s
hash                 repeatingString             1.09 s
hash (sort null)     repeatingString             1.09 s
```</p>

<p>In these cases, the result of the <code>COLLECT</code> will be much smaller than its input (we&rsquo;ll
only get 20 result rows out instead of 1M). Therefore the post-<code>COLLECT</code> sort for the <strong>hash</strong>
method will not make any difference, but the pre-<code>COLLECT</code> sort for the <strong>sorted</strong> method
will still need to sort 1M input values. This is also the reason why the <strong>hash</strong> method
is significantly faster here.</p>

<p>As usual, your mileage may vary, so please run your own tests.</p>
]]></content>
  </entry>
  
</feed>
